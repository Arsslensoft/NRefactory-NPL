//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Research\NRefactory\NRefactory\ICSharpCode.NRefactory.Rava\Parser\RSharpParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace ICSharpCode.NRefactory.Rava.Parser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class RSharpParser : Parser {
	public const int
		BITWISE_OR=144, THROW=85, INTEGER_LITERAL=116, HEX_INTEGER_LITERAL=117, 
		STATIC=79, MINUS=139, CONDITIONAL_SYMBOL=203, INTERR=151, OP_PTR=158, 
		OPEN_BRACE=128, LITERAL_ACCESS=115, PRAGMA=201, ERROR=197, OP_RIGHT_ROTATE_ASSIGNMENT=178, 
		ELIF=194, BANG=146, OCT_INTEGER_LITERAL=119, WHERE=100, OP_DIV_ASSIGNMENT=166, 
		AS=11, MIXIN=57, DELIMITED_DOC_COMMENT=3, INTO=110, OP_LEFT_ROTATE=172, 
		SET=75, SIZEOF=77, CLOSE_BRACKET=131, FOREACH=38, DEFINE=192, INTERRUPT=50, 
		GROUP=109, CLOSE_BRACE=129, OP_LEFT_SHIFT_ASSIGNMENT=173, BY=105, PROTECTED=66, 
		LONG=52, SUPERSEDE=84, YIELD=102, CONTINUE=22, DIV=141, REF=70, REGULAR_STRING_INSIDE=186, 
		OPERATOR=60, STAR=140, PERCENT=142, STRING=80, OPEN_PARENS=132, UNION=91, 
		UNDEF=193, VIRTUAL=96, ULONG=90, ADD=9, FRIEND=48, WHITESPACES=6, CLASS=20, 
		DO=27, FINALLY=35, CHECKED=19, OP_RIGHT_SHIFT_ASSIGNMENT=177, UNCHECKED=92, 
		CONST=21, PACKAGE=54, USHORT=94, DESCENDING=106, FOR=37, OP_NE=160, CARET=145, 
		WARNING=198, IMPLICIT=42, USING=95, OP_ZERO=180, VERBATIUM_DOUBLE_QUOTE_INSIDE=184, 
		SYNC=51, OP_RIGHT_ROTATE=176, READONLY=69, SINGLE_LINE_DOC_COMMENT=2, 
		DIGITS=191, RETURN=72, SEALED=74, DOUBLE_CURLY_CLOSE_INSIDE=206, ASSIGNMENT=148, 
		UNSAFE=93, IDENTIFIER=114, ORDERBY=113, OP_MOD_ASSIGNMENT=167, OP_OR_ASSIGNMENT=169, 
		OPEN_BRACKET=130, OP_LE=161, ENDIF=195, PARTIAL=64, COLON=136, GT=150, 
		SHORT=76, INTERPOLATED_VERBATIUM_STRING_START=127, TYPEOF=88, BOOL=13, 
		FALSE=34, INTERPOLATED_REGULAR_STRING_START=126, REGULAR_CHAR_INSIDE=183, 
		DEFAULT=25, DELEGATE=26, DIRECTIVE_HIDDEN=202, OP_INC=154, JOIN=111, TEXT=205, 
		VLONG=24, WHEN=99, INTERFACE=47, SEMICOLON=137, BREAK=14, BYTE=15, ELSE=29, 
		EXTERN=33, IF=41, ENUM=30, DIRECTIVE_NEW_LINE=204, IN=44, DOT=134, IS=49, 
		OP_RIGHT_SHIFT=175, DIRECTIVE_WHITESPACES=190, CASE=16, OUT=61, REGION=199, 
		GET=39, PUBLIC=67, OP_AND=156, DELIMITED_COMMENT=5, VERBATIUM_INSIDE_STRING=187, 
		FORMAT_STRING=189, GOTO=40, CLOSE_BRACE_INSIDE=188, CHAR=18, BINARY_OPERATOR_LITERAL=121, 
		IMPORT=43, REAL_LITERAL=118, CATCH=17, REMOVE=71, DOUBLE=28, COMMA=135, 
		OPEN_BRACE_INSIDE=182, SELF=83, SBYTE=73, CLOSE_PARENS=133, RAISE=68, 
		SELECT=103, PRIVATE=65, NAMEOF=53, ASCENDING=104, SHARP=7, UINT=89, OP_OR=157, 
		ENDREGION=200, VOLATILE=98, NEW=55, REGULAR_STRING=124, OP_GE=162, OP_LEFT_ROTATE_ASSIGNMENT=174, 
		LT=149, FROM=108, EVENT=31, INLINE=45, TRY=87, OP_XOR_ASSIGNMENT=170, 
		UNARY_OPERATOR_LITERAL=122, EXPLICIT=32, OP_PARITY=179, NULL=56, AMP=143, 
		CHARACTER_LITERAL=123, DOUBLE_CURLY_INSIDE=181, TRUE=86, OBJECT=58, OP_EQ=159, 
		OP_LEFT_SHIFT=171, ARGLIST=10, SWITCH=82, PARAMS=63, VOID=97, STRUCT=81, 
		OP_AND_ASSIGNMENT=168, PLUS=138, FLOAT=36, OP_ADD_ASSIGNMENT=163, ABSTRACT=8, 
		INT=46, SINGLE_LINE_COMMENT=4, DOUBLE_QUOTE_INSIDE=185, LINE=196, BIN_INTEGER_LITERAL=120, 
		VERBATIUM_STRING=125, OP_MULT_ASSIGNMENT=165, ON=59, OP_COALESCING=153, 
		SUPER=12, COMPLEX=23, EQUALS=107, OP_DEC=155, OVERRIDE=62, DOUBLE_COLON=152, 
		ADRESSOF=78, WHILE=101, LET=112, TILDE=147, BYTE_ORDER_MARK=1, OP_SUB_ASSIGNMENT=164, 
		CARRET=207, RIGHT_ARROW=208, RESTRICT=209;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'\\u00EF\\u00BB\\u00BF'", "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
		"SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", "'#'", "'abstract'", 
		"'add'", "'__arglist'", "'as'", "'super'", "'bool'", "'break'", "'byte'", 
		"'case'", "'catch'", "'char'", "'checked'", "'class'", "'const'", "'continue'", 
		"'complex'", "'vlong'", "'default'", "'delegate'", "'do'", "'double'", 
		"'else'", "'enum'", "'event'", "'explicit'", "'extern'", "'false'", "'finally'", 
		"'float'", "'for'", "'foreach'", "'get'", "'goto'", "'if'", "'implicit'", 
		"'import'", "'in'", "'inline'", "'int'", "'interface'", "'friend'", "'is'", 
		"'interrupt'", "'sync'", "'long'", "'nameof'", "'package'", "'new'", "'null'", 
		"'mixin'", "'object'", "'on'", "'operator'", "'out'", "'override'", "'params'", 
		"'partial'", "'private'", "'protected'", "'public'", "'raise'", "'readonly'", 
		"'ref'", "'remove'", "'return'", "'sbyte'", "'sealed'", "'set'", "'short'", 
		"'sizeof'", "'adressof'", "'static'", "'string'", "'struct'", "'switch'", 
		"'self'", "'supersede'", "'throw'", "'true'", "'try'", "'typeof'", "'uint'", 
		"'ulong'", "'union'", "'unchecked'", "'unsafe'", "'ushort'", "'using'", 
		"'virtual'", "'void'", "'volatile'", "'when'", "'where'", "'while'", "'yield'", 
		"'select'", "'ascending'", "'by'", "'descending'", "'equals'", "'from'", 
		"'group'", "'into'", "'join'", "'let'", "'orderby'", "IDENTIFIER", "LITERAL_ACCESS", 
		"INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "REAL_LITERAL", "OCT_INTEGER_LITERAL", 
		"BIN_INTEGER_LITERAL", "BINARY_OPERATOR_LITERAL", "UNARY_OPERATOR_LITERAL", 
		"CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", 
		"INTERPOLATED_VERBATIUM_STRING_START", "'{'", "'}'", "'['", "']'", "'('", 
		"')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'::'", 
		"'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", "'<='", 
		"'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", 
		"'<<'", "'<~'", "'<<='", "'<~='", "'>>'", "'~>'", "'>>='", "'~>='", "'?~'", 
		"'?!'", "'{{'", "OPEN_BRACE_INSIDE", "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
		"DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", 
		"CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", "DIGITS", 
		"'define'", "'undef'", "'elif'", "'endif'", "'line'", "ERROR", "WARNING", 
		"REGION", "ENDREGION", "PRAGMA", "'hidden'", "CONDITIONAL_SYMBOL", "DIRECTIVE_NEW_LINE", 
		"TEXT", "'}}'", "CARRET", "RIGHT_ARROW", "RESTRICT"
	};
	public const int
		RULE_compilation_unit = 0, RULE_package_or_type_name = 1, RULE_simple_name = 2, 
		RULE_simple_name_access = 3, RULE_type = 4, RULE_type_specifier = 5, RULE_base_type = 6, 
		RULE_simple_type = 7, RULE_numeric_type = 8, RULE_integral_type = 9, RULE_floating_point_type = 10, 
		RULE_class_type = 11, RULE_type_argument_list = 12, RULE_argument_list = 13, 
		RULE_argument = 14, RULE_expression = 15, RULE_non_assignment_expression = 16, 
		RULE_assignment = 17, RULE_assignment_operator = 18, RULE_conditional_expression = 19, 
		RULE_null_coalescing_expression = 20, RULE_binary_operator_expression = 21, 
		RULE_conditional_or_expression = 22, RULE_conditional_and_expression = 23, 
		RULE_inclusive_or_expression = 24, RULE_exclusive_or_expression = 25, 
		RULE_and_expression = 26, RULE_equality_expression = 27, RULE_relational_expression = 28, 
		RULE_shift_expression = 29, RULE_additive_expression = 30, RULE_multiplicative_expression = 31, 
		RULE_unary_expression = 32, RULE_primary_expression = 33, RULE_element_access_expression = 34, 
		RULE_primary_expression_end = 35, RULE_primary_expression_start = 36, 
		RULE_member_access = 37, RULE_bracket_expression = 38, RULE_indexer_argument = 39, 
		RULE_predefined_type = 40, RULE_expression_list = 41, RULE_member_declarator = 42, 
		RULE_unbound_type_name = 43, RULE_generic_dimension_specifier = 44, RULE_lambda_expression = 45, 
		RULE_anonymous_function_signature = 46, RULE_explicit_anonymous_function_parameter_list = 47, 
		RULE_explicit_anonymous_function_parameter = 48, RULE_implicit_anonymous_function_parameter_list = 49, 
		RULE_anonymous_function_body = 50, RULE_query_expression = 51, RULE_from_clause = 52, 
		RULE_query_body = 53, RULE_query_body_clause = 54, RULE_let_clause = 55, 
		RULE_where_clause = 56, RULE_combined_join_clause = 57, RULE_orderby_clause = 58, 
		RULE_ordering = 59, RULE_select_or_group_clause = 60, RULE_group_clause = 61, 
		RULE_select_clause = 62, RULE_query_continuation = 63, RULE_statement = 64, 
		RULE_embedded_statement = 65, RULE_simple_embedded_statement = 66, RULE_block = 67, 
		RULE_local_variable_declaration = 68, RULE_local_variable_declarator = 69, 
		RULE_local_constant_declaration = 70, RULE_if_body = 71, RULE_switch_section = 72, 
		RULE_switch_label = 73, RULE_statement_list = 74, RULE_for_initializer = 75, 
		RULE_for_iterator = 76, RULE_catch_clauses = 77, RULE_specific_catch_clause = 78, 
		RULE_general_catch_clause = 79, RULE_exception_filter = 80, RULE_finally_clause = 81, 
		RULE_resource_acquisition = 82, RULE_package_declaration = 83, RULE_qualified_identifier = 84, 
		RULE_package_body = 85, RULE_import_directives = 86, RULE_import_directive = 87, 
		RULE_package_member_declarations = 88, RULE_package_member_declaration = 89, 
		RULE_default_member_declaration = 90, RULE_type_declaration = 91, RULE_qualified_alias_member = 92, 
		RULE_type_parameter_list = 93, RULE_type_parameter = 94, RULE_class_base = 95, 
		RULE_interface_type_list = 96, RULE_type_parameter_constraints_clauses = 97, 
		RULE_type_parameter_constraints_clause = 98, RULE_type_parameter_constraints = 99, 
		RULE_primary_constraint = 100, RULE_secondary_constraints = 101, RULE_class_body = 102, 
		RULE_class_member_declarations = 103, RULE_class_member_declaration = 104, 
		RULE_method_modifiers = 105, RULE_member_modifiers = 106, RULE_type_modifiers = 107, 
		RULE_type_modifier = 108, RULE_member_modifier = 109, RULE_method_modifier = 110, 
		RULE_common_member_declaration = 111, RULE_constant_declarators = 112, 
		RULE_constant_declarator = 113, RULE_variable_declarators = 114, RULE_variable_declarator = 115, 
		RULE_variable_initializer = 116, RULE_return_type = 117, RULE_member_name = 118, 
		RULE_method_body = 119, RULE_formal_parameter_list = 120, RULE_fixed_parameters = 121, 
		RULE_fixed_parameter = 122, RULE_parameter_modifier = 123, RULE_parameter_array = 124, 
		RULE_accessor_declarations = 125, RULE_get_accessor_declaration = 126, 
		RULE_set_accessor_declaration = 127, RULE_accessor_modifier = 128, RULE_accessor_body = 129, 
		RULE_event_accessor_declarations = 130, RULE_add_accessor_declaration = 131, 
		RULE_remove_accessor_declaration = 132, RULE_raise_accessor_declaration = 133, 
		RULE_overloadable_operator = 134, RULE_conversion_operator_declarator = 135, 
		RULE_constructor_initializer = 136, RULE_body = 137, RULE_struct_interfaces = 138, 
		RULE_struct_body = 139, RULE_array_type = 140, RULE_rank_specifier = 141, 
		RULE_array_initializer = 142, RULE_interface_base = 143, RULE_interface_body = 144, 
		RULE_interface_member_declaration = 145, RULE_interface_accessors = 146, 
		RULE_enum_base = 147, RULE_enum_body = 148, RULE_enum_member_declaration = 149, 
		RULE_global_attribute_section = 150, RULE_global_attribute_target = 151, 
		RULE_attributes = 152, RULE_attribute_section = 153, RULE_attribute_target = 154, 
		RULE_attribute_list = 155, RULE_attribute = 156, RULE_attribute_argument = 157, 
		RULE_pointer_type = 158, RULE_literal = 159, RULE_boolean_literal = 160, 
		RULE_string_literal = 161, RULE_interpolated_regular_string = 162, RULE_interpolated_verbatium_string = 163, 
		RULE_interpolated_regular_string_part = 164, RULE_interpolated_verbatium_string_part = 165, 
		RULE_interpolated_string_expression = 166, RULE_keyword = 167, RULE_class_definition = 168, 
		RULE_mixin_definition = 169, RULE_interrupt_definition = 170, RULE_struct_definition = 171, 
		RULE_union_definition = 172, RULE_interface_definition = 173, RULE_enum_definition = 174, 
		RULE_delegate_definition = 175, RULE_event_declaration = 176, RULE_field_declaration = 177, 
		RULE_property_declaration = 178, RULE_constant_declaration = 179, RULE_indexer_declaration = 180, 
		RULE_destructor_definition = 181, RULE_constructor_declaration = 182, 
		RULE_method_declaration = 183, RULE_operator_declaration = 184, RULE_arg_declaration = 185, 
		RULE_method_invocation = 186, RULE_object_creation_expression = 187, RULE_identifier = 188;
	public static readonly string[] ruleNames = {
		"compilation_unit", "package_or_type_name", "simple_name", "simple_name_access", 
		"type", "type_specifier", "base_type", "simple_type", "numeric_type", 
		"integral_type", "floating_point_type", "class_type", "type_argument_list", 
		"argument_list", "argument", "expression", "non_assignment_expression", 
		"assignment", "assignment_operator", "conditional_expression", "null_coalescing_expression", 
		"binary_operator_expression", "conditional_or_expression", "conditional_and_expression", 
		"inclusive_or_expression", "exclusive_or_expression", "and_expression", 
		"equality_expression", "relational_expression", "shift_expression", "additive_expression", 
		"multiplicative_expression", "unary_expression", "primary_expression", 
		"element_access_expression", "primary_expression_end", "primary_expression_start", 
		"member_access", "bracket_expression", "indexer_argument", "predefined_type", 
		"expression_list", "member_declarator", "unbound_type_name", "generic_dimension_specifier", 
		"lambda_expression", "anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
		"explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
		"anonymous_function_body", "query_expression", "from_clause", "query_body", 
		"query_body_clause", "let_clause", "where_clause", "combined_join_clause", 
		"orderby_clause", "ordering", "select_or_group_clause", "group_clause", 
		"select_clause", "query_continuation", "statement", "embedded_statement", 
		"simple_embedded_statement", "block", "local_variable_declaration", "local_variable_declarator", 
		"local_constant_declaration", "if_body", "switch_section", "switch_label", 
		"statement_list", "for_initializer", "for_iterator", "catch_clauses", 
		"specific_catch_clause", "general_catch_clause", "exception_filter", "finally_clause", 
		"resource_acquisition", "package_declaration", "qualified_identifier", 
		"package_body", "import_directives", "import_directive", "package_member_declarations", 
		"package_member_declaration", "default_member_declaration", "type_declaration", 
		"qualified_alias_member", "type_parameter_list", "type_parameter", "class_base", 
		"interface_type_list", "type_parameter_constraints_clauses", "type_parameter_constraints_clause", 
		"type_parameter_constraints", "primary_constraint", "secondary_constraints", 
		"class_body", "class_member_declarations", "class_member_declaration", 
		"method_modifiers", "member_modifiers", "type_modifiers", "type_modifier", 
		"member_modifier", "method_modifier", "common_member_declaration", "constant_declarators", 
		"constant_declarator", "variable_declarators", "variable_declarator", 
		"variable_initializer", "return_type", "member_name", "method_body", "formal_parameter_list", 
		"fixed_parameters", "fixed_parameter", "parameter_modifier", "parameter_array", 
		"accessor_declarations", "get_accessor_declaration", "set_accessor_declaration", 
		"accessor_modifier", "accessor_body", "event_accessor_declarations", "add_accessor_declaration", 
		"remove_accessor_declaration", "raise_accessor_declaration", "overloadable_operator", 
		"conversion_operator_declarator", "constructor_initializer", "body", "struct_interfaces", 
		"struct_body", "array_type", "rank_specifier", "array_initializer", "interface_base", 
		"interface_body", "interface_member_declaration", "interface_accessors", 
		"enum_base", "enum_body", "enum_member_declaration", "global_attribute_section", 
		"global_attribute_target", "attributes", "attribute_section", "attribute_target", 
		"attribute_list", "attribute", "attribute_argument", "pointer_type", "literal", 
		"boolean_literal", "string_literal", "interpolated_regular_string", "interpolated_verbatium_string", 
		"interpolated_regular_string_part", "interpolated_verbatium_string_part", 
		"interpolated_string_expression", "keyword", "class_definition", "mixin_definition", 
		"interrupt_definition", "struct_definition", "union_definition", "interface_definition", 
		"enum_definition", "delegate_definition", "event_declaration", "field_declaration", 
		"property_declaration", "constant_declaration", "indexer_declaration", 
		"destructor_definition", "constructor_declaration", "method_declaration", 
		"operator_declaration", "arg_declaration", "method_invocation", "object_creation_expression", 
		"identifier"
	};

	public override string GrammarFileName { get { return "RSharpParser.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RSharpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Compilation_unitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RSharpParser.Eof, 0); }
		public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		public ITerminalNode BYTE_ORDER_MARK() { return GetToken(RSharpParser.BYTE_ORDER_MARK, 0); }
		public Package_member_declarationsContext package_member_declarations() {
			return GetRuleContext<Package_member_declarationsContext>(0);
		}
		public Import_directivesContext import_directives() {
			return GetRuleContext<Import_directivesContext>(0);
		}
		public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			_la = _input.La(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 378; Match(BYTE_ORDER_MARK);
				}
			}

			State = 382;
			_la = _input.La(1);
			if (_la==IMPORT) {
				{
				State = 381; import_directives();
				}
			}

			State = 387;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 384; global_attribute_section();
					}
					} 
				}
				State = 389;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			State = 391;
			_la = _input.La(1);
			if (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (ABSTRACT - 8)) | (1L << (CLASS - 8)) | (1L << (DELEGATE - 8)) | (1L << (ENUM - 8)) | (1L << (INTERFACE - 8)) | (1L << (FRIEND - 8)) | (1L << (PACKAGE - 8)) | (1L << (PRIVATE - 8)) | (1L << (PROTECTED - 8)) | (1L << (PUBLIC - 8)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (SEALED - 74)) | (1L << (STATIC - 74)) | (1L << (STRUCT - 74)) | (1L << (UNION - 74)) | (1L << (OPEN_BRACKET - 74)))) != 0)) {
				{
				State = 390; package_member_declarations();
				}
			}

			State = 393; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_or_type_nameContext : ParserRuleContext {
		public Simple_name_accessContext[] simple_name_access() {
			return GetRuleContexts<Simple_name_accessContext>();
		}
		public ITerminalNode[] DOT() { return GetTokens(RSharpParser.DOT); }
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode DOT(int i) {
			return GetToken(RSharpParser.DOT, i);
		}
		public Simple_name_accessContext simple_name_access(int i) {
			return GetRuleContext<Simple_name_accessContext>(i);
		}
		public Package_or_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_or_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPackage_or_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPackage_or_type_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_or_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_or_type_nameContext package_or_type_name() {
		Package_or_type_nameContext _localctx = new Package_or_type_nameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_package_or_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 395; simple_name();
				}
				break;

			case 2:
				{
				State = 396; qualified_alias_member();
				}
				break;
			}
			State = 403;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 399; Match(DOT);
					State = 400; simple_name_access();
					}
					} 
				}
				State = 405;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; identifier();
			State = 408;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 407; type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_name_accessContext : ParserRuleContext {
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Simple_name_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSimple_name_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSimple_name_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_name_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_name_accessContext simple_name_access() {
		Simple_name_accessContext _localctx = new Simple_name_accessContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_simple_name_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; identifier();
			State = 412;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 411; type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Type_specifierContext[] type_specifier() {
			return GetRuleContexts<Type_specifierContext>();
		}
		public Type_specifierContext type_specifier(int i) {
			return GetRuleContext<Type_specifierContext>(i);
		}
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; base_type();
			State = 418;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 415; type_specifier();
					}
					} 
				}
				State = 420;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specifierContext : ParserRuleContext {
		public Rank_specifierContext rank_specifier() {
			return GetRuleContext<Rank_specifierContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(RSharpParser.INTERR, 0); }
		public ITerminalNode STAR() { return GetToken(RSharpParser.STAR, 0); }
		public Type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterType_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitType_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specifierContext type_specifier() {
		Type_specifierContext _localctx = new Type_specifierContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_type_specifier);
		try {
			State = 424;
			switch (_input.La(1)) {
			case INTERR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 421; Match(INTERR);
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422; rank_specifier();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 423; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(RSharpParser.VOID, 0); }
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_base_type);
		try {
			State = 430;
			switch (_input.La(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case COMPLEX:
			case VLONG:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; simple_type();
				}
				break;
			case ADD:
			case ARGLIST:
			case GET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case SET:
			case ADRESSOF:
			case STRING:
			case WHERE:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427; class_type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 428; Match(VOID);
				State = 429; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(RSharpParser.BOOL, 0); }
		public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_simple_type);
		try {
			State = 434;
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case COMPLEX:
			case VLONG:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432; numeric_type();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_numeric_type);
		try {
			State = 438;
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case VLONG:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 436; integral_type();
				}
				break;
			case COMPLEX:
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 437; floating_point_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		public ITerminalNode SHORT() { return GetToken(RSharpParser.SHORT, 0); }
		public ITerminalNode ULONG() { return GetToken(RSharpParser.ULONG, 0); }
		public ITerminalNode LONG() { return GetToken(RSharpParser.LONG, 0); }
		public ITerminalNode SBYTE() { return GetToken(RSharpParser.SBYTE, 0); }
		public ITerminalNode UINT() { return GetToken(RSharpParser.UINT, 0); }
		public ITerminalNode BYTE() { return GetToken(RSharpParser.BYTE, 0); }
		public ITerminalNode USHORT() { return GetToken(RSharpParser.USHORT, 0); }
		public ITerminalNode CHAR() { return GetToken(RSharpParser.CHAR, 0); }
		public ITerminalNode INT() { return GetToken(RSharpParser.INT, 0); }
		public ITerminalNode VLONG() { return GetToken(RSharpParser.VLONG, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << VLONG) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (SBYTE - 73)) | (1L << (SHORT - 73)) | (1L << (UINT - 73)) | (1L << (ULONG - 73)) | (1L << (USHORT - 73)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		public ITerminalNode DOUBLE() { return GetToken(RSharpParser.DOUBLE, 0); }
		public ITerminalNode COMPLEX() { return GetToken(RSharpParser.COMPLEX, 0); }
		public ITerminalNode FLOAT() { return GetToken(RSharpParser.FLOAT, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMPLEX) | (1L << DOUBLE) | (1L << FLOAT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public Package_or_type_nameContext package_or_type_name() {
			return GetRuleContext<Package_or_type_nameContext>(0);
		}
		public ITerminalNode OBJECT() { return GetToken(RSharpParser.OBJECT, 0); }
		public ITerminalNode STRING() { return GetToken(RSharpParser.STRING, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_class_type);
		try {
			State = 447;
			switch (_input.La(1)) {
			case ADD:
			case ARGLIST:
			case GET:
			case NAMEOF:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case SET:
			case ADRESSOF:
			case WHERE:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 444; package_or_type_name();
				}
				break;
			case OBJECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445; Match(OBJECT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 446; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ITerminalNode LT() { return GetToken(RSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(RSharpParser.GT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_type_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; Match(LT);
			State = 450; type();
			State = 455;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 451; Match(COMMA);
				State = 452; type();
				}
				}
				State = 457;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 458; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; argument();
			State = 465;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 461; Match(COMMA);
				State = 462; argument();
				}
				}
				State = 467;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public IToken refout;
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public ITerminalNode REF() { return GetToken(RSharpParser.REF, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(RSharpParser.OUT, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 468; identifier();
				State = 469; Match(COLON);
				}
				break;
			}
			State = 474;
			_la = _input.La(1);
			if (_la==OUT || _la==REF) {
				{
				State = 473;
				_localctx.refout = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==OUT || _la==REF) ) {
					_localctx.refout = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 476; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_expression);
		try {
			State = 480;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478; assignment();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479; non_assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_assignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_non_assignment_expression);
		try {
			State = 485;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482; lambda_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483; query_expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 484; conditional_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; unary_expression();
			State = 488; assignment_operator();
			State = 489; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public ITerminalNode OP_RIGHT_ROTATE_ASSIGNMENT() { return GetToken(RSharpParser.OP_RIGHT_ROTATE_ASSIGNMENT, 0); }
		public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(RSharpParser.OP_ADD_ASSIGNMENT, 0); }
		public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(RSharpParser.OP_MOD_ASSIGNMENT, 0); }
		public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(RSharpParser.OP_AND_ASSIGNMENT, 0); }
		public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(RSharpParser.OP_OR_ASSIGNMENT, 0); }
		public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(RSharpParser.OP_DIV_ASSIGNMENT, 0); }
		public ITerminalNode OP_RIGHT_SHIFT_ASSIGNMENT() { return GetToken(RSharpParser.OP_RIGHT_SHIFT_ASSIGNMENT, 0); }
		public ITerminalNode OP_XOR_ASSIGNMENT() { return GetToken(RSharpParser.OP_XOR_ASSIGNMENT, 0); }
		public ITerminalNode OP_LEFT_ROTATE_ASSIGNMENT() { return GetToken(RSharpParser.OP_LEFT_ROTATE_ASSIGNMENT, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(RSharpParser.ASSIGNMENT, 0); }
		public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(RSharpParser.OP_MULT_ASSIGNMENT, 0); }
		public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(RSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(RSharpParser.OP_SUB_ASSIGNMENT, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			_la = _input.La(1);
			if ( !(((((_la - 148)) & ~0x3f) == 0 && ((1L << (_la - 148)) & ((1L << (ASSIGNMENT - 148)) | (1L << (OP_ADD_ASSIGNMENT - 148)) | (1L << (OP_SUB_ASSIGNMENT - 148)) | (1L << (OP_MULT_ASSIGNMENT - 148)) | (1L << (OP_DIV_ASSIGNMENT - 148)) | (1L << (OP_MOD_ASSIGNMENT - 148)) | (1L << (OP_AND_ASSIGNMENT - 148)) | (1L << (OP_OR_ASSIGNMENT - 148)) | (1L << (OP_XOR_ASSIGNMENT - 148)) | (1L << (OP_LEFT_SHIFT_ASSIGNMENT - 148)) | (1L << (OP_LEFT_ROTATE_ASSIGNMENT - 148)) | (1L << (OP_RIGHT_SHIFT_ASSIGNMENT - 148)) | (1L << (OP_RIGHT_ROTATE_ASSIGNMENT - 148)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(RSharpParser.INTERR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_conditional_expression);
		try {
			State = 500;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493; null_coalescing_expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494; null_coalescing_expression(0);
				State = 495; Match(INTERR);
				State = 496; expression();
				State = 497; Match(COLON);
				State = 498; conditional_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		public Binary_operator_expressionContext binary_operator_expression() {
			return GetRuleContext<Binary_operator_expressionContext>(0);
		}
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public ITerminalNode OP_COALESCING() { return GetToken(RSharpParser.OP_COALESCING, 0); }
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_coalescing_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		return null_coalescing_expression(0);
	}

	private Null_coalescing_expressionContext null_coalescing_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(_ctx, _parentState);
		Null_coalescing_expressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_null_coalescing_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 503; binary_operator_expression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 510;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Null_coalescing_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_null_coalescing_expression);
					State = 505;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 506; Match(OP_COALESCING);
					State = 507; binary_operator_expression(0);
					}
					} 
				}
				State = 512;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Binary_operator_expressionContext : ParserRuleContext {
		public Binary_operator_expressionContext binary_operator_expression() {
			return GetRuleContext<Binary_operator_expressionContext>(0);
		}
		public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		public ITerminalNode BINARY_OPERATOR_LITERAL() { return GetToken(RSharpParser.BINARY_OPERATOR_LITERAL, 0); }
		public Binary_operator_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterBinary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitBinary_operator_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operator_expressionContext binary_operator_expression() {
		return binary_operator_expression(0);
	}

	private Binary_operator_expressionContext binary_operator_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Binary_operator_expressionContext _localctx = new Binary_operator_expressionContext(_ctx, _parentState);
		Binary_operator_expressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_binary_operator_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 514; conditional_or_expression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 521;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Binary_operator_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_binary_operator_expression);
					State = 516;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 517; Match(BINARY_OPERATOR_LITERAL);
					State = 518; conditional_or_expression(0);
					}
					} 
				}
				State = 523;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		public ITerminalNode OP_OR() { return GetToken(RSharpParser.OP_OR, 0); }
		public Conditional_and_expressionContext conditional_and_expression() {
			return GetRuleContext<Conditional_and_expressionContext>(0);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		return conditional_or_expression(0);
	}

	private Conditional_or_expressionContext conditional_or_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(_ctx, _parentState);
		Conditional_or_expressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_conditional_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 525; conditional_and_expression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 532;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Conditional_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditional_or_expression);
					State = 527;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 528; Match(OP_OR);
					State = 529; conditional_and_expression(0);
					}
					} 
				}
				State = 534;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		public ITerminalNode OP_AND() { return GetToken(RSharpParser.OP_AND, 0); }
		public Inclusive_or_expressionContext inclusive_or_expression() {
			return GetRuleContext<Inclusive_or_expressionContext>(0);
		}
		public Conditional_and_expressionContext conditional_and_expression() {
			return GetRuleContext<Conditional_and_expressionContext>(0);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		return conditional_and_expression(0);
	}

	private Conditional_and_expressionContext conditional_and_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(_ctx, _parentState);
		Conditional_and_expressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_conditional_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 536; inclusive_or_expression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 543;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Conditional_and_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditional_and_expression);
					State = 538;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 539; Match(OP_AND);
					State = 540; inclusive_or_expression(0);
					}
					} 
				}
				State = 545;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Exclusive_or_expressionContext exclusive_or_expression() {
			return GetRuleContext<Exclusive_or_expressionContext>(0);
		}
		public ITerminalNode BITWISE_OR() { return GetToken(RSharpParser.BITWISE_OR, 0); }
		public Inclusive_or_expressionContext inclusive_or_expression() {
			return GetRuleContext<Inclusive_or_expressionContext>(0);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		return inclusive_or_expression(0);
	}

	private Inclusive_or_expressionContext inclusive_or_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(_ctx, _parentState);
		Inclusive_or_expressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_inclusive_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 547; exclusive_or_expression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 554;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Inclusive_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusive_or_expression);
					State = 549;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 550; Match(BITWISE_OR);
					State = 551; exclusive_or_expression(0);
					}
					} 
				}
				State = 556;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public ITerminalNode CARRET() { return GetToken(RSharpParser.CARRET, 0); }
		public Exclusive_or_expressionContext exclusive_or_expression() {
			return GetRuleContext<Exclusive_or_expressionContext>(0);
		}
		public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		return exclusive_or_expression(0);
	}

	private Exclusive_or_expressionContext exclusive_or_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(_ctx, _parentState);
		Exclusive_or_expressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_exclusive_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 558; and_expression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 565;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Exclusive_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusive_or_expression);
					State = 560;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 561; Match(CARRET);
					State = 562; and_expression(0);
					}
					} 
				}
				State = 567;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public ITerminalNode AMP() { return GetToken(RSharpParser.AMP, 0); }
		public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		return and_expression(0);
	}

	private And_expressionContext and_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		And_expressionContext _localctx = new And_expressionContext(_ctx, _parentState);
		And_expressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 569; equality_expression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 576;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new And_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_and_expression);
					State = 571;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 572; Match(AMP);
					State = 573; equality_expression(0);
					}
					} 
				}
				State = 578;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		public ITerminalNode OP_EQ() { return GetToken(RSharpParser.OP_EQ, 0); }
		public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		public ITerminalNode OP_NE() { return GetToken(RSharpParser.OP_NE, 0); }
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		return equality_expression(0);
	}

	private Equality_expressionContext equality_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, _parentState);
		Equality_expressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_equality_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 580; relational_expression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 590;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 588;
					switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
					case 1:
						{
						_localctx = new Equality_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equality_expression);
						State = 582;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 583; Match(OP_NE);
						State = 584; relational_expression(0);
						}
						break;

					case 2:
						{
						_localctx = new Equality_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equality_expression);
						State = 585;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 586; Match(OP_EQ);
						State = 587; relational_expression(0);
						}
						break;
					}
					} 
				}
				State = 592;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
	 
		public Relational_expressionContext() { }
		public virtual void CopyFrom(Relational_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AsExpressionContext : Relational_expressionContext {
		public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(RSharpParser.AS, 0); }
		public AsExpressionContext(Relational_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsExpressionContext : Relational_expressionContext {
		public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(RSharpParser.IS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IsExpressionContext(Relational_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : Relational_expressionContext {
		public ITerminalNode OP_LE() { return GetToken(RSharpParser.OP_LE, 0); }
		public ITerminalNode OP_GE() { return GetToken(RSharpParser.OP_GE, 0); }
		public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		public ITerminalNode LT() { return GetToken(RSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(RSharpParser.GT, 0); }
		public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public RelationalExpressionContext(Relational_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalShiftExpressionContext : Relational_expressionContext {
		public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public RelationalShiftExpressionContext(Relational_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterRelationalShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitRelationalShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_relational_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RelationalShiftExpressionContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 594; shift_expression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 607;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 605;
					switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(new Relational_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
						State = 596;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 597;
						_la = _input.La(1);
						if ( !(((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & ((1L << (LT - 149)) | (1L << (GT - 149)) | (1L << (OP_LE - 149)) | (1L << (OP_GE - 149)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 598; shift_expression(0);
						}
						break;

					case 2:
						{
						_localctx = new IsExpressionContext(new Relational_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
						State = 599;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 600; Match(IS);
						State = 601; type();
						}
						break;

					case 3:
						{
						_localctx = new AsExpressionContext(new Relational_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
						State = 602;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 603; Match(AS);
						State = 604; type();
						}
						break;
					}
					} 
				}
				State = 609;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public ITerminalNode OP_RIGHT_ROTATE() { return GetToken(RSharpParser.OP_RIGHT_ROTATE, 0); }
		public ITerminalNode OP_RIGHT_SHIFT() { return GetToken(RSharpParser.OP_RIGHT_SHIFT, 0); }
		public ITerminalNode OP_LEFT_ROTATE() { return GetToken(RSharpParser.OP_LEFT_ROTATE, 0); }
		public ITerminalNode OP_LEFT_SHIFT() { return GetToken(RSharpParser.OP_LEFT_SHIFT, 0); }
		public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		return shift_expression(0);
	}

	private Shift_expressionContext shift_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Shift_expressionContext _localctx = new Shift_expressionContext(_ctx, _parentState);
		Shift_expressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_shift_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 611; additive_expression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 618;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Shift_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_shift_expression);
					State = 613;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 614;
					_la = _input.La(1);
					if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (OP_LEFT_SHIFT - 171)) | (1L << (OP_LEFT_ROTATE - 171)) | (1L << (OP_RIGHT_SHIFT - 171)) | (1L << (OP_RIGHT_ROTATE - 171)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 615; additive_expression(0);
					}
					} 
				}
				State = 620;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(RSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(RSharpParser.MINUS, 0); }
		public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		return additive_expression(0);
	}

	private Additive_expressionContext additive_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, _parentState);
		Additive_expressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_additive_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 622; multiplicative_expression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 629;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Additive_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_additive_expression);
					State = 624;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 625;
					_la = _input.La(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 626; multiplicative_expression(0);
					}
					} 
				}
				State = 631;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(RSharpParser.STAR, 0); }
		public ITerminalNode PERCENT() { return GetToken(RSharpParser.PERCENT, 0); }
		public ITerminalNode DIV() { return GetToken(RSharpParser.DIV, 0); }
		public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		return multiplicative_expression(0);
	}

	private Multiplicative_expressionContext multiplicative_expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(_ctx, _parentState);
		Multiplicative_expressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_multiplicative_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 633; unary_expression();
			}
			_ctx.stop = _input.Lt(-1);
			State = 640;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Multiplicative_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_expression);
					State = 635;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 636;
					_la = _input.La(1);
					if ( !(((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (STAR - 140)) | (1L << (DIV - 140)) | (1L << (PERCENT - 140)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 637; unary_expression();
					}
					} 
				}
				State = 642;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public ITerminalNode AMP() { return GetToken(RSharpParser.AMP, 0); }
		public ITerminalNode OP_PARITY() { return GetToken(RSharpParser.OP_PARITY, 0); }
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode STAR() { return GetToken(RSharpParser.STAR, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode OP_ZERO() { return GetToken(RSharpParser.OP_ZERO, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode PLUS() { return GetToken(RSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(RSharpParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(RSharpParser.TILDE, 0); }
		public ITerminalNode OP_DEC() { return GetToken(RSharpParser.OP_DEC, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode UNARY_OPERATOR_LITERAL() { return GetToken(RSharpParser.UNARY_OPERATOR_LITERAL, 0); }
		public ITerminalNode OP_INC() { return GetToken(RSharpParser.OP_INC, 0); }
		public ITerminalNode BANG() { return GetToken(RSharpParser.BANG, 0); }
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_unary_expression);
		try {
			State = 671;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 643; primary_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 644; Match(PLUS);
				State = 645; unary_expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 646; Match(MINUS);
				State = 647; unary_expression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 648; Match(BANG);
				State = 649; unary_expression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 650; Match(TILDE);
				State = 651; unary_expression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 652; Match(OP_INC);
				State = 653; unary_expression();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 654; Match(OP_DEC);
				State = 655; unary_expression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 656; Match(OP_ZERO);
				State = 657; unary_expression();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 658; Match(OP_PARITY);
				State = 659; unary_expression();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 660; Match(OPEN_PARENS);
				State = 661; type();
				State = 662; Match(CLOSE_PARENS);
				State = 663; unary_expression();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 665; Match(AMP);
				State = 666; unary_expression();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 667; Match(STAR);
				State = 668; unary_expression();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 669; Match(UNARY_OPERATOR_LITERAL);
				State = 670; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expression_endContext[] primary_expression_end() {
			return GetRuleContexts<Primary_expression_endContext>();
		}
		public Primary_expression_endContext primary_expression_end(int i) {
			return GetRuleContext<Primary_expression_endContext>(i);
		}
		public Element_access_expressionContext element_access_expression() {
			return GetRuleContext<Element_access_expressionContext>(0);
		}
		public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_primary_expression);
		try {
			int _alt;
			State = 687;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 673; element_access_expression();
				State = 677;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 674; primary_expression_end();
						}
						} 
					}
					State = 679;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 680; primary_expression_start();
				State = 684;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 681; primary_expression_end();
						}
						} 
					}
					State = 686;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_access_expressionContext : ParserRuleContext {
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		public Element_access_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_access_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterElement_access_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitElement_access_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_access_expressionContext element_access_expression() {
		Element_access_expressionContext _localctx = new Element_access_expressionContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_element_access_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 689; primary_expression_start();
			State = 691;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 690; bracket_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 693;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_endContext : ParserRuleContext {
		public Primary_expression_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_end; } }
	 
		public Primary_expression_endContext() { }
		public virtual void CopyFrom(Primary_expression_endContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PointerMemberAccessExpressionContext : Primary_expression_endContext {
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public ITerminalNode OP_PTR() { return GetToken(RSharpParser.OP_PTR, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public PointerMemberAccessExpressionContext(Primary_expression_endContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvocationExpressionContext : Primary_expression_endContext {
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Method_invocationContext method_invocation() {
			return GetRuleContext<Method_invocationContext>(0);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public InvocationExpressionContext(Primary_expression_endContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInvocationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInvocationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : Primary_expression_endContext {
		public Member_accessContext member_access() {
			return GetRuleContext<Member_accessContext>(0);
		}
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public MemberAccessExpressionContext(Primary_expression_endContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : Primary_expression_endContext {
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public ITerminalNode OP_INC() { return GetToken(RSharpParser.OP_INC, 0); }
		public PostIncrementExpressionContext(Primary_expression_endContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecrementExpressionContext : Primary_expression_endContext {
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public ITerminalNode OP_DEC() { return GetToken(RSharpParser.OP_DEC, 0); }
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public PostDecrementExpressionContext(Primary_expression_endContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_endContext primary_expression_end() {
		Primary_expression_endContext _localctx = new Primary_expression_endContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_primary_expression_end);
		try {
			int _alt;
			State = 734;
			switch (_input.La(1)) {
			case DOT:
			case INTERR:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 695; member_access();
				State = 699;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 696; bracket_expression();
						}
						} 
					}
					State = 701;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
				}
				}
				break;
			case OPEN_PARENS:
				_localctx = new InvocationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 702; method_invocation();
				State = 706;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 703; bracket_expression();
						}
						} 
					}
					State = 708;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
				}
				}
				break;
			case OP_INC:
				_localctx = new PostIncrementExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 709; Match(OP_INC);
				State = 713;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 710; bracket_expression();
						}
						} 
					}
					State = 715;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
				}
				}
				break;
			case OP_DEC:
				_localctx = new PostDecrementExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 716; Match(OP_DEC);
				State = 720;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 717; bracket_expression();
						}
						} 
					}
					State = 722;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
				}
				}
				break;
			case OP_PTR:
				_localctx = new PointerMemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 723; Match(OP_PTR);
				State = 724; identifier();
				State = 726;
				switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					State = 725; type_argument_list();
					}
					break;
				}
				State = 731;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,45,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 728; bracket_expression();
						}
						} 
					}
					State = 733;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,45,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_startContext : ParserRuleContext {
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_start; } }
	 
		public Primary_expression_startContext() { }
		public virtual void CopyFrom(Primary_expression_startContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralAccessExpressionContext : Primary_expression_startContext {
		public ITerminalNode LITERAL_ACCESS() { return GetToken(RSharpParser.LITERAL_ACCESS, 0); }
		public LiteralAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteralAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteralAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousTypeExpressionContext : Primary_expression_startContext {
		public Member_declaratorContext[] member_declarator() {
			return GetRuleContexts<Member_declaratorContext>();
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode NEW() { return GetToken(RSharpParser.NEW, 0); }
		public Member_declaratorContext member_declarator(int i) {
			return GetRuleContext<Member_declaratorContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public AnonymousTypeExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymousTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymousTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultValueExpressionContext : Primary_expression_startContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(RSharpParser.DEFAULT, 0); }
		public DefaultValueExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuperAccessExpressionContext : Primary_expression_startContext {
		public ITerminalNode SUPER() { return GetToken(RSharpParser.SUPER, 0); }
		public ITerminalNode DOT() { return GetToken(RSharpParser.DOT, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(RSharpParser.OPEN_BRACKET, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(RSharpParser.CLOSE_BRACKET, 0); }
		public SuperAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSuperAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSuperAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SizeofExpressionContext : Primary_expression_startContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode SIZEOF() { return GetToken(RSharpParser.SIZEOF, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public SizeofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSizeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSizeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionsContext : Primary_expression_startContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisExpressionsContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfReferenceExpressionContext : Primary_expression_startContext {
		public ITerminalNode SELF() { return GetToken(RSharpParser.SELF, 0); }
		public SelfReferenceExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSelfReferenceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSelfReferenceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousMethodExpressionContext : Primary_expression_startContext {
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode DELEGATE() { return GetToken(RSharpParser.DELEGATE, 0); }
		public AnonymousMethodExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousMethodExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdressofExpressionContext : Primary_expression_startContext {
		public ITerminalNode ADRESSOF() { return GetToken(RSharpParser.ADRESSOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AdressofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAdressofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAdressofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdressofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessStartExpressionContext : Primary_expression_startContext {
		public Predefined_typeContext predefined_type() {
			return GetRuleContext<Predefined_typeContext>(0);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public MemberAccessStartExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessStartExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessStartExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessStartExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectOrDelegateCreationExpressionContext : Primary_expression_startContext {
		public Object_creation_expressionContext object_creation_expression() {
			return GetRuleContext<Object_creation_expressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(RSharpParser.NEW, 0); }
		public ObjectOrDelegateCreationExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterObjectOrDelegateCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitObjectOrDelegateCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectOrDelegateCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExpressionContext : Primary_expression_startContext {
		public ITerminalNode VOID() { return GetToken(RSharpParser.VOID, 0); }
		public ITerminalNode TYPEOF() { return GetToken(RSharpParser.TYPEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public Unbound_type_nameContext unbound_type_name() {
			return GetRuleContext<Unbound_type_nameContext>(0);
		}
		public TypeofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UncheckedExpressionContext : Primary_expression_startContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(RSharpParser.UNCHECKED, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UncheckedExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterUncheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitUncheckedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUncheckedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExpressionContext : Primary_expression_startContext {
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public SimpleNameExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayCreationExpressionContext : Primary_expression_startContext {
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(RSharpParser.OPEN_BRACKET, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(RSharpParser.NEW, 0); }
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(RSharpParser.CLOSE_BRACKET, 0); }
		public ArrayCreationExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckedExpressionContext : Primary_expression_startContext {
		public ITerminalNode CHECKED() { return GetToken(RSharpParser.CHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CheckedExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : Primary_expression_startContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameofExpressionContext : Primary_expression_startContext {
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode NAMEOF() { return GetToken(RSharpParser.NAMEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public NameofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterNameofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitNameofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_startContext primary_expression_start() {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_primary_expression_start);
		int _la;
		try {
			int _alt;
			State = 861;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 736; literal();
				}
				break;

			case 2:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 737; simple_name();
				}
				break;

			case 3:
				_localctx = new ParenthesisExpressionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 738; Match(OPEN_PARENS);
				State = 739; expression();
				State = 740; Match(CLOSE_PARENS);
				}
				break;

			case 4:
				_localctx = new MemberAccessStartExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 742; predefined_type();
				}
				break;

			case 5:
				_localctx = new MemberAccessStartExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 743; qualified_alias_member();
				}
				break;

			case 6:
				_localctx = new LiteralAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 744; Match(LITERAL_ACCESS);
				}
				break;

			case 7:
				_localctx = new SelfReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 745; Match(SELF);
				}
				break;

			case 8:
				_localctx = new SuperAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 746; Match(SUPER);
				State = 756;
				switch (_input.La(1)) {
				case DOT:
					{
					State = 747; Match(DOT);
					State = 748; identifier();
					State = 750;
					switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
					case 1:
						{
						State = 749; type_argument_list();
						}
						break;
					}
					}
					break;
				case OPEN_BRACKET:
					{
					State = 752; Match(OPEN_BRACKET);
					State = 753; expression_list();
					State = 754; Match(CLOSE_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 9:
				_localctx = new ObjectOrDelegateCreationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 758; Match(NEW);
				State = 759; type();
				State = 760; object_creation_expression();
				}
				break;

			case 10:
				_localctx = new AnonymousTypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 762; Match(NEW);
				State = 763; Match(OPEN_BRACE);
				State = 775;
				_la = _input.La(1);
				if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & ((1L << (ADD - 9)) | (1L << (ARGLIST - 9)) | (1L << (SUPER - 9)) | (1L << (BOOL - 9)) | (1L << (BYTE - 9)) | (1L << (CHAR - 9)) | (1L << (CHECKED - 9)) | (1L << (VLONG - 9)) | (1L << (DEFAULT - 9)) | (1L << (DELEGATE - 9)) | (1L << (DOUBLE - 9)) | (1L << (FALSE - 9)) | (1L << (FLOAT - 9)) | (1L << (GET - 9)) | (1L << (INT - 9)) | (1L << (LONG - 9)) | (1L << (NAMEOF - 9)) | (1L << (NEW - 9)) | (1L << (NULL - 9)) | (1L << (OBJECT - 9)) | (1L << (ON - 9)) | (1L << (PARTIAL - 9)) | (1L << (RAISE - 9)) | (1L << (REMOVE - 9)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (SBYTE - 73)) | (1L << (SET - 73)) | (1L << (SHORT - 73)) | (1L << (SIZEOF - 73)) | (1L << (ADRESSOF - 73)) | (1L << (STRING - 73)) | (1L << (SELF - 73)) | (1L << (TRUE - 73)) | (1L << (TYPEOF - 73)) | (1L << (UINT - 73)) | (1L << (ULONG - 73)) | (1L << (UNCHECKED - 73)) | (1L << (USHORT - 73)) | (1L << (WHERE - 73)) | (1L << (SELECT - 73)) | (1L << (ASCENDING - 73)) | (1L << (BY - 73)) | (1L << (DESCENDING - 73)) | (1L << (EQUALS - 73)) | (1L << (FROM - 73)) | (1L << (GROUP - 73)) | (1L << (INTO - 73)) | (1L << (JOIN - 73)) | (1L << (LET - 73)) | (1L << (ORDERBY - 73)) | (1L << (IDENTIFIER - 73)) | (1L << (LITERAL_ACCESS - 73)) | (1L << (INTEGER_LITERAL - 73)) | (1L << (HEX_INTEGER_LITERAL - 73)) | (1L << (REAL_LITERAL - 73)) | (1L << (OCT_INTEGER_LITERAL - 73)) | (1L << (BIN_INTEGER_LITERAL - 73)) | (1L << (CHARACTER_LITERAL - 73)) | (1L << (REGULAR_STRING - 73)) | (1L << (VERBATIUM_STRING - 73)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 73)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 73)) | (1L << (OPEN_PARENS - 73)))) != 0)) {
					{
					State = 764; member_declarator();
					State = 769;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,49,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 765; Match(COMMA);
							State = 766; member_declarator();
							}
							} 
						}
						State = 771;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,49,_ctx);
					}
					State = 773;
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 772; Match(COMMA);
						}
					}

					}
				}

				State = 777; Match(CLOSE_BRACE);
				}
				break;

			case 11:
				_localctx = new ArrayCreationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 778; Match(NEW);
				State = 804;
				switch (_input.La(1)) {
				case ADD:
				case ARGLIST:
				case BOOL:
				case BYTE:
				case CHAR:
				case COMPLEX:
				case VLONG:
				case DOUBLE:
				case FLOAT:
				case GET:
				case INT:
				case LONG:
				case NAMEOF:
				case OBJECT:
				case ON:
				case PARTIAL:
				case RAISE:
				case REMOVE:
				case SBYTE:
				case SET:
				case SHORT:
				case ADRESSOF:
				case STRING:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHERE:
				case SELECT:
				case ASCENDING:
				case BY:
				case DESCENDING:
				case EQUALS:
				case FROM:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case ORDERBY:
				case IDENTIFIER:
					{
					State = 779; type();
					State = 799;
					switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
					case 1:
						{
						State = 780; Match(OPEN_BRACKET);
						State = 781; expression_list();
						State = 782; Match(CLOSE_BRACKET);
						State = 786;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 783; rank_specifier();
								}
								} 
							}
							State = 788;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
						}
						State = 790;
						switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
						case 1:
							{
							State = 789; array_initializer();
							}
							break;
						}
						}
						break;

					case 2:
						{
						State = 793;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 792; rank_specifier();
							}
							}
							State = 795;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==OPEN_BRACKET );
						State = 797; array_initializer();
						}
						break;
					}
					}
					break;
				case OPEN_BRACKET:
					{
					State = 801; rank_specifier();
					State = 802; array_initializer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 12:
				_localctx = new TypeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 806; Match(TYPEOF);
				State = 807; Match(OPEN_PARENS);
				State = 811;
				switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					State = 808; unbound_type_name();
					}
					break;

				case 2:
					{
					State = 809; type();
					}
					break;

				case 3:
					{
					State = 810; Match(VOID);
					}
					break;
				}
				State = 813; Match(CLOSE_PARENS);
				}
				break;

			case 13:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 814; Match(CHECKED);
				State = 815; Match(OPEN_PARENS);
				State = 816; expression();
				State = 817; Match(CLOSE_PARENS);
				}
				break;

			case 14:
				_localctx = new UncheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 819; Match(UNCHECKED);
				State = 820; Match(OPEN_PARENS);
				State = 821; expression();
				State = 822; Match(CLOSE_PARENS);
				}
				break;

			case 15:
				_localctx = new DefaultValueExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 824; Match(DEFAULT);
				State = 825; Match(OPEN_PARENS);
				State = 826; type();
				State = 827; Match(CLOSE_PARENS);
				}
				break;

			case 16:
				_localctx = new AnonymousMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 829; Match(DELEGATE);
				State = 835;
				_la = _input.La(1);
				if (_la==OPEN_PARENS) {
					{
					State = 830; Match(OPEN_PARENS);
					State = 832;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << COMPLEX) | (1L << VLONG) | (1L << DOUBLE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << OBJECT) | (1L << ON) | (1L << OUT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (USHORT - 64)) | (1L << (VOID - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
						{
						State = 831; explicit_anonymous_function_parameter_list();
						}
					}

					State = 834; Match(CLOSE_PARENS);
					}
				}

				State = 837; block();
				}
				break;

			case 17:
				_localctx = new SizeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 838; Match(SIZEOF);
				State = 839; Match(OPEN_PARENS);
				State = 840; type();
				State = 841; Match(CLOSE_PARENS);
				}
				break;

			case 18:
				_localctx = new AdressofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 843; Match(ADRESSOF);
				State = 844; Match(OPEN_PARENS);
				State = 845; expression();
				State = 846; Match(CLOSE_PARENS);
				}
				break;

			case 19:
				_localctx = new NameofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 848; Match(NAMEOF);
				State = 849; Match(OPEN_PARENS);
				State = 855;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 850; identifier();
						State = 851; Match(DOT);
						}
						} 
					}
					State = 857;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
				}
				State = 858; identifier();
				State = 859; Match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(RSharpParser.DOT, 0); }
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(RSharpParser.INTERR, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_member_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864;
			_la = _input.La(1);
			if (_la==INTERR) {
				{
				State = 863; Match(INTERR);
				}
			}

			State = 866; Match(DOT);
			State = 867; identifier();
			State = 869;
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				State = 868; type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(RSharpParser.OPEN_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public Indexer_argumentContext indexer_argument(int i) {
			return GetRuleContext<Indexer_argumentContext>(i);
		}
		public ITerminalNode INTERR() { return GetToken(RSharpParser.INTERR, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Indexer_argumentContext[] indexer_argument() {
			return GetRuleContexts<Indexer_argumentContext>();
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(RSharpParser.CLOSE_BRACKET, 0); }
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_bracket_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			_la = _input.La(1);
			if (_la==INTERR) {
				{
				State = 871; Match(INTERR);
				}
			}

			State = 874; Match(OPEN_BRACKET);
			State = 875; indexer_argument();
			State = 880;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 876; Match(COMMA);
				State = 877; indexer_argument();
				}
				}
				State = 882;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 883; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_argumentContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Indexer_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterIndexer_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitIndexer_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_argumentContext indexer_argument() {
		Indexer_argumentContext _localctx = new Indexer_argumentContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_indexer_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				State = 885; identifier();
				State = 886; Match(COLON);
				}
				break;
			}
			State = 890; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_typeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(RSharpParser.BOOL, 0); }
		public ITerminalNode ULONG() { return GetToken(RSharpParser.ULONG, 0); }
		public ITerminalNode OBJECT() { return GetToken(RSharpParser.OBJECT, 0); }
		public ITerminalNode BYTE() { return GetToken(RSharpParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(RSharpParser.STRING, 0); }
		public ITerminalNode USHORT() { return GetToken(RSharpParser.USHORT, 0); }
		public ITerminalNode INT() { return GetToken(RSharpParser.INT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(RSharpParser.DOUBLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(RSharpParser.FLOAT, 0); }
		public ITerminalNode VLONG() { return GetToken(RSharpParser.VLONG, 0); }
		public ITerminalNode SHORT() { return GetToken(RSharpParser.SHORT, 0); }
		public ITerminalNode LONG() { return GetToken(RSharpParser.LONG, 0); }
		public ITerminalNode SBYTE() { return GetToken(RSharpParser.SBYTE, 0); }
		public ITerminalNode UINT() { return GetToken(RSharpParser.UINT, 0); }
		public ITerminalNode CHAR() { return GetToken(RSharpParser.CHAR, 0); }
		public Predefined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPredefined_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPredefined_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefined_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_typeContext predefined_type() {
		Predefined_typeContext _localctx = new Predefined_typeContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_predefined_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << VLONG) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << OBJECT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (SBYTE - 73)) | (1L << (SHORT - 73)) | (1L << (STRING - 73)) | (1L << (UINT - 73)) | (1L << (ULONG - 73)) | (1L << (USHORT - 73)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894; expression();
			State = 899;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 895; Match(COMMA);
				State = 896; expression();
				}
				}
				State = 901;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declaratorContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(RSharpParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declaratorContext member_declarator() {
		Member_declaratorContext _localctx = new Member_declaratorContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_member_declarator);
		try {
			State = 907;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 902; primary_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 903; identifier();
				State = 904; Match(ASSIGNMENT);
				State = 905; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unbound_type_nameContext : ParserRuleContext {
		public Generic_dimension_specifierContext generic_dimension_specifier(int i) {
			return GetRuleContext<Generic_dimension_specifierContext>(i);
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Generic_dimension_specifierContext[] generic_dimension_specifier() {
			return GetRuleContexts<Generic_dimension_specifierContext>();
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public Unbound_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unbound_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterUnbound_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitUnbound_type_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnbound_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unbound_type_nameContext unbound_type_name() {
		Unbound_type_nameContext _localctx = new Unbound_type_nameContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_unbound_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909; identifier();
			State = 918;
			switch (_input.La(1)) {
			case CLOSE_PARENS:
			case DOT:
			case LT:
				{
				State = 911;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 910; generic_dimension_specifier();
					}
				}

				}
				break;
			case DOUBLE_COLON:
				{
				State = 913; Match(DOUBLE_COLON);
				State = 914; identifier();
				State = 916;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 915; generic_dimension_specifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 927;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 920; Match(DOT);
				State = 921; identifier();
				State = 923;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 922; generic_dimension_specifier();
					}
				}

				}
				}
				State = 929;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_dimension_specifierContext : ParserRuleContext {
		public Generic_dimension_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_dimension_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterGeneric_dimension_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitGeneric_dimension_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_dimension_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_dimension_specifierContext generic_dimension_specifier() {
		Generic_dimension_specifierContext _localctx = new Generic_dimension_specifierContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_generic_dimension_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930; Match(LT);
			State = 934;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 931; Match(COMMA);
				}
				}
				State = 936;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 937; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		public Anonymous_function_signatureContext anonymous_function_signature() {
			return GetRuleContext<Anonymous_function_signatureContext>(0);
		}
		public Anonymous_function_bodyContext anonymous_function_body() {
			return GetRuleContext<Anonymous_function_bodyContext>(0);
		}
		public ITerminalNode RIGHT_ARROW() { return GetToken(RSharpParser.RIGHT_ARROW, 0); }
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939; anonymous_function_signature();
			State = 940; Match(RIGHT_ARROW);
			State = 941; anonymous_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_signatureContext : ParserRuleContext {
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_signatureContext anonymous_function_signature() {
		Anonymous_function_signatureContext _localctx = new Anonymous_function_signatureContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_anonymous_function_signature);
		try {
			State = 954;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 943; Match(OPEN_PARENS);
				State = 944; Match(CLOSE_PARENS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 945; Match(OPEN_PARENS);
				State = 946; explicit_anonymous_function_parameter_list();
				State = 947; Match(CLOSE_PARENS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 949; Match(OPEN_PARENS);
				State = 950; implicit_anonymous_function_parameter_list();
				State = 951; Match(CLOSE_PARENS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 953; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Explicit_anonymous_function_parameterContext>(i);
		}
		public Explicit_anonymous_function_parameterContext[] explicit_anonymous_function_parameter() {
			return GetRuleContexts<Explicit_anonymous_function_parameterContext>();
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Explicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
		Explicit_anonymous_function_parameter_listContext _localctx = new Explicit_anonymous_function_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_explicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956; explicit_anonymous_function_parameter();
			State = 961;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 957; Match(COMMA);
				State = 958; explicit_anonymous_function_parameter();
				}
				}
				State = 963;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameterContext : ParserRuleContext {
		public IToken refout;
		public ITerminalNode REF() { return GetToken(RSharpParser.REF, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(RSharpParser.OUT, 0); }
		public Explicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter() {
		Explicit_anonymous_function_parameterContext _localctx = new Explicit_anonymous_function_parameterContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_explicit_anonymous_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			_la = _input.La(1);
			if (_la==OUT || _la==REF) {
				{
				State = 964;
				_localctx.refout = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==OUT || _la==REF) ) {
					_localctx.refout = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 967; type();
			State = 968; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Implicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
		Implicit_anonymous_function_parameter_listContext _localctx = new Implicit_anonymous_function_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_implicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970; identifier();
			State = 975;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 971; Match(COMMA);
				State = 972; identifier();
				}
				}
				State = 977;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_bodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Anonymous_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_bodyContext anonymous_function_body() {
		Anonymous_function_bodyContext _localctx = new Anonymous_function_bodyContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_anonymous_function_body);
		try {
			State = 980;
			switch (_input.La(1)) {
			case ADD:
			case ARGLIST:
			case SUPER:
			case BOOL:
			case BYTE:
			case CHAR:
			case CHECKED:
			case VLONG:
			case DEFAULT:
			case DELEGATE:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case GET:
			case INT:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case SBYTE:
			case SET:
			case SHORT:
			case SIZEOF:
			case ADRESSOF:
			case STRING:
			case SELF:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case OCT_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case UNARY_OPERATOR_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_PARITY:
			case OP_ZERO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 978; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 979; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_query_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982; from_clause();
			State = 983; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(RSharpParser.FROM, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IN() { return GetToken(RSharpParser.IN, 0); }
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985; Match(FROM);
			State = 987;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 986; type();
				}
				break;
			}
			State = 989; identifier();
			State = 990; Match(IN);
			State = 991; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_bodyContext : ParserRuleContext {
		public Select_or_group_clauseContext select_or_group_clause() {
			return GetRuleContext<Select_or_group_clauseContext>(0);
		}
		public Query_continuationContext query_continuation() {
			return GetRuleContext<Query_continuationContext>(0);
		}
		public Query_body_clauseContext[] query_body_clause() {
			return GetRuleContexts<Query_body_clauseContext>();
		}
		public Query_body_clauseContext query_body_clause(int i) {
			return GetRuleContext<Query_body_clauseContext>(i);
		}
		public Query_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_bodyContext query_body() {
		Query_bodyContext _localctx = new Query_bodyContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_query_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (WHERE - 100)) | (1L << (FROM - 100)) | (1L << (JOIN - 100)) | (1L << (LET - 100)) | (1L << (ORDERBY - 100)))) != 0)) {
				{
				{
				State = 993; query_body_clause();
				}
				}
				State = 998;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 999; select_or_group_clause();
			State = 1001;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 1000; query_continuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_body_clauseContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Orderby_clauseContext orderby_clause() {
			return GetRuleContext<Orderby_clauseContext>(0);
		}
		public Combined_join_clauseContext combined_join_clause() {
			return GetRuleContext<Combined_join_clauseContext>(0);
		}
		public Let_clauseContext let_clause() {
			return GetRuleContext<Let_clauseContext>(0);
		}
		public Query_body_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_body_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_body_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_body_clauseContext query_body_clause() {
		Query_body_clauseContext _localctx = new Query_body_clauseContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_query_body_clause);
		try {
			State = 1008;
			switch (_input.La(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1003; from_clause();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1004; let_clause();
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1005; where_clause();
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1006; combined_join_clause();
				}
				break;
			case ORDERBY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1007; orderby_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_clauseContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(RSharpParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LET() { return GetToken(RSharpParser.LET, 0); }
		public Let_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterLet_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitLet_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_clauseContext let_clause() {
		Let_clauseContext _localctx = new Let_clauseContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_let_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010; Match(LET);
			State = 1011; identifier();
			State = 1012; Match(ASSIGNMENT);
			State = 1013; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(RSharpParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1015; Match(WHERE);
			State = 1016; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Combined_join_clauseContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(RSharpParser.EQUALS, 0); }
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode ON() { return GetToken(RSharpParser.ON, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode JOIN() { return GetToken(RSharpParser.JOIN, 0); }
		public ITerminalNode IN() { return GetToken(RSharpParser.IN, 0); }
		public ITerminalNode INTO() { return GetToken(RSharpParser.INTO, 0); }
		public Combined_join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combined_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterCombined_join_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitCombined_join_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombined_join_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Combined_join_clauseContext combined_join_clause() {
		Combined_join_clauseContext _localctx = new Combined_join_clauseContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_combined_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018; Match(JOIN);
			State = 1020;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 1019; type();
				}
				break;
			}
			State = 1022; identifier();
			State = 1023; Match(IN);
			State = 1024; expression();
			State = 1025; Match(ON);
			State = 1026; expression();
			State = 1027; Match(EQUALS);
			State = 1028; expression();
			State = 1031;
			_la = _input.La(1);
			if (_la==INTO) {
				{
				State = 1029; Match(INTO);
				State = 1030; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_clauseContext : ParserRuleContext {
		public ITerminalNode ORDERBY() { return GetToken(RSharpParser.ORDERBY, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterOrderby_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitOrderby_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_clauseContext orderby_clause() {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_orderby_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033; Match(ORDERBY);
			State = 1034; ordering();
			State = 1039;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1035; Match(COMMA);
				State = 1036; ordering();
				}
				}
				State = 1041;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : ParserRuleContext {
		public IToken dir;
		public ITerminalNode DESCENDING() { return GetToken(RSharpParser.DESCENDING, 0); }
		public ITerminalNode ASCENDING() { return GetToken(RSharpParser.ASCENDING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1042; expression();
			State = 1044;
			_la = _input.La(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 1043;
				_localctx.dir = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.dir = _errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_group_clauseContext : ParserRuleContext {
		public Group_clauseContext group_clause() {
			return GetRuleContext<Group_clauseContext>(0);
		}
		public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		public Select_or_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_group_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSelect_or_group_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSelect_or_group_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_group_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_group_clauseContext select_or_group_clause() {
		Select_or_group_clauseContext _localctx = new Select_or_group_clauseContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_select_or_group_clause);
		try {
			State = 1048;
			switch (_input.La(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1046; select_clause();
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1047; group_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_clauseContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GROUP() { return GetToken(RSharpParser.GROUP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode BY() { return GetToken(RSharpParser.BY, 0); }
		public Group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterGroup_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitGroup_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_clauseContext group_clause() {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_group_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1050; Match(GROUP);
			State = 1051; expression();
			State = 1052; Match(BY);
			State = 1053; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(RSharpParser.SELECT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_select_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055; Match(SELECT);
			State = 1056; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_continuationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(RSharpParser.INTO, 0); }
		public Query_continuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_continuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_continuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_continuation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_continuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_continuationContext query_continuation() {
		Query_continuationContext _localctx = new Query_continuationContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_query_continuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1058; Match(INTO);
			State = 1059; identifier();
			State = 1060; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public Local_constant_declarationContext local_constant_declaration() {
			return GetRuleContext<Local_constant_declarationContext>(0);
		}
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmbeddedStatementContext : StatementContext {
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public EmbeddedStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterEmbeddedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitEmbeddedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LabeledStatementContext : StatementContext {
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_statement);
		try {
			State = 1073;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				_localctx = new LabeledStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1062; identifier();
				State = 1063; Match(COLON);
				State = 1064; statement();
				}
				break;

			case 2:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1068;
				switch (_input.La(1)) {
				case ADD:
				case ARGLIST:
				case BOOL:
				case BYTE:
				case CHAR:
				case COMPLEX:
				case VLONG:
				case DOUBLE:
				case FLOAT:
				case GET:
				case INT:
				case LONG:
				case NAMEOF:
				case OBJECT:
				case ON:
				case PARTIAL:
				case RAISE:
				case REMOVE:
				case SBYTE:
				case SET:
				case SHORT:
				case ADRESSOF:
				case STRING:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHERE:
				case SELECT:
				case ASCENDING:
				case BY:
				case DESCENDING:
				case EQUALS:
				case FROM:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case ORDERBY:
				case IDENTIFIER:
					{
					State = 1066; local_variable_declaration();
					}
					break;
				case CONST:
					{
					State = 1067; local_constant_declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1070; Match(SEMICOLON);
				}
				break;

			case 3:
				_localctx = new EmbeddedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1072; embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_embedded_statement);
		try {
			State = 1077;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1075; block();
				}
				break;
			case ADD:
			case ARGLIST:
			case SUPER:
			case BOOL:
			case BREAK:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case VLONG:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GET:
			case GOTO:
			case IF:
			case INT:
			case SYNC:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case MIXIN:
			case OBJECT:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SET:
			case SHORT:
			case SIZEOF:
			case ADRESSOF:
			case STRING:
			case SWITCH:
			case SELF:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHERE:
			case WHILE:
			case YIELD:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case OCT_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case UNARY_OPERATOR_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_PARITY:
			case OP_ZERO:
			case RESTRICT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1076; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_embedded_statementContext : ParserRuleContext {
		public Simple_embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_embedded_statement; } }
	 
		public Simple_embedded_statementContext() { }
		public virtual void CopyFrom(Simple_embedded_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CheckedStatementContext : Simple_embedded_statementContext {
		public ITerminalNode CHECKED() { return GetToken(RSharpParser.CHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CheckedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterCheckedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitCheckedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public ITerminalNode RETURN() { return GetToken(RSharpParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RestrictStatementContext : Simple_embedded_statementContext {
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode RESTRICT() { return GetToken(RSharpParser.RESTRICT, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RestrictStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterRestrictStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitRestrictStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestrictStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryCatchStatementContext : Simple_embedded_statementContext {
		public ITerminalNode TRY() { return GetToken(RSharpParser.TRY, 0); }
		public Finally_clauseContext finally_clause() {
			return GetRuleContext<Finally_clauseContext>(0);
		}
		public Catch_clausesContext catch_clauses() {
			return GetRuleContext<Catch_clausesContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TryCatchStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterTryCatchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitTryCatchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryCatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementContext : Simple_embedded_statementContext {
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode SWITCH() { return GetToken(RSharpParser.SWITCH, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public SwitchStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryFinallyStatementContext : Simple_embedded_statementContext {
		public ITerminalNode TRY() { return GetToken(RSharpParser.TRY, 0); }
		public Finally_clauseContext finally_clause() {
			return GetRuleContext<Finally_clauseContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TryFinallyStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterTryFinallyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitTryFinallyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryFinallyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UncheckedStatementContext : Simple_embedded_statementContext {
		public ITerminalNode UNCHECKED() { return GetToken(RSharpParser.UNCHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UncheckedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterUncheckedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitUncheckedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUncheckedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MixinStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode MIXIN() { return GetToken(RSharpParser.MIXIN, 0); }
		public MixinStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMixinStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMixinStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixinStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GotoCaseStatementContext : Simple_embedded_statementContext {
		public ITerminalNode CASE() { return GetToken(RSharpParser.CASE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public ITerminalNode GOTO() { return GetToken(RSharpParser.GOTO, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GotoCaseStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterGotoCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitGotoCaseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingStatementContext : Simple_embedded_statementContext {
		public Resource_acquisitionContext resource_acquisition() {
			return GetRuleContext<Resource_acquisitionContext>(0);
		}
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode USING() { return GetToken(RSharpParser.USING, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public UsingStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileElseStatementContext : Simple_embedded_statementContext {
		public ITerminalNode ELSE() { return GetToken(RSharpParser.ELSE, 0); }
		public Embedded_statementContext embedded_statement(int i) {
			return GetRuleContext<Embedded_statementContext>(i);
		}
		public Embedded_statementContext[] embedded_statement() {
			return GetRuleContexts<Embedded_statementContext>();
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode WHILE() { return GetToken(RSharpParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileElseStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterWhileElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitWhileElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GotoDefaultStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public ITerminalNode GOTO() { return GetToken(RSharpParser.GOTO, 0); }
		public ITerminalNode DEFAULT() { return GetToken(RSharpParser.DEFAULT, 0); }
		public GotoDefaultStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterGotoDefaultStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitGotoDefaultStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YieldBreakStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public ITerminalNode BREAK() { return GetToken(RSharpParser.BREAK, 0); }
		public ITerminalNode YIELD() { return GetToken(RSharpParser.YIELD, 0); }
		public YieldBreakStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterYieldBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitYieldBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public EmptyStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public ITerminalNode THROW() { return GetToken(RSharpParser.THROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YieldReturnStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public ITerminalNode RETURN() { return GetToken(RSharpParser.RETURN, 0); }
		public ITerminalNode YIELD() { return GetToken(RSharpParser.YIELD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YieldReturnStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterYieldReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitYieldReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeStatementContext : Simple_embedded_statementContext {
		public ITerminalNode UNSAFE() { return GetToken(RSharpParser.UNSAFE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UnsafeStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterUnsafeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitUnsafeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : Simple_embedded_statementContext {
		public ITerminalNode[] SEMICOLON() { return GetTokens(RSharpParser.SEMICOLON); }
		public For_initializerContext for_initializer() {
			return GetRuleContext<For_initializerContext>(0);
		}
		public For_iteratorContext for_iterator() {
			return GetRuleContext<For_iteratorContext>(0);
		}
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(RSharpParser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(RSharpParser.SEMICOLON, i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public ITerminalNode BREAK() { return GetToken(RSharpParser.BREAK, 0); }
		public BreakStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : Simple_embedded_statementContext {
		public ITerminalNode ELSE() { return GetToken(RSharpParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(RSharpParser.IF, 0); }
		public If_bodyContext[] if_body() {
			return GetRuleContexts<If_bodyContext>();
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public If_bodyContext if_body(int i) {
			return GetRuleContext<If_bodyContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GotoStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public ITerminalNode GOTO() { return GetToken(RSharpParser.GOTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GotoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : Simple_embedded_statementContext {
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode WHILE() { return GetToken(RSharpParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public ITerminalNode DO() { return GetToken(RSharpParser.DO, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode WHILE() { return GetToken(RSharpParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : Simple_embedded_statementContext {
		public ITerminalNode FOREACH() { return GetToken(RSharpParser.FOREACH, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IN() { return GetToken(RSharpParser.IN, 0); }
		public ForeachStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SyncStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SYNC() { return GetToken(RSharpParser.SYNC, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SyncStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSyncStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSyncStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public ITerminalNode CONTINUE() { return GetToken(RSharpParser.CONTINUE, 0); }
		public ContinueStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_embedded_statementContext simple_embedded_statement() {
		Simple_embedded_statementContext _localctx = new Simple_embedded_statementContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_simple_embedded_statement);
		int _la;
		try {
			State = 1223;
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1079; Match(SEMICOLON);
				}
				break;

			case 2:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1080; expression();
				State = 1081; Match(SEMICOLON);
				}
				break;

			case 3:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1083; Match(IF);
				State = 1084; Match(OPEN_PARENS);
				State = 1085; expression();
				State = 1086; Match(CLOSE_PARENS);
				State = 1087; if_body();
				State = 1090;
				switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
				case 1:
					{
					State = 1088; Match(ELSE);
					State = 1089; if_body();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1092; Match(SWITCH);
				State = 1093; Match(OPEN_PARENS);
				State = 1094; expression();
				State = 1095; Match(CLOSE_PARENS);
				State = 1096; Match(OPEN_BRACE);
				State = 1100;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 1097; switch_section();
					}
					}
					State = 1102;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1103; Match(CLOSE_BRACE);
				}
				break;

			case 5:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1105; Match(WHILE);
				State = 1106; Match(OPEN_PARENS);
				State = 1107; expression();
				State = 1108; Match(CLOSE_PARENS);
				State = 1109; embedded_statement();
				}
				break;

			case 6:
				_localctx = new WhileElseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1111; Match(WHILE);
				State = 1112; Match(OPEN_PARENS);
				State = 1113; expression();
				State = 1114; Match(CLOSE_PARENS);
				State = 1115; embedded_statement();
				State = 1116; Match(ELSE);
				State = 1117; embedded_statement();
				}
				break;

			case 7:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1119; Match(DO);
				State = 1120; embedded_statement();
				State = 1121; Match(WHILE);
				State = 1122; Match(OPEN_PARENS);
				State = 1123; expression();
				State = 1124; Match(CLOSE_PARENS);
				State = 1125; Match(SEMICOLON);
				}
				break;

			case 8:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1127; Match(FOR);
				State = 1128; Match(OPEN_PARENS);
				State = 1130;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << COMPLEX) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (VOID - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (OPEN_PARENS - 132)) | (1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (OP_PARITY - 132)) | (1L << (OP_ZERO - 132)))) != 0)) {
					{
					State = 1129; for_initializer();
					}
				}

				State = 1132; Match(SEMICOLON);
				State = 1134;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (OPEN_PARENS - 132)) | (1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (OP_PARITY - 132)) | (1L << (OP_ZERO - 132)))) != 0)) {
					{
					State = 1133; expression();
					}
				}

				State = 1136; Match(SEMICOLON);
				State = 1138;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (OPEN_PARENS - 132)) | (1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (OP_PARITY - 132)) | (1L << (OP_ZERO - 132)))) != 0)) {
					{
					State = 1137; for_iterator();
					}
				}

				State = 1140; Match(CLOSE_PARENS);
				State = 1141; embedded_statement();
				}
				break;

			case 9:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1142; Match(FOREACH);
				State = 1143; Match(OPEN_PARENS);
				State = 1144; type();
				State = 1145; identifier();
				State = 1146; Match(IN);
				State = 1147; expression();
				State = 1148; Match(CLOSE_PARENS);
				State = 1149; embedded_statement();
				}
				break;

			case 10:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1151; Match(BREAK);
				State = 1152; Match(SEMICOLON);
				}
				break;

			case 11:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1153; Match(CONTINUE);
				State = 1154; Match(SEMICOLON);
				}
				break;

			case 12:
				_localctx = new GotoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1155; Match(GOTO);
				State = 1156; identifier();
				State = 1157; Match(SEMICOLON);
				}
				break;

			case 13:
				_localctx = new GotoCaseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1159; Match(GOTO);
				State = 1160; Match(CASE);
				State = 1161; expression();
				State = 1162; Match(SEMICOLON);
				}
				break;

			case 14:
				_localctx = new GotoDefaultStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1164; Match(GOTO);
				State = 1165; Match(DEFAULT);
				State = 1166; Match(SEMICOLON);
				}
				break;

			case 15:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1167; Match(RETURN);
				State = 1169;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (OPEN_PARENS - 132)) | (1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (OP_PARITY - 132)) | (1L << (OP_ZERO - 132)))) != 0)) {
					{
					State = 1168; expression();
					}
				}

				State = 1171; Match(SEMICOLON);
				}
				break;

			case 16:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1172; Match(THROW);
				State = 1174;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (OPEN_PARENS - 132)) | (1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (OP_PARITY - 132)) | (1L << (OP_ZERO - 132)))) != 0)) {
					{
					State = 1173; expression();
					}
				}

				State = 1176; Match(SEMICOLON);
				}
				break;

			case 17:
				_localctx = new TryFinallyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1177; Match(TRY);
				State = 1178; block();
				State = 1179; finally_clause();
				}
				break;

			case 18:
				_localctx = new TryCatchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1181; Match(TRY);
				State = 1182; block();
				State = 1183; catch_clauses();
				State = 1185;
				_la = _input.La(1);
				if (_la==FINALLY) {
					{
					State = 1184; finally_clause();
					}
				}

				}
				break;

			case 19:
				_localctx = new CheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1187; Match(CHECKED);
				State = 1188; block();
				}
				break;

			case 20:
				_localctx = new UncheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1189; Match(UNCHECKED);
				State = 1190; block();
				}
				break;

			case 21:
				_localctx = new SyncStatementContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1191; Match(SYNC);
				State = 1192; Match(OPEN_PARENS);
				State = 1193; expression();
				State = 1194; Match(CLOSE_PARENS);
				State = 1195; embedded_statement();
				}
				break;

			case 22:
				_localctx = new UsingStatementContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1197; Match(USING);
				State = 1198; Match(OPEN_PARENS);
				State = 1199; resource_acquisition();
				State = 1200; Match(CLOSE_PARENS);
				State = 1201; embedded_statement();
				}
				break;

			case 23:
				_localctx = new YieldReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1203; Match(YIELD);
				State = 1204; Match(RETURN);
				State = 1205; expression();
				State = 1206; Match(SEMICOLON);
				}
				break;

			case 24:
				_localctx = new YieldBreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1208; Match(YIELD);
				State = 1209; Match(BREAK);
				State = 1210; Match(SEMICOLON);
				}
				break;

			case 25:
				_localctx = new MixinStatementContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1211; Match(MIXIN);
				State = 1212; identifier();
				State = 1213; Match(SEMICOLON);
				}
				break;

			case 26:
				_localctx = new RestrictStatementContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1215; Match(RESTRICT);
				State = 1216; Match(OPEN_PARENS);
				State = 1217; expression();
				State = 1218; Match(CLOSE_PARENS);
				State = 1219; embedded_statement();
				}
				break;

			case 27:
				_localctx = new UnsafeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1221; Match(UNSAFE);
				State = 1222; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1225; Match(OPEN_BRACE);
			State = 1227;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << CONST) | (1L << CONTINUE) | (1L << COMPLEX) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DO) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << GET) | (1L << GOTO) | (1L << IF) | (1L << INT) | (1L << SYNC) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << MIXIN) | (1L << OBJECT) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (RETURN - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SWITCH - 64)) | (1L << (SELF - 64)) | (1L << (THROW - 64)) | (1L << (TRUE - 64)) | (1L << (TRY - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNSAFE - 64)) | (1L << (USHORT - 64)) | (1L << (USING - 64)) | (1L << (VOID - 64)) | (1L << (WHERE - 64)) | (1L << (WHILE - 64)) | (1L << (YIELD - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OPEN_BRACE - 128)) | (1L << (OPEN_PARENS - 128)) | (1L << (SEMICOLON - 128)) | (1L << (PLUS - 128)) | (1L << (MINUS - 128)) | (1L << (STAR - 128)) | (1L << (AMP - 128)) | (1L << (BANG - 128)) | (1L << (TILDE - 128)) | (1L << (OP_INC - 128)) | (1L << (OP_DEC - 128)) | (1L << (OP_PARITY - 128)) | (1L << (OP_ZERO - 128)))) != 0) || _la==RESTRICT) {
				{
				State = 1226; statement_list();
				}
			}

			State = 1229; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declarationContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Local_variable_declaratorContext[] local_variable_declarator() {
			return GetRuleContexts<Local_variable_declaratorContext>();
		}
		public Local_variable_declaratorContext local_variable_declarator(int i) {
			return GetRuleContext<Local_variable_declaratorContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declarationContext local_variable_declaration() {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_local_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1231; type();
			State = 1232; local_variable_declarator();
			State = 1237;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1233; Match(COMMA);
				State = 1234; local_variable_declarator();
				}
				}
				State = 1239;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorContext : ParserRuleContext {
		public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(RSharpParser.ASSIGNMENT, 0); }
		public Local_variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorContext local_variable_declarator() {
		Local_variable_declaratorContext _localctx = new Local_variable_declaratorContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_local_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1240; identifier();
			State = 1243;
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1241; Match(ASSIGNMENT);
				State = 1242; variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_constant_declarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(RSharpParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Local_constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_constant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_constant_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_constant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_constant_declarationContext local_constant_declaration() {
		Local_constant_declarationContext _localctx = new Local_constant_declarationContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_local_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245; Match(CONST);
			State = 1246; type();
			State = 1247; constant_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterIf_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitIf_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_if_body);
		try {
			State = 1251;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1249; block();
				}
				break;
			case ADD:
			case ARGLIST:
			case SUPER:
			case BOOL:
			case BREAK:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case VLONG:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GET:
			case GOTO:
			case IF:
			case INT:
			case SYNC:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case MIXIN:
			case OBJECT:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SET:
			case SHORT:
			case SIZEOF:
			case ADRESSOF:
			case STRING:
			case SWITCH:
			case SELF:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHERE:
			case WHILE:
			case YIELD:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case OCT_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case UNARY_OPERATOR_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_PARITY:
			case OP_ZERO:
			case RESTRICT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1250; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_switch_section);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1254;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1253; switch_label();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1256;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,105,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1258; statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(RSharpParser.CASE, 0); }
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(RSharpParser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitch_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitch_label(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_switch_label);
		try {
			State = 1266;
			switch (_input.La(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1260; Match(CASE);
				State = 1261; expression();
				State = 1262; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1264; Match(DEFAULT);
				State = 1265; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1269;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1268; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1271;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,107,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initializerContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public For_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterFor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitFor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initializerContext for_initializer() {
		For_initializerContext _localctx = new For_initializerContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_for_initializer);
		int _la;
		try {
			State = 1282;
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1273; local_variable_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1274; expression();
				State = 1279;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1275; Match(COMMA);
					State = 1276; expression();
					}
					}
					State = 1281;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_iteratorContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public For_iteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_iterator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterFor_iterator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitFor_iterator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_iterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_iteratorContext for_iterator() {
		For_iteratorContext _localctx = new For_iteratorContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_for_iterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1284; expression();
			State = 1289;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1285; Match(COMMA);
				State = 1286; expression();
				}
				}
				State = 1291;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_clausesContext : ParserRuleContext {
		public Specific_catch_clauseContext[] specific_catch_clause() {
			return GetRuleContexts<Specific_catch_clauseContext>();
		}
		public Specific_catch_clauseContext specific_catch_clause(int i) {
			return GetRuleContext<Specific_catch_clauseContext>(i);
		}
		public General_catch_clauseContext general_catch_clause() {
			return GetRuleContext<General_catch_clauseContext>(0);
		}
		public Catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterCatch_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitCatch_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_clausesContext catch_clauses() {
		Catch_clausesContext _localctx = new Catch_clausesContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_catch_clauses);
		int _la;
		try {
			int _alt;
			State = 1303;
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1292; specific_catch_clause();
				State = 1296;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,111,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1293; specific_catch_clause();
						}
						} 
					}
					State = 1298;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,111,_ctx);
				}
				State = 1300;
				_la = _input.La(1);
				if (_la==CATCH) {
					{
					State = 1299; general_catch_clause();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1302; general_catch_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clauseContext : ParserRuleContext {
		public Package_or_type_nameContext package_or_type_name() {
			return GetRuleContext<Package_or_type_nameContext>(0);
		}
		public ITerminalNode CATCH() { return GetToken(RSharpParser.CATCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public Specific_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clauseContext specific_catch_clause() {
		Specific_catch_clauseContext _localctx = new Specific_catch_clauseContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_specific_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305; Match(CATCH);
			State = 1306; Match(OPEN_PARENS);
			State = 1307; package_or_type_name();
			State = 1309;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << GET) | (1L << NAMEOF) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (SET - 64)) | (1L << (ADRESSOF - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 1308; identifier();
				}
			}

			State = 1311; Match(CLOSE_PARENS);
			State = 1313;
			_la = _input.La(1);
			if (_la==WHEN) {
				{
				State = 1312; exception_filter();
				}
			}

			State = 1315; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(RSharpParser.CATCH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public General_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterGeneral_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitGeneral_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_catch_clauseContext general_catch_clause() {
		General_catch_clauseContext _localctx = new General_catch_clauseContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_general_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1317; Match(CATCH);
			State = 1319;
			_la = _input.La(1);
			if (_la==WHEN) {
				{
				State = 1318; exception_filter();
				}
			}

			State = 1321; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_filterContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(RSharpParser.WHEN, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Exception_filterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterException_filter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitException_filter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_filter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_filterContext exception_filter() {
		Exception_filterContext _localctx = new Exception_filterContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_exception_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1323; Match(WHEN);
			State = 1324; Match(OPEN_PARENS);
			State = 1325; expression();
			State = 1326; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_clauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(RSharpParser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterFinally_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitFinally_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_clauseContext finally_clause() {
		Finally_clauseContext _localctx = new Finally_clauseContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_finally_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1328; Match(FINALLY);
			State = 1329; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_acquisitionContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Resource_acquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_acquisition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterResource_acquisition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitResource_acquisition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource_acquisition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Resource_acquisitionContext resource_acquisition() {
		Resource_acquisitionContext _localctx = new Resource_acquisitionContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_resource_acquisition);
		try {
			State = 1333;
			switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1331; local_variable_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1332; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_declarationContext : ParserRuleContext {
		public Package_bodyContext package_body() {
			return GetRuleContext<Package_bodyContext>(0);
		}
		public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		public ITerminalNode PACKAGE() { return GetToken(RSharpParser.PACKAGE, 0); }
		public Package_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPackage_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPackage_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_declarationContext package_declaration() {
		Package_declarationContext _localctx = new Package_declarationContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_package_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335; Match(PACKAGE);
			State = 1336; qualified_identifier();
			State = 1337; package_body();
			State = 1339;
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 1338; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_identifierContext : ParserRuleContext {
		public ITerminalNode[] DOT() { return GetTokens(RSharpParser.DOT); }
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public ITerminalNode DOT(int i) {
			return GetToken(RSharpParser.DOT, i);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterQualified_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitQualified_identifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_identifierContext qualified_identifier() {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_qualified_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1341; identifier();
			State = 1346;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 1342; Match(DOT);
				State = 1343; identifier();
				}
				}
				State = 1348;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_bodyContext : ParserRuleContext {
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public Package_member_declarationsContext package_member_declarations() {
			return GetRuleContext<Package_member_declarationsContext>(0);
		}
		public Import_directivesContext import_directives() {
			return GetRuleContext<Import_directivesContext>(0);
		}
		public Package_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPackage_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPackage_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_bodyContext package_body() {
		Package_bodyContext _localctx = new Package_bodyContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_package_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1349; Match(OPEN_BRACE);
			State = 1351;
			_la = _input.La(1);
			if (_la==IMPORT) {
				{
				State = 1350; import_directives();
				}
			}

			State = 1354;
			_la = _input.La(1);
			if (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (ABSTRACT - 8)) | (1L << (CLASS - 8)) | (1L << (DELEGATE - 8)) | (1L << (ENUM - 8)) | (1L << (INTERFACE - 8)) | (1L << (FRIEND - 8)) | (1L << (PACKAGE - 8)) | (1L << (PRIVATE - 8)) | (1L << (PROTECTED - 8)) | (1L << (PUBLIC - 8)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (SEALED - 74)) | (1L << (STATIC - 74)) | (1L << (STRUCT - 74)) | (1L << (UNION - 74)) | (1L << (OPEN_BRACKET - 74)))) != 0)) {
				{
				State = 1353; package_member_declarations();
				}
			}

			State = 1356; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_directivesContext : ParserRuleContext {
		public Import_directiveContext import_directive(int i) {
			return GetRuleContext<Import_directiveContext>(i);
		}
		public Import_directiveContext[] import_directive() {
			return GetRuleContexts<Import_directiveContext>();
		}
		public Import_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterImport_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitImport_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_directivesContext import_directives() {
		Import_directivesContext _localctx = new Import_directivesContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_import_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1359;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1358; import_directive();
				}
				}
				State = 1361;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==IMPORT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_directiveContext : ParserRuleContext {
		public Import_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_directive; } }
	 
		public Import_directiveContext() { }
		public virtual void CopyFrom(Import_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ImportPackageDirectiveContext : Import_directiveContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public Package_or_type_nameContext package_or_type_name() {
			return GetRuleContext<Package_or_type_nameContext>(0);
		}
		public ITerminalNode IMPORT() { return GetToken(RSharpParser.IMPORT, 0); }
		public ImportPackageDirectiveContext(Import_directiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterImportPackageDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitImportPackageDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportPackageDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportAliasDirectiveContext : Import_directiveContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public Package_or_type_nameContext package_or_type_name() {
			return GetRuleContext<Package_or_type_nameContext>(0);
		}
		public ITerminalNode IMPORT() { return GetToken(RSharpParser.IMPORT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(RSharpParser.ASSIGNMENT, 0); }
		public ImportAliasDirectiveContext(Import_directiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterImportAliasDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitImportAliasDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAliasDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_directiveContext import_directive() {
		Import_directiveContext _localctx = new Import_directiveContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_import_directive);
		try {
			State = 1373;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				_localctx = new ImportAliasDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1363; Match(IMPORT);
				State = 1364; identifier();
				State = 1365; Match(ASSIGNMENT);
				State = 1366; package_or_type_name();
				State = 1367; Match(SEMICOLON);
				}
				break;

			case 2:
				_localctx = new ImportPackageDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1369; Match(IMPORT);
				State = 1370; package_or_type_name();
				State = 1371; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_member_declarationsContext : ParserRuleContext {
		public Package_member_declarationContext package_member_declaration(int i) {
			return GetRuleContext<Package_member_declarationContext>(i);
		}
		public Package_member_declarationContext[] package_member_declaration() {
			return GetRuleContexts<Package_member_declarationContext>();
		}
		public Package_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPackage_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPackage_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_member_declarationsContext package_member_declarations() {
		Package_member_declarationsContext _localctx = new Package_member_declarationsContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_package_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1376;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1375; package_member_declaration();
				}
				}
				State = 1378;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (ABSTRACT - 8)) | (1L << (CLASS - 8)) | (1L << (DELEGATE - 8)) | (1L << (ENUM - 8)) | (1L << (INTERFACE - 8)) | (1L << (FRIEND - 8)) | (1L << (PACKAGE - 8)) | (1L << (PRIVATE - 8)) | (1L << (PROTECTED - 8)) | (1L << (PUBLIC - 8)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (SEALED - 74)) | (1L << (STATIC - 74)) | (1L << (STRUCT - 74)) | (1L << (UNION - 74)) | (1L << (OPEN_BRACKET - 74)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_member_declarationContext : ParserRuleContext {
		public Package_declarationContext package_declaration() {
			return GetRuleContext<Package_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Package_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPackage_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPackage_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_member_declarationContext package_member_declaration() {
		Package_member_declarationContext _localctx = new Package_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_package_member_declaration);
		try {
			State = 1382;
			switch (_input.La(1)) {
			case PACKAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1380; package_declaration();
				}
				break;
			case ABSTRACT:
			case CLASS:
			case DELEGATE:
			case ENUM:
			case INTERFACE:
			case FRIEND:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SEALED:
			case STATIC:
			case STRUCT:
			case UNION:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1381; type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_member_declarationContext : ParserRuleContext {
		public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Mixin_definitionContext mixin_definition() {
			return GetRuleContext<Mixin_definitionContext>(0);
		}
		public Event_declarationContext event_declaration() {
			return GetRuleContext<Event_declarationContext>(0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		public Interrupt_definitionContext interrupt_definition() {
			return GetRuleContext<Interrupt_definitionContext>(0);
		}
		public Operator_declarationContext operator_declaration() {
			return GetRuleContext<Operator_declarationContext>(0);
		}
		public Property_declarationContext property_declaration() {
			return GetRuleContext<Property_declarationContext>(0);
		}
		public Indexer_declarationContext indexer_declaration() {
			return GetRuleContext<Indexer_declarationContext>(0);
		}
		public Field_declarationContext field_declaration() {
			return GetRuleContext<Field_declarationContext>(0);
		}
		public Default_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterDefault_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitDefault_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_member_declarationContext default_member_declaration() {
		Default_member_declarationContext _localctx = new Default_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_default_member_declaration);
		try {
			State = 1394;
			switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1384; constant_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1385; method_declaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1386; property_declaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1387; indexer_declaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1388; operator_declaration();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1389; field_declaration();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1390; event_declaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1391; conversion_operator_declarator();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1392; mixin_definition();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1393; interrupt_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public Union_definitionContext union_definition() {
			return GetRuleContext<Union_definitionContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_type_declaration);
		try {
			State = 1402;
			switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1396; class_definition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1397; struct_definition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1398; union_definition();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1399; interface_definition();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1400; enum_definition();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1401; delegate_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_alias_memberContext : ParserRuleContext {
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(RSharpParser.DOUBLE_COLON, 0); }
		public Qualified_alias_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_alias_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterQualified_alias_member(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitQualified_alias_member(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_alias_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_alias_memberContext qualified_alias_member() {
		Qualified_alias_memberContext _localctx = new Qualified_alias_memberContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_qualified_alias_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404; identifier();
			State = 1405; Match(DOUBLE_COLON);
			State = 1406; identifier();
			State = 1408;
			switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				State = 1407; type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ITerminalNode LT() { return GetToken(RSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(RSharpParser.GT, 0); }
		public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410; Match(LT);
			State = 1411; type_parameter();
			State = 1416;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1412; Match(COMMA);
				State = 1413; type_parameter();
				}
				}
				State = 1418;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1419; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_type_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1421; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_baseContext : ParserRuleContext {
		public Class_typeContext[] class_type() {
			return GetRuleContexts<Class_typeContext>();
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public Class_typeContext class_type(int i) {
			return GetRuleContext<Class_typeContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Class_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_baseContext class_base() {
		Class_baseContext _localctx = new Class_baseContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_class_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1423; Match(COLON);
			State = 1424; class_type();
			State = 1429;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1425; Match(COMMA);
				State = 1426; class_type();
				}
				}
				State = 1431;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_listContext : ParserRuleContext {
		public Package_or_type_nameContext[] package_or_type_name() {
			return GetRuleContexts<Package_or_type_nameContext>();
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public Package_or_type_nameContext package_or_type_name(int i) {
			return GetRuleContext<Package_or_type_nameContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Interface_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_type_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_type_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_type_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_listContext interface_type_list() {
		Interface_type_listContext _localctx = new Interface_type_listContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_interface_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1432; package_or_type_name();
			State = 1437;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1433; Match(COMMA);
				State = 1434; package_or_type_name();
				}
				}
				State = 1439;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clausesContext : ParserRuleContext {
		public Type_parameter_constraints_clauseContext type_parameter_constraints_clause(int i) {
			return GetRuleContext<Type_parameter_constraints_clauseContext>(i);
		}
		public Type_parameter_constraints_clauseContext[] type_parameter_constraints_clause() {
			return GetRuleContexts<Type_parameter_constraints_clauseContext>();
		}
		public Type_parameter_constraints_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
		Type_parameter_constraints_clausesContext _localctx = new Type_parameter_constraints_clausesContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_type_parameter_constraints_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1440; type_parameter_constraints_clause();
				}
				}
				State = 1443;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==WHERE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clauseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public ITerminalNode WHERE() { return GetToken(RSharpParser.WHERE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_parameter_constraintsContext type_parameter_constraints() {
			return GetRuleContext<Type_parameter_constraintsContext>(0);
		}
		public Type_parameter_constraints_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clauseContext type_parameter_constraints_clause() {
		Type_parameter_constraints_clauseContext _localctx = new Type_parameter_constraints_clauseContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_type_parameter_constraints_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445; Match(WHERE);
			State = 1446; identifier();
			State = 1447; Match(COLON);
			State = 1448; type_parameter_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraintsContext : ParserRuleContext {
		public Secondary_constraintsContext secondary_constraints() {
			return GetRuleContext<Secondary_constraintsContext>(0);
		}
		public Primary_constraintContext primary_constraint() {
			return GetRuleContext<Primary_constraintContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(RSharpParser.COMMA, 0); }
		public Type_parameter_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraintsContext type_parameter_constraints() {
		Type_parameter_constraintsContext _localctx = new Type_parameter_constraintsContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_type_parameter_constraints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1450; primary_constraint();
			State = 1453;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1451; Match(COMMA);
				State = 1452; secondary_constraints();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_constraintContext : ParserRuleContext {
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(RSharpParser.CLASS, 0); }
		public Primary_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPrimary_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPrimary_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_constraintContext primary_constraint() {
		Primary_constraintContext _localctx = new Primary_constraintContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_primary_constraint);
		try {
			State = 1457;
			switch (_input.La(1)) {
			case ADD:
			case ARGLIST:
			case GET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case SET:
			case ADRESSOF:
			case STRING:
			case WHERE:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1455; class_type();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1456; Match(CLASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_constraintsContext : ParserRuleContext {
		public Package_or_type_nameContext[] package_or_type_name() {
			return GetRuleContexts<Package_or_type_nameContext>();
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public Package_or_type_nameContext package_or_type_name(int i) {
			return GetRuleContext<Package_or_type_nameContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Secondary_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSecondary_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSecondary_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondary_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_constraintsContext secondary_constraints() {
		Secondary_constraintsContext _localctx = new Secondary_constraintsContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_secondary_constraints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459; package_or_type_name();
			State = 1464;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1460; Match(COMMA);
				State = 1461; package_or_type_name();
				}
				}
				State = 1466;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public Class_member_declarationsContext class_member_declarations() {
			return GetRuleContext<Class_member_declarationsContext>(0);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1467; Match(OPEN_BRACE);
			State = 1469;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ARGLIST) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CONST) | (1L << COMPLEX) | (1L << VLONG) | (1L << DOUBLE) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << GET) | (1L << IMPLICIT) | (1L << INLINE) | (1L << INT) | (1L << FRIEND) | (1L << SYNC) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << MIXIN) | (1L << OBJECT) | (1L << ON) | (1L << OVERRIDE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (RAISE - 64)) | (1L << (READONLY - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (SUPERSEDE - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (USHORT - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOID - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)))) != 0) || _la==OPEN_BRACKET || _la==TILDE) {
				{
				State = 1468; class_member_declarations();
				}
			}

			State = 1471; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationsContext : ParserRuleContext {
		public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		public Class_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationsContext class_member_declarations() {
		Class_member_declarationsContext _localctx = new Class_member_declarationsContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_class_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1474;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1473; class_member_declaration();
				}
				}
				State = 1476;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ARGLIST) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CONST) | (1L << COMPLEX) | (1L << VLONG) | (1L << DOUBLE) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << GET) | (1L << IMPLICIT) | (1L << INLINE) | (1L << INT) | (1L << FRIEND) | (1L << SYNC) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << MIXIN) | (1L << OBJECT) | (1L << ON) | (1L << OVERRIDE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (RAISE - 64)) | (1L << (READONLY - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (SUPERSEDE - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (USHORT - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOID - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)))) != 0) || _la==OPEN_BRACKET || _la==TILDE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		public Destructor_definitionContext destructor_definition() {
			return GetRuleContext<Destructor_definitionContext>(0);
		}
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_class_member_declaration);
		try {
			State = 1480;
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1478; common_member_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1479; destructor_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifiersContext : ParserRuleContext {
		public Method_modifierContext[] method_modifier() {
			return GetRuleContexts<Method_modifierContext>();
		}
		public Method_modifierContext method_modifier(int i) {
			return GetRuleContext<Method_modifierContext>(i);
		}
		public Method_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifiersContext method_modifiers() {
		Method_modifiersContext _localctx = new Method_modifiersContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_method_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1483;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1482; method_modifier();
				}
				}
				State = 1485;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INLINE) | (1L << FRIEND) | (1L << SYNC) | (1L << NEW) | (1L << OVERRIDE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (STATIC - 65)) | (1L << (SUPERSEDE - 65)) | (1L << (VIRTUAL - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_modifiersContext : ParserRuleContext {
		public Member_modifierContext[] member_modifier() {
			return GetRuleContexts<Member_modifierContext>();
		}
		public Member_modifierContext member_modifier(int i) {
			return GetRuleContext<Member_modifierContext>(i);
		}
		public Member_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_modifiersContext member_modifiers() {
		Member_modifiersContext _localctx = new Member_modifiersContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_member_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1487; member_modifier();
				}
				}
				State = 1490;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (EXTERN - 33)) | (1L << (FRIEND - 33)) | (1L << (SYNC - 33)) | (1L << (NEW - 33)) | (1L << (OVERRIDE - 33)) | (1L << (PRIVATE - 33)) | (1L << (PROTECTED - 33)) | (1L << (PUBLIC - 33)) | (1L << (READONLY - 33)) | (1L << (STATIC - 33)) | (1L << (VIRTUAL - 33)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_modifiersContext : ParserRuleContext {
		public Type_modifierContext type_modifier(int i) {
			return GetRuleContext<Type_modifierContext>(i);
		}
		public Type_modifierContext[] type_modifier() {
			return GetRuleContexts<Type_modifierContext>();
		}
		public Type_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterType_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitType_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_modifiersContext type_modifiers() {
		Type_modifiersContext _localctx = new Type_modifiersContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_type_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1492; type_modifier();
				}
				}
				State = 1495;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ABSTRACT || _la==FRIEND || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_modifierContext : ParserRuleContext {
		public ITerminalNode SEALED() { return GetToken(RSharpParser.SEALED, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(RSharpParser.ABSTRACT, 0); }
		public ITerminalNode FRIEND() { return GetToken(RSharpParser.FRIEND, 0); }
		public ITerminalNode STATIC() { return GetToken(RSharpParser.STATIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(RSharpParser.PROTECTED, 0); }
		public ITerminalNode PUBLIC() { return GetToken(RSharpParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(RSharpParser.PRIVATE, 0); }
		public Type_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterType_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitType_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_modifierContext type_modifier() {
		Type_modifierContext _localctx = new Type_modifierContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_type_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497;
			_la = _input.La(1);
			if ( !(_la==ABSTRACT || _la==FRIEND || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_modifierContext : ParserRuleContext {
		public ITerminalNode VIRTUAL() { return GetToken(RSharpParser.VIRTUAL, 0); }
		public ITerminalNode FRIEND() { return GetToken(RSharpParser.FRIEND, 0); }
		public ITerminalNode STATIC() { return GetToken(RSharpParser.STATIC, 0); }
		public ITerminalNode SYNC() { return GetToken(RSharpParser.SYNC, 0); }
		public ITerminalNode READONLY() { return GetToken(RSharpParser.READONLY, 0); }
		public ITerminalNode PROTECTED() { return GetToken(RSharpParser.PROTECTED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(RSharpParser.OVERRIDE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(RSharpParser.PUBLIC, 0); }
		public ITerminalNode NEW() { return GetToken(RSharpParser.NEW, 0); }
		public ITerminalNode EXTERN() { return GetToken(RSharpParser.EXTERN, 0); }
		public ITerminalNode PRIVATE() { return GetToken(RSharpParser.PRIVATE, 0); }
		public Member_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_modifierContext member_modifier() {
		Member_modifierContext _localctx = new Member_modifierContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_member_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1499;
			_la = _input.La(1);
			if ( !(((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (EXTERN - 33)) | (1L << (FRIEND - 33)) | (1L << (SYNC - 33)) | (1L << (NEW - 33)) | (1L << (OVERRIDE - 33)) | (1L << (PRIVATE - 33)) | (1L << (PROTECTED - 33)) | (1L << (PUBLIC - 33)) | (1L << (READONLY - 33)) | (1L << (STATIC - 33)) | (1L << (VIRTUAL - 33)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifierContext : ParserRuleContext {
		public ITerminalNode VIRTUAL() { return GetToken(RSharpParser.VIRTUAL, 0); }
		public ITerminalNode FRIEND() { return GetToken(RSharpParser.FRIEND, 0); }
		public ITerminalNode READONLY() { return GetToken(RSharpParser.READONLY, 0); }
		public ITerminalNode SYNC(int i) {
			return GetToken(RSharpParser.SYNC, i);
		}
		public ITerminalNode NEW() { return GetToken(RSharpParser.NEW, 0); }
		public ITerminalNode EXTERN() { return GetToken(RSharpParser.EXTERN, 0); }
		public ITerminalNode PRIVATE() { return GetToken(RSharpParser.PRIVATE, 0); }
		public ITerminalNode SUPERSEDE() { return GetToken(RSharpParser.SUPERSEDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(RSharpParser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(RSharpParser.STATIC, 0); }
		public ITerminalNode[] SYNC() { return GetTokens(RSharpParser.SYNC); }
		public ITerminalNode INLINE() { return GetToken(RSharpParser.INLINE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(RSharpParser.PROTECTED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(RSharpParser.OVERRIDE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(RSharpParser.PUBLIC, 0); }
		public Method_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifierContext method_modifier() {
		Method_modifierContext _localctx = new Method_modifierContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_method_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1501;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INLINE) | (1L << FRIEND) | (1L << SYNC) | (1L << NEW) | (1L << OVERRIDE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (STATIC - 65)) | (1L << (SUPERSEDE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_member_declarationContext : ParserRuleContext {
		public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Mixin_definitionContext mixin_definition() {
			return GetRuleContext<Mixin_definitionContext>(0);
		}
		public Event_declarationContext event_declaration() {
			return GetRuleContext<Event_declarationContext>(0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		public Operator_declarationContext operator_declaration() {
			return GetRuleContext<Operator_declarationContext>(0);
		}
		public Property_declarationContext property_declaration() {
			return GetRuleContext<Property_declarationContext>(0);
		}
		public Indexer_declarationContext indexer_declaration() {
			return GetRuleContext<Indexer_declarationContext>(0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return GetRuleContext<Constructor_declarationContext>(0);
		}
		public Field_declarationContext field_declaration() {
			return GetRuleContext<Field_declarationContext>(0);
		}
		public Common_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterCommon_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitCommon_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_member_declarationContext common_member_declaration() {
		Common_member_declarationContext _localctx = new Common_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_common_member_declaration);
		try {
			State = 1513;
			switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1503; constant_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1504; method_declaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1505; property_declaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1506; indexer_declaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1507; operator_declaration();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1508; field_declaration();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1509; event_declaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1510; conversion_operator_declarator();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1511; constructor_declaration();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1512; mixin_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorsContext : ParserRuleContext {
		public Constant_declaratorContext[] constant_declarator() {
			return GetRuleContexts<Constant_declaratorContext>();
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public Constant_declaratorContext constant_declarator(int i) {
			return GetRuleContext<Constant_declaratorContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Constant_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorsContext constant_declarators() {
		Constant_declaratorsContext _localctx = new Constant_declaratorsContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_constant_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1515; constant_declarator();
			State = 1520;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1516; Match(COMMA);
				State = 1517; constant_declarator();
				}
				}
				State = 1522;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(RSharpParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorContext constant_declarator() {
		Constant_declaratorContext _localctx = new Constant_declaratorContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_constant_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1523; identifier();
			State = 1524; Match(ASSIGNMENT);
			State = 1525; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorsContext : ParserRuleContext {
		public Variable_declaratorContext[] variable_declarator() {
			return GetRuleContexts<Variable_declaratorContext>();
		}
		public Variable_declaratorContext variable_declarator(int i) {
			return GetRuleContext<Variable_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorsContext variable_declarators() {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1527; variable_declarator();
			State = 1532;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1528; Match(COMMA);
				State = 1529; variable_declarator();
				}
				}
				State = 1534;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorContext : ParserRuleContext {
		public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(RSharpParser.ASSIGNMENT, 0); }
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorContext variable_declarator() {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535; identifier();
			State = 1538;
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1536; Match(ASSIGNMENT);
				State = 1537; variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_variable_initializer);
		try {
			State = 1542;
			switch (_input.La(1)) {
			case ADD:
			case ARGLIST:
			case SUPER:
			case BOOL:
			case BYTE:
			case CHAR:
			case CHECKED:
			case VLONG:
			case DEFAULT:
			case DELEGATE:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case GET:
			case INT:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case SBYTE:
			case SET:
			case SHORT:
			case SIZEOF:
			case ADRESSOF:
			case STRING:
			case SELF:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case OCT_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case UNARY_OPERATOR_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_PARITY:
			case OP_ZERO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1540; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1541; array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		public ITerminalNode VOID() { return GetToken(RSharpParser.VOID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_return_type);
		try {
			State = 1546;
			switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1544; type();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1545; Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(RSharpParser.DOT, 0); }
		public Package_or_type_nameContext package_or_type_name() {
			return GetRuleContext<Package_or_type_nameContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_member_name);
		try {
			State = 1553;
			switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1548; package_or_type_name();
				State = 1549; Match(DOT);
				State = 1550; identifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1552; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_ARROW() { return GetToken(RSharpParser.RIGHT_ARROW, 0); }
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_method_body);
		try {
			State = 1561;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1555; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1556; Match(SEMICOLON);
				}
				break;
			case RIGHT_ARROW:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1557; Match(RIGHT_ARROW);
				State = 1558; expression();
				State = 1559; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		public Parameter_arrayContext parameter_array() {
			return GetRuleContext<Parameter_arrayContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(RSharpParser.COMMA, 0); }
		public Fixed_parametersContext fixed_parameters() {
			return GetRuleContext<Fixed_parametersContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_formal_parameter_list);
		int _la;
		try {
			State = 1569;
			switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1563; parameter_array();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1564; fixed_parameters();
				State = 1567;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1565; Match(COMMA);
					State = 1566; parameter_array();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parametersContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public Fixed_parameterContext fixed_parameter(int i) {
			return GetRuleContext<Fixed_parameterContext>(i);
		}
		public Fixed_parameterContext[] fixed_parameter() {
			return GetRuleContexts<Fixed_parameterContext>();
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parametersContext fixed_parameters() {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_fixed_parameters);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1571; fixed_parameter();
			State = 1576;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,152,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1572; Match(COMMA);
					State = 1573; fixed_parameter();
					}
					} 
				}
				State = 1578;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,152,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parameterContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parameterContext fixed_parameter() {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_fixed_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1580;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1579; attributes();
				}
			}

			State = 1583;
			_la = _input.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (OUT - 61)) | (1L << (REF - 61)) | (1L << (SELF - 61)))) != 0)) {
				{
				State = 1582; parameter_modifier();
				}
			}

			State = 1585; arg_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(RSharpParser.SELF, 0); }
		public ITerminalNode REF() { return GetToken(RSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(RSharpParser.OUT, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1587;
			_la = _input.La(1);
			if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (OUT - 61)) | (1L << (REF - 61)) | (1L << (SELF - 61)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_arrayContext : ParserRuleContext {
		public ITerminalNode PARAMS() { return GetToken(RSharpParser.PARAMS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public Parameter_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterParameter_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitParameter_array(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_arrayContext parameter_array() {
		Parameter_arrayContext _localctx = new Parameter_arrayContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_parameter_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1590;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1589; attributes();
				}
			}

			State = 1592; Match(PARAMS);
			State = 1593; array_type();
			State = 1594; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_declarationsContext : ParserRuleContext {
		public Set_accessor_declarationContext set_accessor_declaration() {
			return GetRuleContext<Set_accessor_declarationContext>(0);
		}
		public Get_accessor_declarationContext get_accessor_declaration() {
			return GetRuleContext<Get_accessor_declarationContext>(0);
		}
		public Accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_declarationsContext accessor_declarations() {
		Accessor_declarationsContext _localctx = new Accessor_declarationsContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_accessor_declarations);
		try {
			State = 1603;
			switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1596; get_accessor_declaration();
				State = 1597; set_accessor_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1599; set_accessor_declaration();
				State = 1600; get_accessor_declaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1602; get_accessor_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_accessor_declarationContext : ParserRuleContext {
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode GET() { return GetToken(RSharpParser.GET, 0); }
		public Get_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterGet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitGet_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_accessor_declarationContext get_accessor_declaration() {
		Get_accessor_declarationContext _localctx = new Get_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_get_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1606;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1605; attributes();
				}
			}

			State = 1608; Match(GET);
			State = 1609; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_accessor_declarationContext : ParserRuleContext {
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode SET() { return GetToken(RSharpParser.SET, 0); }
		public Set_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterSet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitSet_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_accessor_declarationContext set_accessor_declaration() {
		Set_accessor_declarationContext _localctx = new Set_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_set_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1612;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1611; attributes();
				}
			}

			State = 1615;
			_la = _input.La(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (FRIEND - 48)) | (1L << (PRIVATE - 48)) | (1L << (PROTECTED - 48)))) != 0)) {
				{
				State = 1614; accessor_modifier();
				}
			}

			State = 1617; Match(SET);
			State = 1618; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_modifierContext : ParserRuleContext {
		public ITerminalNode FRIEND() { return GetToken(RSharpParser.FRIEND, 0); }
		public ITerminalNode PROTECTED() { return GetToken(RSharpParser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(RSharpParser.PRIVATE, 0); }
		public Accessor_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_modifierContext accessor_modifier() {
		Accessor_modifierContext _localctx = new Accessor_modifierContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_accessor_modifier);
		try {
			State = 1627;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1620; Match(PROTECTED);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1621; Match(FRIEND);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1622; Match(PRIVATE);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1623; Match(PROTECTED);
				State = 1624; Match(FRIEND);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1625; Match(FRIEND);
				State = 1626; Match(PROTECTED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_bodyContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Accessor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_bodyContext accessor_body() {
		Accessor_bodyContext _localctx = new Accessor_bodyContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_accessor_body);
		try {
			State = 1631;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1629; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1630; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_accessor_declarationsContext : ParserRuleContext {
		public Add_accessor_declarationContext add_accessor_declaration() {
			return GetRuleContext<Add_accessor_declarationContext>(0);
		}
		public Remove_accessor_declarationContext remove_accessor_declaration() {
			return GetRuleContext<Remove_accessor_declarationContext>(0);
		}
		public Raise_accessor_declarationContext raise_accessor_declaration() {
			return GetRuleContext<Raise_accessor_declarationContext>(0);
		}
		public Event_accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterEvent_accessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitEvent_accessor_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_accessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_accessor_declarationsContext event_accessor_declarations() {
		Event_accessor_declarationsContext _localctx = new Event_accessor_declarationsContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_event_accessor_declarations);
		int _la;
		try {
			State = 1648;
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1633; add_accessor_declaration();
				State = 1634; remove_accessor_declaration();
				State = 1636;
				_la = _input.La(1);
				if (_la==RAISE || _la==OPEN_BRACKET) {
					{
					State = 1635; raise_accessor_declaration();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1638; remove_accessor_declaration();
				State = 1639; add_accessor_declaration();
				State = 1641;
				_la = _input.La(1);
				if (_la==RAISE || _la==OPEN_BRACKET) {
					{
					State = 1640; raise_accessor_declaration();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1643; add_accessor_declaration();
				State = 1644; remove_accessor_declaration();
				State = 1646;
				_la = _input.La(1);
				if (_la==RAISE || _la==OPEN_BRACKET) {
					{
					State = 1645; raise_accessor_declaration();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_accessor_declarationContext : ParserRuleContext {
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(RSharpParser.ADD, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Add_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAdd_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAdd_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_accessor_declarationContext add_accessor_declaration() {
		Add_accessor_declarationContext _localctx = new Add_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_add_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1651;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1650; attributes();
				}
			}

			State = 1654;
			_la = _input.La(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (FRIEND - 48)) | (1L << (PRIVATE - 48)) | (1L << (PROTECTED - 48)))) != 0)) {
				{
				State = 1653; accessor_modifier();
				}
			}

			State = 1656; Match(ADD);
			State = 1657; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_accessor_declarationContext : ParserRuleContext {
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(RSharpParser.REMOVE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Remove_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterRemove_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitRemove_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Remove_accessor_declarationContext remove_accessor_declaration() {
		Remove_accessor_declarationContext _localctx = new Remove_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_remove_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1660;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1659; attributes();
				}
			}

			State = 1663;
			_la = _input.La(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (FRIEND - 48)) | (1L << (PRIVATE - 48)) | (1L << (PROTECTED - 48)))) != 0)) {
				{
				State = 1662; accessor_modifier();
				}
			}

			State = 1665; Match(REMOVE);
			State = 1666; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_accessor_declarationContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode RAISE() { return GetToken(RSharpParser.RAISE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Raise_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterRaise_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitRaise_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_accessor_declarationContext raise_accessor_declaration() {
		Raise_accessor_declarationContext _localctx = new Raise_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_raise_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1668; attributes();
				}
			}

			State = 1671; Match(RAISE);
			State = 1672; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_operatorContext : ParserRuleContext {
		public ITerminalNode BINARY_OPERATOR_LITERAL() { return GetToken(RSharpParser.BINARY_OPERATOR_LITERAL, 0); }
		public ITerminalNode FALSE() { return GetToken(RSharpParser.FALSE, 0); }
		public ITerminalNode OP_RIGHT_SHIFT() { return GetToken(RSharpParser.OP_RIGHT_SHIFT, 0); }
		public ITerminalNode TRUE() { return GetToken(RSharpParser.TRUE, 0); }
		public ITerminalNode OP_EQ() { return GetToken(RSharpParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(RSharpParser.OP_NE, 0); }
		public ITerminalNode UNARY_OPERATOR_LITERAL() { return GetToken(RSharpParser.UNARY_OPERATOR_LITERAL, 0); }
		public ITerminalNode BANG() { return GetToken(RSharpParser.BANG, 0); }
		public Overloadable_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterOverloadable_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitOverloadable_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadable_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_operatorContext overloadable_operator() {
		Overloadable_operatorContext _localctx = new Overloadable_operatorContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_overloadable_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1674;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (BINARY_OPERATOR_LITERAL - 121)) | (1L << (UNARY_OPERATOR_LITERAL - 121)) | (1L << (PLUS - 121)) | (1L << (MINUS - 121)) | (1L << (STAR - 121)) | (1L << (DIV - 121)) | (1L << (PERCENT - 121)) | (1L << (AMP - 121)) | (1L << (BITWISE_OR - 121)) | (1L << (CARET - 121)) | (1L << (BANG - 121)) | (1L << (TILDE - 121)) | (1L << (LT - 121)) | (1L << (GT - 121)) | (1L << (OP_INC - 121)) | (1L << (OP_DEC - 121)) | (1L << (OP_EQ - 121)) | (1L << (OP_NE - 121)) | (1L << (OP_LE - 121)) | (1L << (OP_GE - 121)) | (1L << (OP_LEFT_SHIFT - 121)) | (1L << (OP_RIGHT_SHIFT - 121)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversion_operator_declaratorContext : ParserRuleContext {
		public ITerminalNode IMPLICIT() { return GetToken(RSharpParser.IMPLICIT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(RSharpParser.EXPLICIT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(RSharpParser.OPERATOR, 0); }
		public Method_modifiersContext method_modifiers() {
			return GetRuleContext<Method_modifiersContext>(0);
		}
		public Conversion_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterConversion_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitConversion_operator_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion_operator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conversion_operator_declaratorContext conversion_operator_declarator() {
		Conversion_operator_declaratorContext _localctx = new Conversion_operator_declaratorContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_conversion_operator_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1677;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1676; attributes();
				}
			}

			State = 1680;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INLINE) | (1L << FRIEND) | (1L << SYNC) | (1L << NEW) | (1L << OVERRIDE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (STATIC - 65)) | (1L << (SUPERSEDE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				State = 1679; method_modifiers();
				}
			}

			State = 1682;
			_la = _input.La(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1683; Match(OPERATOR);
			State = 1684; type();
			State = 1685; Match(OPEN_PARENS);
			State = 1686; arg_declaration();
			State = 1687; Match(CLOSE_PARENS);
			State = 1688; method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_initializerContext : ParserRuleContext {
		public ITerminalNode SUPER() { return GetToken(RSharpParser.SUPER, 0); }
		public ITerminalNode SELF() { return GetToken(RSharpParser.SELF, 0); }
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Constructor_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_initializerContext constructor_initializer() {
		Constructor_initializerContext _localctx = new Constructor_initializerContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_constructor_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1690; Match(COLON);
			State = 1691;
			_la = _input.La(1);
			if ( !(_la==SUPER || _la==SELF) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1692; Match(OPEN_PARENS);
			State = 1694;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON) | (1L << OUT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (OPEN_PARENS - 132)) | (1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (OP_PARITY - 132)) | (1L << (OP_ZERO - 132)))) != 0)) {
				{
				State = 1693; argument_list();
				}
			}

			State = 1696; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_body);
		try {
			State = 1700;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1698; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1699; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_interfacesContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Struct_interfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_interfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_interfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_interfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_interfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_interfacesContext struct_interfaces() {
		Struct_interfacesContext _localctx = new Struct_interfacesContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_struct_interfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702; Match(COLON);
			State = 1703; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public Common_member_declarationContext[] common_member_declaration() {
			return GetRuleContexts<Common_member_declarationContext>();
		}
		public Common_member_declarationContext common_member_declaration(int i) {
			return GetRuleContext<Common_member_declarationContext>(i);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_struct_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1705; Match(OPEN_BRACE);
			State = 1709;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (ABSTRACT - 8)) | (1L << (ADD - 8)) | (1L << (ARGLIST - 8)) | (1L << (BOOL - 8)) | (1L << (BYTE - 8)) | (1L << (CHAR - 8)) | (1L << (CONST - 8)) | (1L << (COMPLEX - 8)) | (1L << (VLONG - 8)) | (1L << (DOUBLE - 8)) | (1L << (EVENT - 8)) | (1L << (EXPLICIT - 8)) | (1L << (EXTERN - 8)) | (1L << (FLOAT - 8)) | (1L << (GET - 8)) | (1L << (IMPLICIT - 8)) | (1L << (INLINE - 8)) | (1L << (INT - 8)) | (1L << (FRIEND - 8)) | (1L << (SYNC - 8)) | (1L << (LONG - 8)) | (1L << (NAMEOF - 8)) | (1L << (NEW - 8)) | (1L << (MIXIN - 8)) | (1L << (OBJECT - 8)) | (1L << (ON - 8)) | (1L << (OVERRIDE - 8)) | (1L << (PARTIAL - 8)) | (1L << (PRIVATE - 8)) | (1L << (PROTECTED - 8)) | (1L << (PUBLIC - 8)) | (1L << (RAISE - 8)) | (1L << (READONLY - 8)) | (1L << (REMOVE - 8)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (SBYTE - 73)) | (1L << (SET - 73)) | (1L << (SHORT - 73)) | (1L << (ADRESSOF - 73)) | (1L << (STATIC - 73)) | (1L << (STRING - 73)) | (1L << (SELF - 73)) | (1L << (SUPERSEDE - 73)) | (1L << (UINT - 73)) | (1L << (ULONG - 73)) | (1L << (USHORT - 73)) | (1L << (VIRTUAL - 73)) | (1L << (VOID - 73)) | (1L << (WHERE - 73)) | (1L << (SELECT - 73)) | (1L << (ASCENDING - 73)) | (1L << (BY - 73)) | (1L << (DESCENDING - 73)) | (1L << (EQUALS - 73)) | (1L << (FROM - 73)) | (1L << (GROUP - 73)) | (1L << (INTO - 73)) | (1L << (JOIN - 73)) | (1L << (LET - 73)) | (1L << (ORDERBY - 73)) | (1L << (IDENTIFIER - 73)) | (1L << (OPEN_BRACKET - 73)))) != 0)) {
				{
				{
				State = 1706; common_member_declaration();
				}
				}
				State = 1711;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1712; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		public ITerminalNode STAR(int i) {
			return GetToken(RSharpParser.STAR, i);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public ITerminalNode[] INTERR() { return GetTokens(RSharpParser.INTERR); }
		public ITerminalNode[] STAR() { return GetTokens(RSharpParser.STAR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(RSharpParser.INTERR, i);
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714; base_type();
			State = 1722;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1718;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 1715;
					_la = _input.La(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					}
					State = 1720;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1721; rank_specifier();
				}
				}
				State = 1724;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (OPEN_BRACKET - 130)) | (1L << (STAR - 130)) | (1L << (INTERR - 130)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifierContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(RSharpParser.OPEN_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(RSharpParser.CLOSE_BRACKET, 0); }
		public Rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterRank_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitRank_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRank_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifierContext rank_specifier() {
		Rank_specifierContext _localctx = new Rank_specifierContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1726; Match(OPEN_BRACKET);
			State = 1730;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1727; Match(COMMA);
				}
				}
				State = 1732;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1733; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		public Variable_initializerContext[] variable_initializer() {
			return GetRuleContexts<Variable_initializerContext>();
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public Variable_initializerContext variable_initializer(int i) {
			return GetRuleContext<Variable_initializerContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterArray_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitArray_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_array_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1735; Match(OPEN_BRACE);
			State = 1747;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OPEN_BRACE - 128)) | (1L << (OPEN_PARENS - 128)) | (1L << (PLUS - 128)) | (1L << (MINUS - 128)) | (1L << (STAR - 128)) | (1L << (AMP - 128)) | (1L << (BANG - 128)) | (1L << (TILDE - 128)) | (1L << (OP_INC - 128)) | (1L << (OP_DEC - 128)) | (1L << (OP_PARITY - 128)) | (1L << (OP_ZERO - 128)))) != 0)) {
				{
				State = 1736; variable_initializer();
				State = 1741;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,179,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1737; Match(COMMA);
						State = 1738; variable_initializer();
						}
						} 
					}
					State = 1743;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,179,_ctx);
				}
				State = 1745;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1744; Match(COMMA);
					}
				}

				}
			}

			State = 1749; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_baseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Interface_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_baseContext interface_base() {
		Interface_baseContext _localctx = new Interface_baseContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_interface_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1751; Match(COLON);
			State = 1752; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_bodyContext : ParserRuleContext {
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public Interface_member_declarationContext[] interface_member_declaration() {
			return GetRuleContexts<Interface_member_declarationContext>();
		}
		public Interface_member_declarationContext interface_member_declaration(int i) {
			return GetRuleContext<Interface_member_declarationContext>(i);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public Interface_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_bodyContext interface_body() {
		Interface_bodyContext _localctx = new Interface_bodyContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_interface_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754; Match(OPEN_BRACE);
			State = 1758;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & ((1L << (ADD - 9)) | (1L << (ARGLIST - 9)) | (1L << (BOOL - 9)) | (1L << (BYTE - 9)) | (1L << (CHAR - 9)) | (1L << (COMPLEX - 9)) | (1L << (VLONG - 9)) | (1L << (DOUBLE - 9)) | (1L << (EVENT - 9)) | (1L << (FLOAT - 9)) | (1L << (GET - 9)) | (1L << (INT - 9)) | (1L << (LONG - 9)) | (1L << (NAMEOF - 9)) | (1L << (NEW - 9)) | (1L << (OBJECT - 9)) | (1L << (ON - 9)) | (1L << (PARTIAL - 9)) | (1L << (RAISE - 9)) | (1L << (REMOVE - 9)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (SBYTE - 73)) | (1L << (SET - 73)) | (1L << (SHORT - 73)) | (1L << (ADRESSOF - 73)) | (1L << (STRING - 73)) | (1L << (UINT - 73)) | (1L << (ULONG - 73)) | (1L << (UNSAFE - 73)) | (1L << (USHORT - 73)) | (1L << (VOID - 73)) | (1L << (WHERE - 73)) | (1L << (SELECT - 73)) | (1L << (ASCENDING - 73)) | (1L << (BY - 73)) | (1L << (DESCENDING - 73)) | (1L << (EQUALS - 73)) | (1L << (FROM - 73)) | (1L << (GROUP - 73)) | (1L << (INTO - 73)) | (1L << (JOIN - 73)) | (1L << (LET - 73)) | (1L << (ORDERBY - 73)) | (1L << (IDENTIFIER - 73)) | (1L << (OPEN_BRACKET - 73)))) != 0)) {
				{
				{
				State = 1755; interface_member_declaration();
				}
				}
				State = 1760;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1761; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationContext : ParserRuleContext {
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode SELF() { return GetToken(RSharpParser.SELF, 0); }
		public ITerminalNode UNSAFE() { return GetToken(RSharpParser.UNSAFE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(RSharpParser.NEW, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(RSharpParser.VOID, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(RSharpParser.EVENT, 0); }
		public Interface_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationContext interface_member_declaration() {
		Interface_member_declarationContext _localctx = new Interface_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_interface_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1764;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1763; attributes();
				}
			}

			State = 1767;
			_la = _input.La(1);
			if (_la==NEW) {
				{
				State = 1766; Match(NEW);
				}
			}

			State = 1822;
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				State = 1770;
				_la = _input.La(1);
				if (_la==UNSAFE) {
					{
					State = 1769; Match(UNSAFE);
					}
				}

				State = 1772; type();
				State = 1800;
				switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
				case 1:
					{
					State = 1773; identifier();
					State = 1775;
					_la = _input.La(1);
					if (_la==LT) {
						{
						State = 1774; type_parameter_list();
						}
					}

					State = 1777; Match(OPEN_PARENS);
					State = 1779;
					_la = _input.La(1);
					if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & ((1L << (ADD - 9)) | (1L << (ARGLIST - 9)) | (1L << (BOOL - 9)) | (1L << (BYTE - 9)) | (1L << (CHAR - 9)) | (1L << (COMPLEX - 9)) | (1L << (VLONG - 9)) | (1L << (DOUBLE - 9)) | (1L << (FLOAT - 9)) | (1L << (GET - 9)) | (1L << (INT - 9)) | (1L << (LONG - 9)) | (1L << (NAMEOF - 9)) | (1L << (OBJECT - 9)) | (1L << (ON - 9)) | (1L << (OUT - 9)) | (1L << (PARAMS - 9)) | (1L << (PARTIAL - 9)) | (1L << (RAISE - 9)) | (1L << (REF - 9)) | (1L << (REMOVE - 9)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (SBYTE - 73)) | (1L << (SET - 73)) | (1L << (SHORT - 73)) | (1L << (ADRESSOF - 73)) | (1L << (STRING - 73)) | (1L << (SELF - 73)) | (1L << (UINT - 73)) | (1L << (ULONG - 73)) | (1L << (USHORT - 73)) | (1L << (VOID - 73)) | (1L << (WHERE - 73)) | (1L << (SELECT - 73)) | (1L << (ASCENDING - 73)) | (1L << (BY - 73)) | (1L << (DESCENDING - 73)) | (1L << (EQUALS - 73)) | (1L << (FROM - 73)) | (1L << (GROUP - 73)) | (1L << (INTO - 73)) | (1L << (JOIN - 73)) | (1L << (LET - 73)) | (1L << (ORDERBY - 73)) | (1L << (IDENTIFIER - 73)) | (1L << (OPEN_BRACKET - 73)))) != 0)) {
						{
						State = 1778; formal_parameter_list();
						}
					}

					State = 1781; Match(CLOSE_PARENS);
					State = 1783;
					_la = _input.La(1);
					if (_la==WHERE) {
						{
						State = 1782; type_parameter_constraints_clauses();
						}
					}

					State = 1785; Match(SEMICOLON);
					}
					break;

				case 2:
					{
					State = 1787; identifier();
					State = 1788; Match(OPEN_BRACE);
					State = 1789; interface_accessors();
					State = 1790; Match(CLOSE_BRACE);
					}
					break;

				case 3:
					{
					State = 1792; Match(SELF);
					State = 1793; Match(OPEN_BRACKET);
					State = 1794; formal_parameter_list();
					State = 1795; Match(CLOSE_BRACKET);
					State = 1796; Match(OPEN_BRACE);
					State = 1797; interface_accessors();
					State = 1798; Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1802; Match(VOID);
				State = 1803; identifier();
				State = 1805;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1804; type_parameter_list();
					}
				}

				State = 1807; Match(OPEN_PARENS);
				State = 1809;
				_la = _input.La(1);
				if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & ((1L << (ADD - 9)) | (1L << (ARGLIST - 9)) | (1L << (BOOL - 9)) | (1L << (BYTE - 9)) | (1L << (CHAR - 9)) | (1L << (COMPLEX - 9)) | (1L << (VLONG - 9)) | (1L << (DOUBLE - 9)) | (1L << (FLOAT - 9)) | (1L << (GET - 9)) | (1L << (INT - 9)) | (1L << (LONG - 9)) | (1L << (NAMEOF - 9)) | (1L << (OBJECT - 9)) | (1L << (ON - 9)) | (1L << (OUT - 9)) | (1L << (PARAMS - 9)) | (1L << (PARTIAL - 9)) | (1L << (RAISE - 9)) | (1L << (REF - 9)) | (1L << (REMOVE - 9)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (SBYTE - 73)) | (1L << (SET - 73)) | (1L << (SHORT - 73)) | (1L << (ADRESSOF - 73)) | (1L << (STRING - 73)) | (1L << (SELF - 73)) | (1L << (UINT - 73)) | (1L << (ULONG - 73)) | (1L << (USHORT - 73)) | (1L << (VOID - 73)) | (1L << (WHERE - 73)) | (1L << (SELECT - 73)) | (1L << (ASCENDING - 73)) | (1L << (BY - 73)) | (1L << (DESCENDING - 73)) | (1L << (EQUALS - 73)) | (1L << (FROM - 73)) | (1L << (GROUP - 73)) | (1L << (INTO - 73)) | (1L << (JOIN - 73)) | (1L << (LET - 73)) | (1L << (ORDERBY - 73)) | (1L << (IDENTIFIER - 73)) | (1L << (OPEN_BRACKET - 73)))) != 0)) {
					{
					State = 1808; formal_parameter_list();
					}
				}

				State = 1811; Match(CLOSE_PARENS);
				State = 1813;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1812; type_parameter_constraints_clauses();
					}
				}

				State = 1815; Match(SEMICOLON);
				}
				break;

			case 3:
				{
				State = 1817; Match(EVENT);
				State = 1818; type();
				State = 1819; identifier();
				State = 1820; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_accessorsContext : ParserRuleContext {
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public ITerminalNode SET() { return GetToken(RSharpParser.SET, 0); }
		public ITerminalNode GET() { return GetToken(RSharpParser.GET, 0); }
		public Interface_accessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_accessors; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_accessors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_accessors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_accessors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_accessorsContext interface_accessors() {
		Interface_accessorsContext _localctx = new Interface_accessorsContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_interface_accessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1825;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1824; attributes();
				}
			}

			State = 1845;
			switch (_input.La(1)) {
			case GET:
				{
				State = 1827; Match(GET);
				State = 1828; Match(SEMICOLON);
				State = 1834;
				_la = _input.La(1);
				if (_la==SET || _la==OPEN_BRACKET) {
					{
					State = 1830;
					_la = _input.La(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 1829; attributes();
						}
					}

					State = 1832; Match(SET);
					State = 1833; Match(SEMICOLON);
					}
				}

				}
				break;
			case SET:
				{
				State = 1836; Match(SET);
				State = 1837; Match(SEMICOLON);
				State = 1843;
				_la = _input.La(1);
				if (_la==GET || _la==OPEN_BRACKET) {
					{
					State = 1839;
					_la = _input.La(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 1838; attributes();
						}
					}

					State = 1841; Match(GET);
					State = 1842; Match(SEMICOLON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_baseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Enum_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_baseContext enum_base() {
		Enum_baseContext _localctx = new Enum_baseContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_enum_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1847; Match(COLON);
			State = 1848; integral_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_bodyContext : ParserRuleContext {
		public Enum_member_declarationContext enum_member_declaration(int i) {
			return GetRuleContext<Enum_member_declarationContext>(i);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Enum_member_declarationContext[] enum_member_declaration() {
			return GetRuleContexts<Enum_member_declarationContext>();
		}
		public Enum_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_bodyContext enum_body() {
		Enum_bodyContext _localctx = new Enum_bodyContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_enum_body);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1850; Match(OPEN_BRACE);
			State = 1862;
			_la = _input.La(1);
			if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & ((1L << (ADD - 9)) | (1L << (ARGLIST - 9)) | (1L << (GET - 9)) | (1L << (NAMEOF - 9)) | (1L << (ON - 9)) | (1L << (PARTIAL - 9)) | (1L << (RAISE - 9)) | (1L << (REMOVE - 9)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (SET - 75)) | (1L << (ADRESSOF - 75)) | (1L << (WHERE - 75)) | (1L << (SELECT - 75)) | (1L << (ASCENDING - 75)) | (1L << (BY - 75)) | (1L << (DESCENDING - 75)) | (1L << (EQUALS - 75)) | (1L << (FROM - 75)) | (1L << (GROUP - 75)) | (1L << (INTO - 75)) | (1L << (JOIN - 75)) | (1L << (LET - 75)) | (1L << (ORDERBY - 75)) | (1L << (IDENTIFIER - 75)) | (1L << (OPEN_BRACKET - 75)))) != 0)) {
				{
				State = 1851; enum_member_declaration();
				State = 1856;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,200,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1852; Match(COMMA);
						State = 1853; enum_member_declaration();
						}
						} 
					}
					State = 1858;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,200,_ctx);
				}
				State = 1860;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1859; Match(COMMA);
					}
				}

				}
			}

			State = 1864; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(RSharpParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Enum_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationContext enum_member_declaration() {
		Enum_member_declarationContext _localctx = new Enum_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_enum_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1867;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1866; attributes();
				}
			}

			State = 1869; identifier();
			State = 1872;
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1870; Match(ASSIGNMENT);
				State = 1871; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(RSharpParser.OPEN_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(RSharpParser.COMMA, 0); }
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public Global_attribute_targetContext global_attribute_target() {
			return GetRuleContext<Global_attribute_targetContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(RSharpParser.CLOSE_BRACKET, 0); }
		public Global_attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionContext global_attribute_section() {
		Global_attribute_sectionContext _localctx = new Global_attribute_sectionContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_global_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874; Match(OPEN_BRACKET);
			State = 1875; global_attribute_target();
			State = 1876; Match(COLON);
			State = 1877; attribute_list();
			State = 1879;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1878; Match(COMMA);
				}
			}

			State = 1881; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Global_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_targetContext global_attribute_target() {
		Global_attribute_targetContext _localctx = new Global_attribute_targetContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_global_attribute_target);
		try {
			State = 1885;
			switch (_input.La(1)) {
			case ABSTRACT:
			case AS:
			case SUPER:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case COMPLEX:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IMPORT:
			case IN:
			case INT:
			case INTERFACE:
			case FRIEND:
			case IS:
			case SYNC:
			case LONG:
			case PACKAGE:
			case NEW:
			case NULL:
			case MIXIN:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case SELF:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNION:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1883; keyword();
				}
				break;
			case ADD:
			case ARGLIST:
			case GET:
			case NAMEOF:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case SET:
			case ADRESSOF:
			case WHERE:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1884; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public Attribute_sectionContext[] attribute_section() {
			return GetRuleContexts<Attribute_sectionContext>();
		}
		public Attribute_sectionContext attribute_section(int i) {
			return GetRuleContext<Attribute_sectionContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1888;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1887; attribute_section();
				}
				}
				State = 1890;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(RSharpParser.OPEN_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(RSharpParser.COMMA, 0); }
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Attribute_targetContext attribute_target() {
			return GetRuleContext<Attribute_targetContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(RSharpParser.CLOSE_BRACKET, 0); }
		public Attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionContext attribute_section() {
		Attribute_sectionContext _localctx = new Attribute_sectionContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1892; Match(OPEN_BRACKET);
			State = 1896;
			switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				State = 1893; attribute_target();
				State = 1894; Match(COLON);
				}
				break;
			}
			State = 1898; attribute_list();
			State = 1900;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1899; Match(COMMA);
				}
			}

			State = 1902; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_targetContext attribute_target() {
		Attribute_targetContext _localctx = new Attribute_targetContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_attribute_target);
		try {
			State = 1906;
			switch (_input.La(1)) {
			case ABSTRACT:
			case AS:
			case SUPER:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case COMPLEX:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IMPORT:
			case IN:
			case INT:
			case INTERFACE:
			case FRIEND:
			case IS:
			case SYNC:
			case LONG:
			case PACKAGE:
			case NEW:
			case NULL:
			case MIXIN:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case SELF:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNION:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1904; keyword();
				}
				break;
			case ADD:
			case ARGLIST:
			case GET:
			case NAMEOF:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case SET:
			case ADRESSOF:
			case WHERE:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1905; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_attribute_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908; attribute();
			State = 1913;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,211,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1909; Match(COMMA);
					State = 1910; attribute();
					}
					} 
				}
				State = 1915;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,211,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public Attribute_argumentContext attribute_argument(int i) {
			return GetRuleContext<Attribute_argumentContext>(i);
		}
		public Package_or_type_nameContext package_or_type_name() {
			return GetRuleContext<Package_or_type_nameContext>(0);
		}
		public Attribute_argumentContext[] attribute_argument() {
			return GetRuleContexts<Attribute_argumentContext>();
		}
		public ITerminalNode[] COMMA() { return GetTokens(RSharpParser.COMMA); }
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RSharpParser.COMMA, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1916; package_or_type_name();
			State = 1929;
			_la = _input.La(1);
			if (_la==OPEN_PARENS) {
				{
				State = 1917; Match(OPEN_PARENS);
				State = 1926;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (OPEN_PARENS - 132)) | (1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (OP_PARITY - 132)) | (1L << (OP_ZERO - 132)))) != 0)) {
					{
					State = 1918; attribute_argument();
					State = 1923;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1919; Match(COMMA);
						State = 1920; attribute_argument();
						}
						}
						State = 1925;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 1928; Match(CLOSE_PARENS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argumentContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(RSharpParser.COLON, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Attribute_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argumentContext attribute_argument() {
		Attribute_argumentContext _localctx = new Attribute_argumentContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_attribute_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1934;
			switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				State = 1931; identifier();
				State = 1932; Match(COLON);
				}
				break;
			}
			State = 1936; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_typeContext : ParserRuleContext {
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public ITerminalNode VOID() { return GetToken(RSharpParser.VOID, 0); }
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public Pointer_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterPointer_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitPointer_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_typeContext pointer_type() {
		Pointer_typeContext _localctx = new Pointer_typeContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_pointer_type);
		int _la;
		try {
			State = 1953;
			switch (_input.La(1)) {
			case ADD:
			case ARGLIST:
			case BOOL:
			case BYTE:
			case CHAR:
			case COMPLEX:
			case VLONG:
			case DOUBLE:
			case FLOAT:
			case GET:
			case INT:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case SBYTE:
			case SET:
			case SHORT:
			case ADRESSOF:
			case STRING:
			case UINT:
			case ULONG:
			case USHORT:
			case WHERE:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1940;
				switch (_input.La(1)) {
				case BOOL:
				case BYTE:
				case CHAR:
				case COMPLEX:
				case VLONG:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SBYTE:
				case SHORT:
				case UINT:
				case ULONG:
				case USHORT:
					{
					State = 1938; simple_type();
					}
					break;
				case ADD:
				case ARGLIST:
				case GET:
				case NAMEOF:
				case OBJECT:
				case ON:
				case PARTIAL:
				case RAISE:
				case REMOVE:
				case SET:
				case ADRESSOF:
				case STRING:
				case WHERE:
				case SELECT:
				case ASCENDING:
				case BY:
				case DESCENDING:
				case EQUALS:
				case FROM:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case ORDERBY:
				case IDENTIFIER:
					{
					State = 1939; class_type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1946;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 1944;
					switch (_input.La(1)) {
					case OPEN_BRACKET:
						{
						State = 1942; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 1943; Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 1948;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1949; Match(STAR);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1951; Match(VOID);
				State = 1952; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(RSharpParser.INTEGER_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(RSharpParser.NULL, 0); }
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(RSharpParser.HEX_INTEGER_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(RSharpParser.CHARACTER_LITERAL, 0); }
		public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public ITerminalNode OCT_INTEGER_LITERAL() { return GetToken(RSharpParser.OCT_INTEGER_LITERAL, 0); }
		public ITerminalNode BIN_INTEGER_LITERAL() { return GetToken(RSharpParser.BIN_INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(RSharpParser.REAL_LITERAL, 0); }
		public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_literal);
		try {
			State = 1964;
			switch (_input.La(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1955; boolean_literal();
				}
				break;
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1956; string_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1957; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1958; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case OCT_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1959; Match(OCT_INTEGER_LITERAL);
				}
				break;
			case BIN_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1960; Match(BIN_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1961; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1962; Match(CHARACTER_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1963; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public ITerminalNode FALSE() { return GetToken(RSharpParser.FALSE, 0); }
		public ITerminalNode TRUE() { return GetToken(RSharpParser.TRUE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1966;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		public ITerminalNode REGULAR_STRING() { return GetToken(RSharpParser.REGULAR_STRING, 0); }
		public Interpolated_regular_stringContext interpolated_regular_string() {
			return GetRuleContext<Interpolated_regular_stringContext>(0);
		}
		public ITerminalNode VERBATIUM_STRING() { return GetToken(RSharpParser.VERBATIUM_STRING, 0); }
		public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
			return GetRuleContext<Interpolated_verbatium_stringContext>(0);
		}
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_string_literal);
		try {
			State = 1972;
			switch (_input.La(1)) {
			case INTERPOLATED_REGULAR_STRING_START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1968; interpolated_regular_string();
				}
				break;
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1969; interpolated_verbatium_string();
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1970; Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1971; Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_stringContext : ParserRuleContext {
		public ITerminalNode INTERPOLATED_REGULAR_STRING_START() { return GetToken(RSharpParser.INTERPOLATED_REGULAR_STRING_START, 0); }
		public Interpolated_regular_string_partContext interpolated_regular_string_part(int i) {
			return GetRuleContext<Interpolated_regular_string_partContext>(i);
		}
		public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(RSharpParser.DOUBLE_QUOTE_INSIDE, 0); }
		public Interpolated_regular_string_partContext[] interpolated_regular_string_part() {
			return GetRuleContexts<Interpolated_regular_string_partContext>();
		}
		public Interpolated_regular_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_regular_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_stringContext interpolated_regular_string() {
		Interpolated_regular_stringContext _localctx = new Interpolated_regular_stringContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_interpolated_regular_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974; Match(INTERPOLATED_REGULAR_STRING_START);
			State = 1978;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (OPEN_PARENS - 132)) | (1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (OP_PARITY - 132)) | (1L << (OP_ZERO - 132)) | (1L << (DOUBLE_CURLY_INSIDE - 132)) | (1L << (REGULAR_CHAR_INSIDE - 132)) | (1L << (REGULAR_STRING_INSIDE - 132)))) != 0)) {
				{
				{
				State = 1975; interpolated_regular_string_part();
				}
				}
				State = 1980;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1981; Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_stringContext : ParserRuleContext {
		public Interpolated_verbatium_string_partContext[] interpolated_verbatium_string_part() {
			return GetRuleContexts<Interpolated_verbatium_string_partContext>();
		}
		public ITerminalNode INTERPOLATED_VERBATIUM_STRING_START() { return GetToken(RSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0); }
		public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(RSharpParser.DOUBLE_QUOTE_INSIDE, 0); }
		public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part(int i) {
			return GetRuleContext<Interpolated_verbatium_string_partContext>(i);
		}
		public Interpolated_verbatium_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_verbatium_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
		Interpolated_verbatium_stringContext _localctx = new Interpolated_verbatium_stringContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_interpolated_verbatium_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1983; Match(INTERPOLATED_VERBATIUM_STRING_START);
			State = 1987;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (OPEN_PARENS - 132)) | (1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (OP_PARITY - 132)) | (1L << (OP_ZERO - 132)) | (1L << (DOUBLE_CURLY_INSIDE - 132)) | (1L << (VERBATIUM_DOUBLE_QUOTE_INSIDE - 132)) | (1L << (VERBATIUM_INSIDE_STRING - 132)))) != 0)) {
				{
				{
				State = 1984; interpolated_verbatium_string_part();
				}
				}
				State = 1989;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1990; Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_string_partContext : ParserRuleContext {
		public ITerminalNode REGULAR_CHAR_INSIDE() { return GetToken(RSharpParser.REGULAR_CHAR_INSIDE, 0); }
		public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		public ITerminalNode REGULAR_STRING_INSIDE() { return GetToken(RSharpParser.REGULAR_STRING_INSIDE, 0); }
		public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(RSharpParser.DOUBLE_CURLY_INSIDE, 0); }
		public Interpolated_regular_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_regular_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_string_partContext interpolated_regular_string_part() {
		Interpolated_regular_string_partContext _localctx = new Interpolated_regular_string_partContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_interpolated_regular_string_part);
		try {
			State = 1996;
			switch (_input.La(1)) {
			case ADD:
			case ARGLIST:
			case SUPER:
			case BOOL:
			case BYTE:
			case CHAR:
			case CHECKED:
			case VLONG:
			case DEFAULT:
			case DELEGATE:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case GET:
			case INT:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case SBYTE:
			case SET:
			case SHORT:
			case SIZEOF:
			case ADRESSOF:
			case STRING:
			case SELF:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case OCT_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case UNARY_OPERATOR_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_PARITY:
			case OP_ZERO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1992; interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1993; Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case REGULAR_CHAR_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1994; Match(REGULAR_CHAR_INSIDE);
				}
				break;
			case REGULAR_STRING_INSIDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1995; Match(REGULAR_STRING_INSIDE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_string_partContext : ParserRuleContext {
		public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		public ITerminalNode VERBATIUM_INSIDE_STRING() { return GetToken(RSharpParser.VERBATIUM_INSIDE_STRING, 0); }
		public ITerminalNode VERBATIUM_DOUBLE_QUOTE_INSIDE() { return GetToken(RSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0); }
		public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(RSharpParser.DOUBLE_CURLY_INSIDE, 0); }
		public Interpolated_verbatium_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_verbatium_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part() {
		Interpolated_verbatium_string_partContext _localctx = new Interpolated_verbatium_string_partContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_interpolated_verbatium_string_part);
		try {
			State = 2002;
			switch (_input.La(1)) {
			case ADD:
			case ARGLIST:
			case SUPER:
			case BOOL:
			case BYTE:
			case CHAR:
			case CHECKED:
			case VLONG:
			case DEFAULT:
			case DELEGATE:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case GET:
			case INT:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case PARTIAL:
			case RAISE:
			case REMOVE:
			case SBYTE:
			case SET:
			case SHORT:
			case SIZEOF:
			case ADRESSOF:
			case STRING:
			case SELF:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case SELECT:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case EQUALS:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ORDERBY:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case OCT_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case UNARY_OPERATOR_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_PARITY:
			case OP_ZERO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1998; interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1999; Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case VERBATIUM_DOUBLE_QUOTE_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2000; Match(VERBATIUM_DOUBLE_QUOTE_INSIDE);
				}
				break;
			case VERBATIUM_INSIDE_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2001; Match(VERBATIUM_INSIDE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_string_expressionContext : ParserRuleContext {
		public ITerminalNode[] FORMAT_STRING() { return GetTokens(RSharpParser.FORMAT_STRING); }
		public ITerminalNode FORMAT_STRING(int i) {
			return GetToken(RSharpParser.FORMAT_STRING, i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public Interpolated_string_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_string_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_string_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_string_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_string_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_string_expressionContext interpolated_string_expression() {
		Interpolated_string_expressionContext _localctx = new Interpolated_string_expressionContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_interpolated_string_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2004; expression();
			State = 2009;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2005; Match(COMMA);
				State = 2006; expression();
				}
				}
				State = 2011;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2018;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2012; Match(COLON);
				State = 2014;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2013; Match(FORMAT_STRING);
					}
					}
					State = 2016;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==FORMAT_STRING );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(RSharpParser.CASE, 0); }
		public ITerminalNode UNION() { return GetToken(RSharpParser.UNION, 0); }
		public ITerminalNode SUPER() { return GetToken(RSharpParser.SUPER, 0); }
		public ITerminalNode ELSE() { return GetToken(RSharpParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(RSharpParser.IF, 0); }
		public ITerminalNode ULONG() { return GetToken(RSharpParser.ULONG, 0); }
		public ITerminalNode FALSE() { return GetToken(RSharpParser.FALSE, 0); }
		public ITerminalNode READONLY() { return GetToken(RSharpParser.READONLY, 0); }
		public ITerminalNode SWITCH() { return GetToken(RSharpParser.SWITCH, 0); }
		public ITerminalNode CATCH() { return GetToken(RSharpParser.CATCH, 0); }
		public ITerminalNode USHORT() { return GetToken(RSharpParser.USHORT, 0); }
		public ITerminalNode PRIVATE() { return GetToken(RSharpParser.PRIVATE, 0); }
		public ITerminalNode SHORT() { return GetToken(RSharpParser.SHORT, 0); }
		public ITerminalNode TRY() { return GetToken(RSharpParser.TRY, 0); }
		public ITerminalNode RETURN() { return GetToken(RSharpParser.RETURN, 0); }
		public ITerminalNode NULL() { return GetToken(RSharpParser.NULL, 0); }
		public ITerminalNode UINT() { return GetToken(RSharpParser.UINT, 0); }
		public ITerminalNode ENUM() { return GetToken(RSharpParser.ENUM, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(RSharpParser.OVERRIDE, 0); }
		public ITerminalNode EVENT() { return GetToken(RSharpParser.EVENT, 0); }
		public ITerminalNode CONST() { return GetToken(RSharpParser.CONST, 0); }
		public ITerminalNode PARAMS() { return GetToken(RSharpParser.PARAMS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(RSharpParser.UNSAFE, 0); }
		public ITerminalNode PACKAGE() { return GetToken(RSharpParser.PACKAGE, 0); }
		public ITerminalNode FOR() { return GetToken(RSharpParser.FOR, 0); }
		public ITerminalNode BYTE() { return GetToken(RSharpParser.BYTE, 0); }
		public ITerminalNode STRING() { return GetToken(RSharpParser.STRING, 0); }
		public ITerminalNode USING() { return GetToken(RSharpParser.USING, 0); }
		public ITerminalNode COMPLEX() { return GetToken(RSharpParser.COMPLEX, 0); }
		public ITerminalNode DOUBLE() { return GetToken(RSharpParser.DOUBLE, 0); }
		public ITerminalNode INTERFACE() { return GetToken(RSharpParser.INTERFACE, 0); }
		public ITerminalNode FLOAT() { return GetToken(RSharpParser.FLOAT, 0); }
		public ITerminalNode IN() { return GetToken(RSharpParser.IN, 0); }
		public ITerminalNode SEALED() { return GetToken(RSharpParser.SEALED, 0); }
		public ITerminalNode IS() { return GetToken(RSharpParser.IS, 0); }
		public ITerminalNode CONTINUE() { return GetToken(RSharpParser.CONTINUE, 0); }
		public ITerminalNode VOID() { return GetToken(RSharpParser.VOID, 0); }
		public ITerminalNode REF() { return GetToken(RSharpParser.REF, 0); }
		public ITerminalNode PUBLIC() { return GetToken(RSharpParser.PUBLIC, 0); }
		public ITerminalNode CLASS() { return GetToken(RSharpParser.CLASS, 0); }
		public ITerminalNode OUT() { return GetToken(RSharpParser.OUT, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(RSharpParser.IMPLICIT, 0); }
		public ITerminalNode BREAK() { return GetToken(RSharpParser.BREAK, 0); }
		public ITerminalNode FRIEND() { return GetToken(RSharpParser.FRIEND, 0); }
		public ITerminalNode SELF() { return GetToken(RSharpParser.SELF, 0); }
		public ITerminalNode STRUCT() { return GetToken(RSharpParser.STRUCT, 0); }
		public ITerminalNode OBJECT() { return GetToken(RSharpParser.OBJECT, 0); }
		public ITerminalNode THROW() { return GetToken(RSharpParser.THROW, 0); }
		public ITerminalNode INT() { return GetToken(RSharpParser.INT, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(RSharpParser.UNCHECKED, 0); }
		public ITerminalNode AS() { return GetToken(RSharpParser.AS, 0); }
		public ITerminalNode EXTERN() { return GetToken(RSharpParser.EXTERN, 0); }
		public ITerminalNode OPERATOR() { return GetToken(RSharpParser.OPERATOR, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(RSharpParser.ABSTRACT, 0); }
		public ITerminalNode CHECKED() { return GetToken(RSharpParser.CHECKED, 0); }
		public ITerminalNode STATIC() { return GetToken(RSharpParser.STATIC, 0); }
		public ITerminalNode DO() { return GetToken(RSharpParser.DO, 0); }
		public ITerminalNode FOREACH() { return GetToken(RSharpParser.FOREACH, 0); }
		public ITerminalNode SBYTE() { return GetToken(RSharpParser.SBYTE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(RSharpParser.PROTECTED, 0); }
		public ITerminalNode IMPORT() { return GetToken(RSharpParser.IMPORT, 0); }
		public ITerminalNode CHAR() { return GetToken(RSharpParser.CHAR, 0); }
		public ITerminalNode SIZEOF() { return GetToken(RSharpParser.SIZEOF, 0); }
		public ITerminalNode DEFAULT() { return GetToken(RSharpParser.DEFAULT, 0); }
		public ITerminalNode MIXIN() { return GetToken(RSharpParser.MIXIN, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(RSharpParser.VIRTUAL, 0); }
		public ITerminalNode BOOL() { return GetToken(RSharpParser.BOOL, 0); }
		public ITerminalNode TRUE() { return GetToken(RSharpParser.TRUE, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(RSharpParser.EXPLICIT, 0); }
		public ITerminalNode WHILE() { return GetToken(RSharpParser.WHILE, 0); }
		public ITerminalNode NEW() { return GetToken(RSharpParser.NEW, 0); }
		public ITerminalNode SYNC() { return GetToken(RSharpParser.SYNC, 0); }
		public ITerminalNode LONG() { return GetToken(RSharpParser.LONG, 0); }
		public ITerminalNode GOTO() { return GetToken(RSharpParser.GOTO, 0); }
		public ITerminalNode TYPEOF() { return GetToken(RSharpParser.TYPEOF, 0); }
		public ITerminalNode VOLATILE() { return GetToken(RSharpParser.VOLATILE, 0); }
		public ITerminalNode FINALLY() { return GetToken(RSharpParser.FINALLY, 0); }
		public ITerminalNode DELEGATE() { return GetToken(RSharpParser.DELEGATE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2020;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << AS) | (1L << SUPER) | (1L << BOOL) | (1L << BREAK) | (1L << BYTE) | (1L << CASE) | (1L << CATCH) | (1L << CHAR) | (1L << CHECKED) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << COMPLEX) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DO) | (1L << DOUBLE) | (1L << ELSE) | (1L << ENUM) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FALSE) | (1L << FINALLY) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << GOTO) | (1L << IF) | (1L << IMPLICIT) | (1L << IMPORT) | (1L << IN) | (1L << INT) | (1L << INTERFACE) | (1L << FRIEND) | (1L << IS) | (1L << SYNC) | (1L << LONG) | (1L << PACKAGE) | (1L << NEW) | (1L << NULL) | (1L << MIXIN) | (1L << OBJECT) | (1L << OPERATOR) | (1L << OUT) | (1L << OVERRIDE) | (1L << PARAMS))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REF - 65)) | (1L << (RETURN - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (SWITCH - 65)) | (1L << (SELF - 65)) | (1L << (THROW - 65)) | (1L << (TRUE - 65)) | (1L << (TRY - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNION - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (USING - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHILE - 65)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public Type_modifiersContext type_modifiers() {
			return GetRuleContext<Type_modifiersContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(RSharpParser.CLASS, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2023;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2022; attributes();
				}
			}

			State = 2026;
			_la = _input.La(1);
			if (_la==ABSTRACT || _la==FRIEND || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)))) != 0)) {
				{
				State = 2025; type_modifiers();
				}
			}

			State = 2028; Match(CLASS);
			State = 2029; identifier();
			State = 2031;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2030; type_parameter_list();
				}
			}

			State = 2034;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2033; class_base();
				}
			}

			State = 2037;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2036; type_parameter_constraints_clauses();
				}
			}

			State = 2039; class_body();
			State = 2041;
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2040; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_definitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode MIXIN() { return GetToken(RSharpParser.MIXIN, 0); }
		public Mixin_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMixin_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMixin_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_definitionContext mixin_definition() {
		Mixin_definitionContext _localctx = new Mixin_definitionContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_mixin_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2043; Match(MIXIN);
			State = 2044; identifier();
			State = 2045; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interrupt_definitionContext : ParserRuleContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(RSharpParser.INTEGER_LITERAL, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(RSharpParser.HEX_INTEGER_LITERAL, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode INTERRUPT() { return GetToken(RSharpParser.INTERRUPT, 0); }
		public Interrupt_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interrupt_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterrupt_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterrupt_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterrupt_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interrupt_definitionContext interrupt_definition() {
		Interrupt_definitionContext _localctx = new Interrupt_definitionContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_interrupt_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2048;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2047; attributes();
				}
			}

			State = 2050; Match(INTERRUPT);
			State = 2051;
			_la = _input.La(1);
			if ( !(_la==INTEGER_LITERAL || _la==HEX_INTEGER_LITERAL) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 2052; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		public Type_modifiersContext type_modifiers() {
			return GetRuleContext<Type_modifiersContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode STRUCT() { return GetToken(RSharpParser.STRUCT, 0); }
		public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_struct_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2055;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2054; attributes();
				}
			}

			State = 2058;
			_la = _input.La(1);
			if (_la==ABSTRACT || _la==FRIEND || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)))) != 0)) {
				{
				State = 2057; type_modifiers();
				}
			}

			State = 2060; Match(STRUCT);
			State = 2061; identifier();
			State = 2063;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2062; type_parameter_list();
				}
			}

			State = 2066;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2065; struct_interfaces();
				}
			}

			State = 2069;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2068; type_parameter_constraints_clauses();
				}
			}

			State = 2071; struct_body();
			State = 2073;
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2072; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_definitionContext : ParserRuleContext {
		public ITerminalNode UNION() { return GetToken(RSharpParser.UNION, 0); }
		public Type_modifiersContext type_modifiers() {
			return GetRuleContext<Type_modifiersContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Union_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterUnion_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitUnion_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Union_definitionContext union_definition() {
		Union_definitionContext _localctx = new Union_definitionContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_union_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2076;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2075; attributes();
				}
			}

			State = 2079;
			_la = _input.La(1);
			if (_la==ABSTRACT || _la==FRIEND || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)))) != 0)) {
				{
				State = 2078; type_modifiers();
				}
			}

			State = 2081; Match(UNION);
			State = 2082; identifier();
			State = 2084;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2083; type_parameter_list();
				}
			}

			State = 2087;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2086; struct_interfaces();
				}
			}

			State = 2090;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2089; type_parameter_constraints_clauses();
				}
			}

			State = 2092; struct_body();
			State = 2094;
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2093; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_definitionContext : ParserRuleContext {
		public Type_modifiersContext type_modifiers() {
			return GetRuleContext<Type_modifiersContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_baseContext interface_base() {
			return GetRuleContext<Interface_baseContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public ITerminalNode INTERFACE() { return GetToken(RSharpParser.INTERFACE, 0); }
		public Interface_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_definitionContext interface_definition() {
		Interface_definitionContext _localctx = new Interface_definitionContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_interface_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2097;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2096; attributes();
				}
			}

			State = 2100;
			_la = _input.La(1);
			if (_la==ABSTRACT || _la==FRIEND || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)))) != 0)) {
				{
				State = 2099; type_modifiers();
				}
			}

			State = 2102; Match(INTERFACE);
			State = 2103; identifier();
			State = 2105;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2104; type_parameter_list();
				}
			}

			State = 2108;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2107; interface_base();
				}
			}

			State = 2111;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2110; type_parameter_constraints_clauses();
				}
			}

			State = 2113; interface_body();
			State = 2115;
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2114; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		public Type_modifiersContext type_modifiers() {
			return GetRuleContext<Type_modifiersContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ENUM() { return GetToken(RSharpParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2118;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2117; attributes();
				}
			}

			State = 2121;
			_la = _input.La(1);
			if (_la==ABSTRACT || _la==FRIEND || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)))) != 0)) {
				{
				State = 2120; type_modifiers();
				}
			}

			State = 2123; Match(ENUM);
			State = 2124; identifier();
			State = 2126;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2125; enum_base();
				}
			}

			State = 2128; enum_body();
			State = 2130;
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2129; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_definitionContext : ParserRuleContext {
		public Type_modifiersContext type_modifiers() {
			return GetRuleContext<Type_modifiersContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public ITerminalNode DELEGATE() { return GetToken(RSharpParser.DELEGATE, 0); }
		public Delegate_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterDelegate_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitDelegate_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_definitionContext delegate_definition() {
		Delegate_definitionContext _localctx = new Delegate_definitionContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_delegate_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2133;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2132; attributes();
				}
			}

			State = 2136;
			_la = _input.La(1);
			if (_la==ABSTRACT || _la==FRIEND || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)))) != 0)) {
				{
				State = 2135; type_modifiers();
				}
			}

			State = 2138; Match(DELEGATE);
			State = 2139; return_type();
			State = 2140; identifier();
			State = 2142;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2141; type_parameter_list();
				}
			}

			State = 2144; Match(OPEN_PARENS);
			State = 2146;
			_la = _input.La(1);
			if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & ((1L << (ADD - 9)) | (1L << (ARGLIST - 9)) | (1L << (BOOL - 9)) | (1L << (BYTE - 9)) | (1L << (CHAR - 9)) | (1L << (COMPLEX - 9)) | (1L << (VLONG - 9)) | (1L << (DOUBLE - 9)) | (1L << (FLOAT - 9)) | (1L << (GET - 9)) | (1L << (INT - 9)) | (1L << (LONG - 9)) | (1L << (NAMEOF - 9)) | (1L << (OBJECT - 9)) | (1L << (ON - 9)) | (1L << (OUT - 9)) | (1L << (PARAMS - 9)) | (1L << (PARTIAL - 9)) | (1L << (RAISE - 9)) | (1L << (REF - 9)) | (1L << (REMOVE - 9)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (SBYTE - 73)) | (1L << (SET - 73)) | (1L << (SHORT - 73)) | (1L << (ADRESSOF - 73)) | (1L << (STRING - 73)) | (1L << (SELF - 73)) | (1L << (UINT - 73)) | (1L << (ULONG - 73)) | (1L << (USHORT - 73)) | (1L << (VOID - 73)) | (1L << (WHERE - 73)) | (1L << (SELECT - 73)) | (1L << (ASCENDING - 73)) | (1L << (BY - 73)) | (1L << (DESCENDING - 73)) | (1L << (EQUALS - 73)) | (1L << (FROM - 73)) | (1L << (GROUP - 73)) | (1L << (INTO - 73)) | (1L << (JOIN - 73)) | (1L << (LET - 73)) | (1L << (ORDERBY - 73)) | (1L << (IDENTIFIER - 73)) | (1L << (OPEN_BRACKET - 73)))) != 0)) {
				{
				State = 2145; formal_parameter_list();
				}
			}

			State = 2148; Match(CLOSE_PARENS);
			State = 2150;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2149; type_parameter_constraints_clauses();
				}
			}

			State = 2152; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declarationContext : ParserRuleContext {
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public Event_accessor_declarationsContext event_accessor_declarations() {
			return GetRuleContext<Event_accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(RSharpParser.EVENT, 0); }
		public Method_modifiersContext method_modifiers() {
			return GetRuleContext<Method_modifiersContext>(0);
		}
		public Event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterEvent_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitEvent_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_declarationContext event_declaration() {
		Event_declarationContext _localctx = new Event_declarationContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_event_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2155;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2154; attributes();
				}
			}

			State = 2158;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INLINE) | (1L << FRIEND) | (1L << SYNC) | (1L << NEW) | (1L << OVERRIDE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (STATIC - 65)) | (1L << (SUPERSEDE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				State = 2157; method_modifiers();
				}
			}

			State = 2160; Match(EVENT);
			State = 2161; type();
			State = 2162; member_name();
			State = 2163; Match(OPEN_BRACE);
			State = 2164; event_accessor_declarations();
			State = 2165; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public Member_modifiersContext member_modifiers() {
			return GetRuleContext<Member_modifiersContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_field_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2168;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2167; attributes();
				}
			}

			State = 2171;
			_la = _input.La(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (EXTERN - 33)) | (1L << (FRIEND - 33)) | (1L << (SYNC - 33)) | (1L << (NEW - 33)) | (1L << (OVERRIDE - 33)) | (1L << (PRIVATE - 33)) | (1L << (PROTECTED - 33)) | (1L << (PUBLIC - 33)) | (1L << (READONLY - 33)) | (1L << (STATIC - 33)) | (1L << (VIRTUAL - 33)))) != 0)) {
				{
				State = 2170; member_modifiers();
				}
			}

			State = 2173; type();
			State = 2174; variable_declarators();
			State = 2175; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(RSharpParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode RIGHT_ARROW() { return GetToken(RSharpParser.RIGHT_ARROW, 0); }
		public Method_modifiersContext method_modifiers() {
			return GetRuleContext<Method_modifiersContext>(0);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2178;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2177; attributes();
				}
			}

			State = 2181;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INLINE) | (1L << FRIEND) | (1L << SYNC) | (1L << NEW) | (1L << OVERRIDE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (STATIC - 65)) | (1L << (SUPERSEDE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				State = 2180; method_modifiers();
				}
			}

			State = 2183; type();
			State = 2184; member_name();
			State = 2198;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				{
				State = 2185; Match(OPEN_BRACE);
				State = 2186; accessor_declarations();
				State = 2187; Match(CLOSE_BRACE);
				State = 2192;
				_la = _input.La(1);
				if (_la==ASSIGNMENT) {
					{
					State = 2188; Match(ASSIGNMENT);
					State = 2189; variable_initializer();
					State = 2190; Match(SEMICOLON);
					}
				}

				}
				break;
			case RIGHT_ARROW:
				{
				State = 2194; Match(RIGHT_ARROW);
				State = 2195; expression();
				State = 2196; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(RSharpParser.CONST, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(RSharpParser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Member_modifiersContext member_modifiers() {
			return GetRuleContext<Member_modifiersContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_constant_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2200; attributes();
				}
			}

			State = 2204;
			_la = _input.La(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (EXTERN - 33)) | (1L << (FRIEND - 33)) | (1L << (SYNC - 33)) | (1L << (NEW - 33)) | (1L << (OVERRIDE - 33)) | (1L << (PRIVATE - 33)) | (1L << (PROTECTED - 33)) | (1L << (PUBLIC - 33)) | (1L << (READONLY - 33)) | (1L << (STATIC - 33)) | (1L << (VIRTUAL - 33)))) != 0)) {
				{
				State = 2203; member_modifiers();
				}
			}

			State = 2206; Match(CONST);
			State = 2207; type();
			State = 2208; constant_declarators();
			State = 2209; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declarationContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(RSharpParser.SELF, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(RSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(RSharpParser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(RSharpParser.CLOSE_BRACKET, 0); }
		public Method_modifiersContext method_modifiers() {
			return GetRuleContext<Method_modifiersContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(RSharpParser.DOT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Package_or_type_nameContext package_or_type_name() {
			return GetRuleContext<Package_or_type_nameContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(RSharpParser.OPEN_BRACE, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode RIGHT_ARROW() { return GetToken(RSharpParser.RIGHT_ARROW, 0); }
		public Indexer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterIndexer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitIndexer_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declarationContext indexer_declaration() {
		Indexer_declarationContext _localctx = new Indexer_declarationContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_indexer_declaration);
		int _la;
		try {
			State = 2255;
			switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2212;
				_la = _input.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 2211; attributes();
					}
				}

				State = 2215;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INLINE) | (1L << FRIEND) | (1L << SYNC) | (1L << NEW) | (1L << OVERRIDE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (STATIC - 65)) | (1L << (SUPERSEDE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
					{
					State = 2214; method_modifiers();
					}
				}

				State = 2217; type();
				State = 2218; Match(SELF);
				State = 2219; Match(OPEN_BRACKET);
				State = 2220; formal_parameter_list();
				State = 2221; Match(CLOSE_BRACKET);
				State = 2230;
				switch (_input.La(1)) {
				case OPEN_BRACE:
					{
					State = 2222; Match(OPEN_BRACE);
					State = 2223; accessor_declarations();
					State = 2224; Match(CLOSE_BRACE);
					}
					break;
				case RIGHT_ARROW:
					{
					State = 2226; Match(RIGHT_ARROW);
					State = 2227; expression();
					State = 2228; Match(SEMICOLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2233;
				_la = _input.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 2232; attributes();
					}
				}

				State = 2236;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INLINE) | (1L << FRIEND) | (1L << SYNC) | (1L << NEW) | (1L << OVERRIDE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (STATIC - 65)) | (1L << (SUPERSEDE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
					{
					State = 2235; method_modifiers();
					}
				}

				State = 2238; type();
				State = 2239; package_or_type_name();
				State = 2240; Match(DOT);
				State = 2241; Match(SELF);
				State = 2242; Match(OPEN_BRACKET);
				State = 2243; formal_parameter_list();
				State = 2244; Match(CLOSE_BRACKET);
				State = 2253;
				switch (_input.La(1)) {
				case OPEN_BRACE:
					{
					State = 2245; Match(OPEN_BRACE);
					State = 2246; accessor_declarations();
					State = 2247; Match(CLOSE_BRACE);
					}
					break;
				case RIGHT_ARROW:
					{
					State = 2249; Match(RIGHT_ARROW);
					State = 2250; expression();
					State = 2251; Match(SEMICOLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_definitionContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(RSharpParser.SELF, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode TILDE() { return GetToken(RSharpParser.TILDE, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Method_modifiersContext method_modifiers() {
			return GetRuleContext<Method_modifiersContext>(0);
		}
		public Destructor_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterDestructor_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitDestructor_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_definitionContext destructor_definition() {
		Destructor_definitionContext _localctx = new Destructor_definitionContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_destructor_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2258;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2257; attributes();
				}
			}

			State = 2261;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INLINE) | (1L << FRIEND) | (1L << SYNC) | (1L << NEW) | (1L << OVERRIDE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (STATIC - 65)) | (1L << (SUPERSEDE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				State = 2260; method_modifiers();
				}
			}

			State = 2263; Match(TILDE);
			State = 2264; Match(SELF);
			State = 2265; Match(OPEN_PARENS);
			State = 2266; Match(CLOSE_PARENS);
			State = 2267; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(RSharpParser.SELF, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Method_modifiersContext method_modifiers() {
			return GetRuleContext<Method_modifiersContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2270;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2269; attributes();
				}
			}

			State = 2273;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INLINE) | (1L << FRIEND) | (1L << SYNC) | (1L << NEW) | (1L << OVERRIDE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (STATIC - 65)) | (1L << (SUPERSEDE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				State = 2272; method_modifiers();
				}
			}

			State = 2275; Match(SELF);
			State = 2276; Match(OPEN_PARENS);
			State = 2278;
			_la = _input.La(1);
			if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & ((1L << (ADD - 9)) | (1L << (ARGLIST - 9)) | (1L << (BOOL - 9)) | (1L << (BYTE - 9)) | (1L << (CHAR - 9)) | (1L << (COMPLEX - 9)) | (1L << (VLONG - 9)) | (1L << (DOUBLE - 9)) | (1L << (FLOAT - 9)) | (1L << (GET - 9)) | (1L << (INT - 9)) | (1L << (LONG - 9)) | (1L << (NAMEOF - 9)) | (1L << (OBJECT - 9)) | (1L << (ON - 9)) | (1L << (OUT - 9)) | (1L << (PARAMS - 9)) | (1L << (PARTIAL - 9)) | (1L << (RAISE - 9)) | (1L << (REF - 9)) | (1L << (REMOVE - 9)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (SBYTE - 73)) | (1L << (SET - 73)) | (1L << (SHORT - 73)) | (1L << (ADRESSOF - 73)) | (1L << (STRING - 73)) | (1L << (SELF - 73)) | (1L << (UINT - 73)) | (1L << (ULONG - 73)) | (1L << (USHORT - 73)) | (1L << (VOID - 73)) | (1L << (WHERE - 73)) | (1L << (SELECT - 73)) | (1L << (ASCENDING - 73)) | (1L << (BY - 73)) | (1L << (DESCENDING - 73)) | (1L << (EQUALS - 73)) | (1L << (FROM - 73)) | (1L << (GROUP - 73)) | (1L << (INTO - 73)) | (1L << (JOIN - 73)) | (1L << (LET - 73)) | (1L << (ORDERBY - 73)) | (1L << (IDENTIFIER - 73)) | (1L << (OPEN_BRACKET - 73)))) != 0)) {
				{
				State = 2277; formal_parameter_list();
				}
			}

			State = 2280; Match(CLOSE_PARENS);
			State = 2282;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2281; constructor_initializer();
				}
			}

			State = 2284; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Method_modifiersContext method_modifiers() {
			return GetRuleContext<Method_modifiersContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2287;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2286; attributes();
				}
			}

			State = 2290;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INLINE) | (1L << FRIEND) | (1L << SYNC) | (1L << NEW) | (1L << OVERRIDE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (STATIC - 65)) | (1L << (SUPERSEDE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				State = 2289; method_modifiers();
				}
			}

			State = 2292; return_type();
			State = 2293; member_name();
			State = 2295;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2294; type_parameter_list();
				}
			}

			State = 2297; Match(OPEN_PARENS);
			State = 2299;
			_la = _input.La(1);
			if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & ((1L << (ADD - 9)) | (1L << (ARGLIST - 9)) | (1L << (BOOL - 9)) | (1L << (BYTE - 9)) | (1L << (CHAR - 9)) | (1L << (COMPLEX - 9)) | (1L << (VLONG - 9)) | (1L << (DOUBLE - 9)) | (1L << (FLOAT - 9)) | (1L << (GET - 9)) | (1L << (INT - 9)) | (1L << (LONG - 9)) | (1L << (NAMEOF - 9)) | (1L << (OBJECT - 9)) | (1L << (ON - 9)) | (1L << (OUT - 9)) | (1L << (PARAMS - 9)) | (1L << (PARTIAL - 9)) | (1L << (RAISE - 9)) | (1L << (REF - 9)) | (1L << (REMOVE - 9)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (SBYTE - 73)) | (1L << (SET - 73)) | (1L << (SHORT - 73)) | (1L << (ADRESSOF - 73)) | (1L << (STRING - 73)) | (1L << (SELF - 73)) | (1L << (UINT - 73)) | (1L << (ULONG - 73)) | (1L << (USHORT - 73)) | (1L << (VOID - 73)) | (1L << (WHERE - 73)) | (1L << (SELECT - 73)) | (1L << (ASCENDING - 73)) | (1L << (BY - 73)) | (1L << (DESCENDING - 73)) | (1L << (EQUALS - 73)) | (1L << (FROM - 73)) | (1L << (GROUP - 73)) | (1L << (INTO - 73)) | (1L << (JOIN - 73)) | (1L << (LET - 73)) | (1L << (ORDERBY - 73)) | (1L << (IDENTIFIER - 73)) | (1L << (OPEN_BRACKET - 73)))) != 0)) {
				{
				State = 2298; formal_parameter_list();
				}
			}

			State = 2301; Match(CLOSE_PARENS);
			State = 2303;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2302; type_parameter_constraints_clauses();
				}
			}

			State = 2305; method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declarationContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public Arg_declarationContext arg_declaration(int i) {
			return GetRuleContext<Arg_declarationContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Arg_declarationContext[] arg_declaration() {
			return GetRuleContexts<Arg_declarationContext>();
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode OPERATOR() { return GetToken(RSharpParser.OPERATOR, 0); }
		public Overloadable_operatorContext overloadable_operator() {
			return GetRuleContext<Overloadable_operatorContext>(0);
		}
		public Method_modifiersContext method_modifiers() {
			return GetRuleContext<Method_modifiersContext>(0);
		}
		public Operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterOperator_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitOperator_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declarationContext operator_declaration() {
		Operator_declarationContext _localctx = new Operator_declarationContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_operator_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2308;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2307; attributes();
				}
			}

			State = 2311;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INLINE) | (1L << FRIEND) | (1L << SYNC) | (1L << NEW) | (1L << OVERRIDE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (STATIC - 65)) | (1L << (SUPERSEDE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				State = 2310; method_modifiers();
				}
			}

			State = 2313; type();
			State = 2314; Match(OPERATOR);
			State = 2315; overloadable_operator();
			State = 2316; Match(OPEN_PARENS);
			State = 2317; arg_declaration();
			State = 2320;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 2318; Match(COMMA);
				State = 2319; arg_declaration();
				}
			}

			State = 2322; Match(CLOSE_PARENS);
			State = 2323; method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Arg_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterArg_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitArg_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declarationContext arg_declaration() {
		Arg_declarationContext _localctx = new Arg_declarationContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_arg_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2325; type();
			State = 2326; identifier();
			State = 2329;
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 2327; Match(ASSIGNMENT);
				State = 2328; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocationContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_invocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_invocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocationContext method_invocation() {
		Method_invocationContext _localctx = new Method_invocationContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_method_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2331; Match(OPEN_PARENS);
			State = 2333;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON) | (1L << OUT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (OPEN_PARENS - 132)) | (1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (OP_PARITY - 132)) | (1L << (OP_ZERO - 132)))) != 0)) {
				{
				State = 2332; argument_list();
				}
			}

			State = 2335; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(RSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(RSharpParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterObject_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitObject_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expressionContext object_creation_expression() {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_object_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2337; Match(OPEN_PARENS);
			State = 2339;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << SUPER) | (1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << VLONG) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DOUBLE) | (1L << FALSE) | (1L << FLOAT) | (1L << GET) | (1L << INT) | (1L << LONG) | (1L << NAMEOF) | (1L << NEW) | (1L << NULL) | (1L << OBJECT) | (1L << ON) | (1L << OUT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (ADRESSOF - 64)) | (1L << (STRING - 64)) | (1L << (SELF - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (LITERAL_ACCESS - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (HEX_INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (OCT_INTEGER_LITERAL - 64)) | (1L << (BIN_INTEGER_LITERAL - 64)) | (1L << (UNARY_OPERATOR_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (REGULAR_STRING - 64)) | (1L << (VERBATIUM_STRING - 64)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 64)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (OPEN_PARENS - 132)) | (1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (OP_PARITY - 132)) | (1L << (OP_ZERO - 132)))) != 0)) {
				{
				State = 2338; argument_list();
				}
			}

			State = 2341; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(RSharpParser.ON, 0); }
		public ITerminalNode NAMEOF() { return GetToken(RSharpParser.NAMEOF, 0); }
		public ITerminalNode ORDERBY() { return GetToken(RSharpParser.ORDERBY, 0); }
		public ITerminalNode FROM() { return GetToken(RSharpParser.FROM, 0); }
		public ITerminalNode ASCENDING() { return GetToken(RSharpParser.ASCENDING, 0); }
		public ITerminalNode GROUP() { return GetToken(RSharpParser.GROUP, 0); }
		public ITerminalNode GET() { return GetToken(RSharpParser.GET, 0); }
		public ITerminalNode INTO() { return GetToken(RSharpParser.INTO, 0); }
		public ITerminalNode ADRESSOF() { return GetToken(RSharpParser.ADRESSOF, 0); }
		public ITerminalNode PARTIAL() { return GetToken(RSharpParser.PARTIAL, 0); }
		public ITerminalNode DESCENDING() { return GetToken(RSharpParser.DESCENDING, 0); }
		public ITerminalNode EQUALS() { return GetToken(RSharpParser.EQUALS, 0); }
		public ITerminalNode ADD() { return GetToken(RSharpParser.ADD, 0); }
		public ITerminalNode RAISE() { return GetToken(RSharpParser.RAISE, 0); }
		public ITerminalNode WHERE() { return GetToken(RSharpParser.WHERE, 0); }
		public ITerminalNode ARGLIST() { return GetToken(RSharpParser.ARGLIST, 0); }
		public ITerminalNode REMOVE() { return GetToken(RSharpParser.REMOVE, 0); }
		public ITerminalNode SELECT() { return GetToken(RSharpParser.SELECT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(RSharpParser.IDENTIFIER, 0); }
		public ITerminalNode SET() { return GetToken(RSharpParser.SET, 0); }
		public ITerminalNode BY() { return GetToken(RSharpParser.BY, 0); }
		public ITerminalNode LET() { return GetToken(RSharpParser.LET, 0); }
		public ITerminalNode JOIN() { return GetToken(RSharpParser.JOIN, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRSharpParserListener typedListener = listener as IRSharpParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRSharpParserVisitor<TResult> typedVisitor = visitor as IRSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2343;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ARGLIST) | (1L << GET) | (1L << NAMEOF) | (1L << ON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PARTIAL - 64)) | (1L << (RAISE - 64)) | (1L << (REMOVE - 64)) | (1L << (SET - 64)) | (1L << (ADRESSOF - 64)) | (1L << (WHERE - 64)) | (1L << (SELECT - 64)) | (1L << (ASCENDING - 64)) | (1L << (BY - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (FROM - 64)) | (1L << (GROUP - 64)) | (1L << (INTO - 64)) | (1L << (JOIN - 64)) | (1L << (LET - 64)) | (1L << (ORDERBY - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return null_coalescing_expression_sempred((Null_coalescing_expressionContext)_localctx, predIndex);

		case 21: return binary_operator_expression_sempred((Binary_operator_expressionContext)_localctx, predIndex);

		case 22: return conditional_or_expression_sempred((Conditional_or_expressionContext)_localctx, predIndex);

		case 23: return conditional_and_expression_sempred((Conditional_and_expressionContext)_localctx, predIndex);

		case 24: return inclusive_or_expression_sempred((Inclusive_or_expressionContext)_localctx, predIndex);

		case 25: return exclusive_or_expression_sempred((Exclusive_or_expressionContext)_localctx, predIndex);

		case 26: return and_expression_sempred((And_expressionContext)_localctx, predIndex);

		case 27: return equality_expression_sempred((Equality_expressionContext)_localctx, predIndex);

		case 28: return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);

		case 29: return shift_expression_sempred((Shift_expressionContext)_localctx, predIndex);

		case 30: return additive_expression_sempred((Additive_expressionContext)_localctx, predIndex);

		case 31: return multiplicative_expression_sempred((Multiplicative_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool equality_expression_sempred(Equality_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 3);

		case 8: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool binary_operator_expression_sempred(Binary_operator_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool conditional_and_expression_sempred(Conditional_and_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool exclusive_or_expression_sempred(Exclusive_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool and_expression_sempred(And_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool additive_expression_sempred(Additive_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool conditional_or_expression_sempred(Conditional_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool shift_expression_sempred(Shift_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(_ctx, 4);

		case 10: return Precpred(_ctx, 3);

		case 11: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool multiplicative_expression_sempred(Multiplicative_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool inclusive_or_expression_sempred(Inclusive_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool null_coalescing_expression_sempred(Null_coalescing_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xD3\x92C\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x3\x2\x5\x2\x17E\n\x2\x3\x2\x5\x2\x181\n\x2\x3\x2\a\x2\x184\n\x2\f\x2"+
		"\xE\x2\x187\v\x2\x3\x2\x5\x2\x18A\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\x190"+
		"\n\x3\x3\x3\x3\x3\a\x3\x194\n\x3\f\x3\xE\x3\x197\v\x3\x3\x4\x3\x4\x5\x4"+
		"\x19B\n\x4\x3\x5\x3\x5\x5\x5\x19F\n\x5\x3\x6\x3\x6\a\x6\x1A3\n\x6\f\x6"+
		"\xE\x6\x1A6\v\x6\x3\a\x3\a\x3\a\x5\a\x1AB\n\a\x3\b\x3\b\x3\b\x3\b\x5\b"+
		"\x1B1\n\b\x3\t\x3\t\x5\t\x1B5\n\t\x3\n\x3\n\x5\n\x1B9\n\n\x3\v\x3\v\x3"+
		"\f\x3\f\x3\r\x3\r\x3\r\x5\r\x1C2\n\r\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x1C8"+
		"\n\xE\f\xE\xE\xE\x1CB\v\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\a\xF\x1D2\n\xF"+
		"\f\xF\xE\xF\x1D5\v\xF\x3\x10\x3\x10\x3\x10\x5\x10\x1DA\n\x10\x3\x10\x5"+
		"\x10\x1DD\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\x1E3\n\x11\x3\x12\x3"+
		"\x12\x3\x12\x5\x12\x1E8\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x1F7\n\x15\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x1FF\n\x16\f\x16\xE\x16"+
		"\x202\v\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x20A\n\x17"+
		"\f\x17\xE\x17\x20D\v\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18"+
		"\x215\n\x18\f\x18\xE\x18\x218\v\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\a\x19\x220\n\x19\f\x19\xE\x19\x223\v\x19\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\a\x1A\x22B\n\x1A\f\x1A\xE\x1A\x22E\v\x1A\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x236\n\x1B\f\x1B\xE\x1B\x239"+
		"\v\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\x241\n\x1C\f\x1C"+
		"\xE\x1C\x244\v\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\a\x1D\x24F\n\x1D\f\x1D\xE\x1D\x252\v\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a"+
		"\x1E\x260\n\x1E\f\x1E\xE\x1E\x263\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\a\x1F\x26B\n\x1F\f\x1F\xE\x1F\x26E\v\x1F\x3 \x3 \x3 \x3 \x3"+
		" \x3 \a \x276\n \f \xE \x279\v \x3!\x3!\x3!\x3!\x3!\x3!\a!\x281\n!\f!"+
		"\xE!\x284\v!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3"+
		"\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3"+
		"\"\x3\"\x3\"\x5\"\x2A2\n\"\x3#\x3#\a#\x2A6\n#\f#\xE#\x2A9\v#\x3#\x3#\a"+
		"#\x2AD\n#\f#\xE#\x2B0\v#\x5#\x2B2\n#\x3$\x3$\x6$\x2B6\n$\r$\xE$\x2B7\x3"+
		"%\x3%\a%\x2BC\n%\f%\xE%\x2BF\v%\x3%\x3%\a%\x2C3\n%\f%\xE%\x2C6\v%\x3%"+
		"\x3%\a%\x2CA\n%\f%\xE%\x2CD\v%\x3%\x3%\a%\x2D1\n%\f%\xE%\x2D4\v%\x3%\x3"+
		"%\x3%\x5%\x2D9\n%\x3%\a%\x2DC\n%\f%\xE%\x2DF\v%\x5%\x2E1\n%\x3&\x3&\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x2F1\n&\x3&\x3&\x3&"+
		"\x3&\x5&\x2F7\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\a&\x302\n&\f&\xE"+
		"&\x305\v&\x3&\x5&\x308\n&\x5&\x30A\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\a&\x313"+
		"\n&\f&\xE&\x316\v&\x3&\x5&\x319\n&\x3&\x6&\x31C\n&\r&\xE&\x31D\x3&\x3"+
		"&\x5&\x322\n&\x3&\x3&\x3&\x5&\x327\n&\x3&\x3&\x3&\x3&\x3&\x5&\x32E\n&"+
		"\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3"+
		"&\x3&\x5&\x343\n&\x3&\x5&\x346\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&"+
		"\x3&\x3&\x3&\x3&\x3&\x3&\x3&\a&\x358\n&\f&\xE&\x35B\v&\x3&\x3&\x3&\x5"+
		"&\x360\n&\x3\'\x5\'\x363\n\'\x3\'\x3\'\x3\'\x5\'\x368\n\'\x3(\x5(\x36B"+
		"\n(\x3(\x3(\x3(\x3(\a(\x371\n(\f(\xE(\x374\v(\x3(\x3(\x3)\x3)\x3)\x5)"+
		"\x37B\n)\x3)\x3)\x3*\x3*\x3+\x3+\x3+\a+\x384\n+\f+\xE+\x387\v+\x3,\x3"+
		",\x3,\x3,\x3,\x5,\x38E\n,\x3-\x3-\x5-\x392\n-\x3-\x3-\x3-\x5-\x397\n-"+
		"\x5-\x399\n-\x3-\x3-\x3-\x5-\x39E\n-\a-\x3A0\n-\f-\xE-\x3A3\v-\x3.\x3"+
		".\a.\x3A7\n.\f.\xE.\x3AA\v.\x3.\x3.\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x3BD\n"+
		"\x30\x3\x31\x3\x31\x3\x31\a\x31\x3C2\n\x31\f\x31\xE\x31\x3C5\v\x31\x3"+
		"\x32\x5\x32\x3C8\n\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\a\x33"+
		"\x3D0\n\x33\f\x33\xE\x33\x3D3\v\x33\x3\x34\x3\x34\x5\x34\x3D7\n\x34\x3"+
		"\x35\x3\x35\x3\x35\x3\x36\x3\x36\x5\x36\x3DE\n\x36\x3\x36\x3\x36\x3\x36"+
		"\x3\x36\x3\x37\a\x37\x3E5\n\x37\f\x37\xE\x37\x3E8\v\x37\x3\x37\x3\x37"+
		"\x5\x37\x3EC\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x3F3\n\x38"+
		"\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3;\x3;\x5;\x3FF\n;\x3"+
		";\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x5;\x40A\n;\x3<\x3<\x3<\x3<\a<\x410"+
		"\n<\f<\xE<\x413\v<\x3=\x3=\x5=\x417\n=\x3>\x3>\x5>\x41B\n>\x3?\x3?\x3"+
		"?\x3?\x3?\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x5\x42\x42F\n\x42\x3\x42\x3\x42\x3\x42\x5\x42\x434"+
		"\n\x42\x3\x43\x3\x43\x5\x43\x438\n\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x445\n\x44\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\a\x44\x44D\n\x44\f\x44\xE\x44\x450"+
		"\v\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x46D\n"+
		"\x44\x3\x44\x3\x44\x5\x44\x471\n\x44\x3\x44\x3\x44\x5\x44\x475\n\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x494"+
		"\n\x44\x3\x44\x3\x44\x3\x44\x5\x44\x499\n\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x4A4\n\x44\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x4CA\n\x44\x3\x45\x3\x45\x5\x45\x4CE"+
		"\n\x45\x3\x45\x3\x45\x3\x46\x3\x46\x3\x46\x3\x46\a\x46\x4D6\n\x46\f\x46"+
		"\xE\x46\x4D9\v\x46\x3G\x3G\x3G\x5G\x4DE\nG\x3H\x3H\x3H\x3H\x3I\x3I\x5"+
		"I\x4E6\nI\x3J\x6J\x4E9\nJ\rJ\xEJ\x4EA\x3J\x3J\x3K\x3K\x3K\x3K\x3K\x3K"+
		"\x5K\x4F5\nK\x3L\x6L\x4F8\nL\rL\xEL\x4F9\x3M\x3M\x3M\x3M\aM\x500\nM\f"+
		"M\xEM\x503\vM\x5M\x505\nM\x3N\x3N\x3N\aN\x50A\nN\fN\xEN\x50D\vN\x3O\x3"+
		"O\aO\x511\nO\fO\xEO\x514\vO\x3O\x5O\x517\nO\x3O\x5O\x51A\nO\x3P\x3P\x3"+
		"P\x3P\x5P\x520\nP\x3P\x3P\x5P\x524\nP\x3P\x3P\x3Q\x3Q\x5Q\x52A\nQ\x3Q"+
		"\x3Q\x3R\x3R\x3R\x3R\x3R\x3S\x3S\x3S\x3T\x3T\x5T\x538\nT\x3U\x3U\x3U\x3"+
		"U\x5U\x53E\nU\x3V\x3V\x3V\aV\x543\nV\fV\xEV\x546\vV\x3W\x3W\x5W\x54A\n"+
		"W\x3W\x5W\x54D\nW\x3W\x3W\x3X\x6X\x552\nX\rX\xEX\x553\x3Y\x3Y\x3Y\x3Y"+
		"\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\x560\nY\x3Z\x6Z\x563\nZ\rZ\xEZ\x564\x3[\x3"+
		"[\x5[\x569\n[\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x5\\\x575"+
		"\n\\\x3]\x3]\x3]\x3]\x3]\x3]\x5]\x57D\n]\x3^\x3^\x3^\x3^\x5^\x583\n^\x3"+
		"_\x3_\x3_\x3_\a_\x589\n_\f_\xE_\x58C\v_\x3_\x3_\x3`\x3`\x3\x61\x3\x61"+
		"\x3\x61\x3\x61\a\x61\x596\n\x61\f\x61\xE\x61\x599\v\x61\x3\x62\x3\x62"+
		"\x3\x62\a\x62\x59E\n\x62\f\x62\xE\x62\x5A1\v\x62\x3\x63\x6\x63\x5A4\n"+
		"\x63\r\x63\xE\x63\x5A5\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x65\x3\x65"+
		"\x3\x65\x5\x65\x5B0\n\x65\x3\x66\x3\x66\x5\x66\x5B4\n\x66\x3g\x3g\x3g"+
		"\ag\x5B9\ng\fg\xEg\x5BC\vg\x3h\x3h\x5h\x5C0\nh\x3h\x3h\x3i\x6i\x5C5\n"+
		"i\ri\xEi\x5C6\x3j\x3j\x5j\x5CB\nj\x3k\x6k\x5CE\nk\rk\xEk\x5CF\x3l\x6l"+
		"\x5D3\nl\rl\xEl\x5D4\x3m\x6m\x5D8\nm\rm\xEm\x5D9\x3n\x3n\x3o\x3o\x3p\x3"+
		"p\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x5q\x5EC\nq\x3r\x3r\x3r\ar\x5F1"+
		"\nr\fr\xEr\x5F4\vr\x3s\x3s\x3s\x3s\x3t\x3t\x3t\at\x5FD\nt\ft\xEt\x600"+
		"\vt\x3u\x3u\x3u\x5u\x605\nu\x3v\x3v\x5v\x609\nv\x3w\x3w\x5w\x60D\nw\x3"+
		"x\x3x\x3x\x3x\x3x\x5x\x614\nx\x3y\x3y\x3y\x3y\x3y\x3y\x5y\x61C\ny\x3z"+
		"\x3z\x3z\x3z\x5z\x622\nz\x5z\x624\nz\x3{\x3{\x3{\a{\x629\n{\f{\xE{\x62C"+
		"\v{\x3|\x5|\x62F\n|\x3|\x5|\x632\n|\x3|\x3|\x3}\x3}\x3~\x5~\x639\n~\x3"+
		"~\x3~\x3~\x3~\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x5\x7F"+
		"\x646\n\x7F\x3\x80\x5\x80\x649\n\x80\x3\x80\x3\x80\x3\x80\x3\x81\x5\x81"+
		"\x64F\n\x81\x3\x81\x5\x81\x652\n\x81\x3\x81\x3\x81\x3\x81\x3\x82\x3\x82"+
		"\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x5\x82\x65E\n\x82\x3\x83\x3\x83\x5"+
		"\x83\x662\n\x83\x3\x84\x3\x84\x3\x84\x5\x84\x667\n\x84\x3\x84\x3\x84\x3"+
		"\x84\x5\x84\x66C\n\x84\x3\x84\x3\x84\x3\x84\x5\x84\x671\n\x84\x5\x84\x673"+
		"\n\x84\x3\x85\x5\x85\x676\n\x85\x3\x85\x5\x85\x679\n\x85\x3\x85\x3\x85"+
		"\x3\x85\x3\x86\x5\x86\x67F\n\x86\x3\x86\x5\x86\x682\n\x86\x3\x86\x3\x86"+
		"\x3\x86\x3\x87\x5\x87\x688\n\x87\x3\x87\x3\x87\x3\x87\x3\x88\x3\x88\x3"+
		"\x89\x5\x89\x690\n\x89\x3\x89\x5\x89\x693\n\x89\x3\x89\x3\x89\x3\x89\x3"+
		"\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x5\x8A\x6A1"+
		"\n\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x5\x8B\x6A7\n\x8B\x3\x8C\x3\x8C\x3"+
		"\x8C\x3\x8D\x3\x8D\a\x8D\x6AE\n\x8D\f\x8D\xE\x8D\x6B1\v\x8D\x3\x8D\x3"+
		"\x8D\x3\x8E\x3\x8E\a\x8E\x6B7\n\x8E\f\x8E\xE\x8E\x6BA\v\x8E\x3\x8E\x6"+
		"\x8E\x6BD\n\x8E\r\x8E\xE\x8E\x6BE\x3\x8F\x3\x8F\a\x8F\x6C3\n\x8F\f\x8F"+
		"\xE\x8F\x6C6\v\x8F\x3\x8F\x3\x8F\x3\x90\x3\x90\x3\x90\x3\x90\a\x90\x6CE"+
		"\n\x90\f\x90\xE\x90\x6D1\v\x90\x3\x90\x5\x90\x6D4\n\x90\x5\x90\x6D6\n"+
		"\x90\x3\x90\x3\x90\x3\x91\x3\x91\x3\x91\x3\x92\x3\x92\a\x92\x6DF\n\x92"+
		"\f\x92\xE\x92\x6E2\v\x92\x3\x92\x3\x92\x3\x93\x5\x93\x6E7\n\x93\x3\x93"+
		"\x5\x93\x6EA\n\x93\x3\x93\x5\x93\x6ED\n\x93\x3\x93\x3\x93\x3\x93\x5\x93"+
		"\x6F2\n\x93\x3\x93\x3\x93\x5\x93\x6F6\n\x93\x3\x93\x3\x93\x5\x93\x6FA"+
		"\n\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93"+
		"\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\x70B\n\x93\x3\x93\x3"+
		"\x93\x3\x93\x5\x93\x710\n\x93\x3\x93\x3\x93\x5\x93\x714\n\x93\x3\x93\x3"+
		"\x93\x5\x93\x718\n\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93"+
		"\x5\x93\x721\n\x93\x3\x94\x5\x94\x724\n\x94\x3\x94\x3\x94\x3\x94\x5\x94"+
		"\x729\n\x94\x3\x94\x3\x94\x5\x94\x72D\n\x94\x3\x94\x3\x94\x3\x94\x5\x94"+
		"\x732\n\x94\x3\x94\x3\x94\x5\x94\x736\n\x94\x5\x94\x738\n\x94\x3\x95\x3"+
		"\x95\x3\x95\x3\x96\x3\x96\x3\x96\x3\x96\a\x96\x741\n\x96\f\x96\xE\x96"+
		"\x744\v\x96\x3\x96\x5\x96\x747\n\x96\x5\x96\x749\n\x96\x3\x96\x3\x96\x3"+
		"\x97\x5\x97\x74E\n\x97\x3\x97\x3\x97\x3\x97\x5\x97\x753\n\x97\x3\x98\x3"+
		"\x98\x3\x98\x3\x98\x3\x98\x5\x98\x75A\n\x98\x3\x98\x3\x98\x3\x99\x3\x99"+
		"\x5\x99\x760\n\x99\x3\x9A\x6\x9A\x763\n\x9A\r\x9A\xE\x9A\x764\x3\x9B\x3"+
		"\x9B\x3\x9B\x3\x9B\x5\x9B\x76B\n\x9B\x3\x9B\x3\x9B\x5\x9B\x76F\n\x9B\x3"+
		"\x9B\x3\x9B\x3\x9C\x3\x9C\x5\x9C\x775\n\x9C\x3\x9D\x3\x9D\x3\x9D\a\x9D"+
		"\x77A\n\x9D\f\x9D\xE\x9D\x77D\v\x9D\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E"+
		"\a\x9E\x784\n\x9E\f\x9E\xE\x9E\x787\v\x9E\x5\x9E\x789\n\x9E\x3\x9E\x5"+
		"\x9E\x78C\n\x9E\x3\x9F\x3\x9F\x3\x9F\x5\x9F\x791\n\x9F\x3\x9F\x3\x9F\x3"+
		"\xA0\x3\xA0\x5\xA0\x797\n\xA0\x3\xA0\x3\xA0\a\xA0\x79B\n\xA0\f\xA0\xE"+
		"\xA0\x79E\v\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\x7A4\n\xA0\x3\xA1\x3"+
		"\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\x7AF\n\xA1"+
		"\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\x7B7\n\xA3\x3\xA4\x3"+
		"\xA4\a\xA4\x7BB\n\xA4\f\xA4\xE\xA4\x7BE\v\xA4\x3\xA4\x3\xA4\x3\xA5\x3"+
		"\xA5\a\xA5\x7C4\n\xA5\f\xA5\xE\xA5\x7C7\v\xA5\x3\xA5\x3\xA5\x3\xA6\x3"+
		"\xA6\x3\xA6\x3\xA6\x5\xA6\x7CF\n\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7"+
		"\x7D5\n\xA7\x3\xA8\x3\xA8\x3\xA8\a\xA8\x7DA\n\xA8\f\xA8\xE\xA8\x7DD\v"+
		"\xA8\x3\xA8\x3\xA8\x6\xA8\x7E1\n\xA8\r\xA8\xE\xA8\x7E2\x5\xA8\x7E5\n\xA8"+
		"\x3\xA9\x3\xA9\x3\xAA\x5\xAA\x7EA\n\xAA\x3\xAA\x5\xAA\x7ED\n\xAA\x3\xAA"+
		"\x3\xAA\x3\xAA\x5\xAA\x7F2\n\xAA\x3\xAA\x5\xAA\x7F5\n\xAA\x3\xAA\x5\xAA"+
		"\x7F8\n\xAA\x3\xAA\x3\xAA\x5\xAA\x7FC\n\xAA\x3\xAB\x3\xAB\x3\xAB\x3\xAB"+
		"\x3\xAC\x5\xAC\x803\n\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAD\x5\xAD\x80A"+
		"\n\xAD\x3\xAD\x5\xAD\x80D\n\xAD\x3\xAD\x3\xAD\x3\xAD\x5\xAD\x812\n\xAD"+
		"\x3\xAD\x5\xAD\x815\n\xAD\x3\xAD\x5\xAD\x818\n\xAD\x3\xAD\x3\xAD\x5\xAD"+
		"\x81C\n\xAD\x3\xAE\x5\xAE\x81F\n\xAE\x3\xAE\x5\xAE\x822\n\xAE\x3\xAE\x3"+
		"\xAE\x3\xAE\x5\xAE\x827\n\xAE\x3\xAE\x5\xAE\x82A\n\xAE\x3\xAE\x5\xAE\x82D"+
		"\n\xAE\x3\xAE\x3\xAE\x5\xAE\x831\n\xAE\x3\xAF\x5\xAF\x834\n\xAF\x3\xAF"+
		"\x5\xAF\x837\n\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x83C\n\xAF\x3\xAF\x5\xAF"+
		"\x83F\n\xAF\x3\xAF\x5\xAF\x842\n\xAF\x3\xAF\x3\xAF\x5\xAF\x846\n\xAF\x3"+
		"\xB0\x5\xB0\x849\n\xB0\x3\xB0\x5\xB0\x84C\n\xB0\x3\xB0\x3\xB0\x3\xB0\x5"+
		"\xB0\x851\n\xB0\x3\xB0\x3\xB0\x5\xB0\x855\n\xB0\x3\xB1\x5\xB1\x858\n\xB1"+
		"\x3\xB1\x5\xB1\x85B\n\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x5\xB1\x861\n\xB1"+
		"\x3\xB1\x3\xB1\x5\xB1\x865\n\xB1\x3\xB1\x3\xB1\x5\xB1\x869\n\xB1\x3\xB1"+
		"\x3\xB1\x3\xB2\x5\xB2\x86E\n\xB2\x3\xB2\x5\xB2\x871\n\xB2\x3\xB2\x3\xB2"+
		"\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB3\x5\xB3\x87B\n\xB3\x3\xB3\x5"+
		"\xB3\x87E\n\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB4\x5\xB4\x885\n\xB4\x3"+
		"\xB4\x5\xB4\x888\n\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4"+
		"\x3\xB4\x3\xB4\x5\xB4\x893\n\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x899"+
		"\n\xB4\x3\xB5\x5\xB5\x89C\n\xB5\x3\xB5\x5\xB5\x89F\n\xB5\x3\xB5\x3\xB5"+
		"\x3\xB5\x3\xB5\x3\xB5\x3\xB6\x5\xB6\x8A7\n\xB6\x3\xB6\x5\xB6\x8AA\n\xB6"+
		"\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6"+
		"\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x8B9\n\xB6\x3\xB6\x5\xB6\x8BC\n\xB6\x3\xB6"+
		"\x5\xB6\x8BF\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3"+
		"\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x8D0\n\xB6"+
		"\x5\xB6\x8D2\n\xB6\x3\xB7\x5\xB7\x8D5\n\xB7\x3\xB7\x5\xB7\x8D8\n\xB7\x3"+
		"\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB8\x5\xB8\x8E1\n\xB8\x3\xB8"+
		"\x5\xB8\x8E4\n\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8\x8E9\n\xB8\x3\xB8\x3\xB8"+
		"\x5\xB8\x8ED\n\xB8\x3\xB8\x3\xB8\x3\xB9\x5\xB9\x8F2\n\xB9\x3\xB9\x5\xB9"+
		"\x8F5\n\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\x8FA\n\xB9\x3\xB9\x3\xB9\x5\xB9"+
		"\x8FE\n\xB9\x3\xB9\x3\xB9\x5\xB9\x902\n\xB9\x3\xB9\x3\xB9\x3\xBA\x5\xBA"+
		"\x907\n\xBA\x3\xBA\x5\xBA\x90A\n\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA"+
		"\x3\xBA\x3\xBA\x5\xBA\x913\n\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBB\x3\xBB\x3"+
		"\xBB\x3\xBB\x5\xBB\x91C\n\xBB\x3\xBC\x3\xBC\x5\xBC\x920\n\xBC\x3\xBC\x3"+
		"\xBC\x3\xBD\x3\xBD\x5\xBD\x926\n\xBD\x3\xBD\x3\xBD\x3\xBE\x3\xBE\x3\xBE"+
		"\x2\x2\xE*,.\x30\x32\x34\x36\x38:<>@\xBF\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f"+
		"\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<"+
		"\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z"+
		"\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2"+
		"x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E"+
		"\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2"+
		"\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6"+
		"\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA"+
		"\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE"+
		"\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2"+
		"\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2"+
		"\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128"+
		"\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A"+
		"\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C"+
		"\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E"+
		"\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170"+
		"\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x2\x18\v\x2\x11\x11\x14\x14"+
		"\x1A\x1A\x30\x30\x36\x36KKNN[\\``\x5\x2\x19\x19\x1E\x1E&&\x4\x2??HH\x6"+
		"\x2\x96\x96\xA5\xAC\xAF\xB0\xB3\xB4\x4\x2\x97\x98\xA3\xA4\x4\x2\xAD\xAE"+
		"\xB1\xB2\x3\x2\x8C\x8D\x3\x2\x8E\x90\x10\x2\xF\xF\x11\x11\x14\x14\x1A"+
		"\x1A\x1E\x1E&&\x30\x30\x36\x36<<KKNNRR[\\``\x4\x2jjll\a\x2\n\n\x32\x32"+
		"\x43\x45LLQQ\v\x2##\x32\x32\x35\x35\x39\x39@@\x43\x45GGQQ\x62\x62\xE\x2"+
		"\n\n##//\x32\x32\x35\x35\x39\x39@@\x43\x45GGQQVV\x62\x62\x5\x2??HHUU\v"+
		"\x2$$XX{|\x8C\x95\x97\x98\x9C\x9D\xA1\xA4\xAD\xAD\xB1\xB1\x4\x2\"\",,"+
		"\x4\x2\xE\xEUU\x4\x2\x8E\x8E\x99\x99\x4\x2$$XX\x11\x2\n\n\r\x19\x1B(*"+
		".\x30\x33\x35\x36\x38<>\x41\x43\x45GHJLNOQUW\x64gg\x3\x2vw\r\x2\v\f))"+
		"\x37\x37==\x42\x42\x46\x46IIMMPP\x66\x66it\xA04\x2\x17D\x3\x2\x2\x2\x4"+
		"\x18F\x3\x2\x2\x2\x6\x198\x3\x2\x2\x2\b\x19C\x3\x2\x2\x2\n\x1A0\x3\x2"+
		"\x2\x2\f\x1AA\x3\x2\x2\x2\xE\x1B0\x3\x2\x2\x2\x10\x1B4\x3\x2\x2\x2\x12"+
		"\x1B8\x3\x2\x2\x2\x14\x1BA\x3\x2\x2\x2\x16\x1BC\x3\x2\x2\x2\x18\x1C1\x3"+
		"\x2\x2\x2\x1A\x1C3\x3\x2\x2\x2\x1C\x1CE\x3\x2\x2\x2\x1E\x1D9\x3\x2\x2"+
		"\x2 \x1E2\x3\x2\x2\x2\"\x1E7\x3\x2\x2\x2$\x1E9\x3\x2\x2\x2&\x1ED\x3\x2"+
		"\x2\x2(\x1F6\x3\x2\x2\x2*\x1F8\x3\x2\x2\x2,\x203\x3\x2\x2\x2.\x20E\x3"+
		"\x2\x2\x2\x30\x219\x3\x2\x2\x2\x32\x224\x3\x2\x2\x2\x34\x22F\x3\x2\x2"+
		"\x2\x36\x23A\x3\x2\x2\x2\x38\x245\x3\x2\x2\x2:\x253\x3\x2\x2\x2<\x264"+
		"\x3\x2\x2\x2>\x26F\x3\x2\x2\x2@\x27A\x3\x2\x2\x2\x42\x2A1\x3\x2\x2\x2"+
		"\x44\x2B1\x3\x2\x2\x2\x46\x2B3\x3\x2\x2\x2H\x2E0\x3\x2\x2\x2J\x35F\x3"+
		"\x2\x2\x2L\x362\x3\x2\x2\x2N\x36A\x3\x2\x2\x2P\x37A\x3\x2\x2\x2R\x37E"+
		"\x3\x2\x2\x2T\x380\x3\x2\x2\x2V\x38D\x3\x2\x2\x2X\x38F\x3\x2\x2\x2Z\x3A4"+
		"\x3\x2\x2\x2\\\x3AD\x3\x2\x2\x2^\x3BC\x3\x2\x2\x2`\x3BE\x3\x2\x2\x2\x62"+
		"\x3C7\x3\x2\x2\x2\x64\x3CC\x3\x2\x2\x2\x66\x3D6\x3\x2\x2\x2h\x3D8\x3\x2"+
		"\x2\x2j\x3DB\x3\x2\x2\x2l\x3E6\x3\x2\x2\x2n\x3F2\x3\x2\x2\x2p\x3F4\x3"+
		"\x2\x2\x2r\x3F9\x3\x2\x2\x2t\x3FC\x3\x2\x2\x2v\x40B\x3\x2\x2\x2x\x414"+
		"\x3\x2\x2\x2z\x41A\x3\x2\x2\x2|\x41C\x3\x2\x2\x2~\x421\x3\x2\x2\x2\x80"+
		"\x424\x3\x2\x2\x2\x82\x433\x3\x2\x2\x2\x84\x437\x3\x2\x2\x2\x86\x4C9\x3"+
		"\x2\x2\x2\x88\x4CB\x3\x2\x2\x2\x8A\x4D1\x3\x2\x2\x2\x8C\x4DA\x3\x2\x2"+
		"\x2\x8E\x4DF\x3\x2\x2\x2\x90\x4E5\x3\x2\x2\x2\x92\x4E8\x3\x2\x2\x2\x94"+
		"\x4F4\x3\x2\x2\x2\x96\x4F7\x3\x2\x2\x2\x98\x504\x3\x2\x2\x2\x9A\x506\x3"+
		"\x2\x2\x2\x9C\x519\x3\x2\x2\x2\x9E\x51B\x3\x2\x2\x2\xA0\x527\x3\x2\x2"+
		"\x2\xA2\x52D\x3\x2\x2\x2\xA4\x532\x3\x2\x2\x2\xA6\x537\x3\x2\x2\x2\xA8"+
		"\x539\x3\x2\x2\x2\xAA\x53F\x3\x2\x2\x2\xAC\x547\x3\x2\x2\x2\xAE\x551\x3"+
		"\x2\x2\x2\xB0\x55F\x3\x2\x2\x2\xB2\x562\x3\x2\x2\x2\xB4\x568\x3\x2\x2"+
		"\x2\xB6\x574\x3\x2\x2\x2\xB8\x57C\x3\x2\x2\x2\xBA\x57E\x3\x2\x2\x2\xBC"+
		"\x584\x3\x2\x2\x2\xBE\x58F\x3\x2\x2\x2\xC0\x591\x3\x2\x2\x2\xC2\x59A\x3"+
		"\x2\x2\x2\xC4\x5A3\x3\x2\x2\x2\xC6\x5A7\x3\x2\x2\x2\xC8\x5AC\x3\x2\x2"+
		"\x2\xCA\x5B3\x3\x2\x2\x2\xCC\x5B5\x3\x2\x2\x2\xCE\x5BD\x3\x2\x2\x2\xD0"+
		"\x5C4\x3\x2\x2\x2\xD2\x5CA\x3\x2\x2\x2\xD4\x5CD\x3\x2\x2\x2\xD6\x5D2\x3"+
		"\x2\x2\x2\xD8\x5D7\x3\x2\x2\x2\xDA\x5DB\x3\x2\x2\x2\xDC\x5DD\x3\x2\x2"+
		"\x2\xDE\x5DF\x3\x2\x2\x2\xE0\x5EB\x3\x2\x2\x2\xE2\x5ED\x3\x2\x2\x2\xE4"+
		"\x5F5\x3\x2\x2\x2\xE6\x5F9\x3\x2\x2\x2\xE8\x601\x3\x2\x2\x2\xEA\x608\x3"+
		"\x2\x2\x2\xEC\x60C\x3\x2\x2\x2\xEE\x613\x3\x2\x2\x2\xF0\x61B\x3\x2\x2"+
		"\x2\xF2\x623\x3\x2\x2\x2\xF4\x625\x3\x2\x2\x2\xF6\x62E\x3\x2\x2\x2\xF8"+
		"\x635\x3\x2\x2\x2\xFA\x638\x3\x2\x2\x2\xFC\x645\x3\x2\x2\x2\xFE\x648\x3"+
		"\x2\x2\x2\x100\x64E\x3\x2\x2\x2\x102\x65D\x3\x2\x2\x2\x104\x661\x3\x2"+
		"\x2\x2\x106\x672\x3\x2\x2\x2\x108\x675\x3\x2\x2\x2\x10A\x67E\x3\x2\x2"+
		"\x2\x10C\x687\x3\x2\x2\x2\x10E\x68C\x3\x2\x2\x2\x110\x68F\x3\x2\x2\x2"+
		"\x112\x69C\x3\x2\x2\x2\x114\x6A6\x3\x2\x2\x2\x116\x6A8\x3\x2\x2\x2\x118"+
		"\x6AB\x3\x2\x2\x2\x11A\x6B4\x3\x2\x2\x2\x11C\x6C0\x3\x2\x2\x2\x11E\x6C9"+
		"\x3\x2\x2\x2\x120\x6D9\x3\x2\x2\x2\x122\x6DC\x3\x2\x2\x2\x124\x6E6\x3"+
		"\x2\x2\x2\x126\x723\x3\x2\x2\x2\x128\x739\x3\x2\x2\x2\x12A\x73C\x3\x2"+
		"\x2\x2\x12C\x74D\x3\x2\x2\x2\x12E\x754\x3\x2\x2\x2\x130\x75F\x3\x2\x2"+
		"\x2\x132\x762\x3\x2\x2\x2\x134\x766\x3\x2\x2\x2\x136\x774\x3\x2\x2\x2"+
		"\x138\x776\x3\x2\x2\x2\x13A\x77E\x3\x2\x2\x2\x13C\x790\x3\x2\x2\x2\x13E"+
		"\x7A3\x3\x2\x2\x2\x140\x7AE\x3\x2\x2\x2\x142\x7B0\x3\x2\x2\x2\x144\x7B6"+
		"\x3\x2\x2\x2\x146\x7B8\x3\x2\x2\x2\x148\x7C1\x3\x2\x2\x2\x14A\x7CE\x3"+
		"\x2\x2\x2\x14C\x7D4\x3\x2\x2\x2\x14E\x7D6\x3\x2\x2\x2\x150\x7E6\x3\x2"+
		"\x2\x2\x152\x7E9\x3\x2\x2\x2\x154\x7FD\x3\x2\x2\x2\x156\x802\x3\x2\x2"+
		"\x2\x158\x809\x3\x2\x2\x2\x15A\x81E\x3\x2\x2\x2\x15C\x833\x3\x2\x2\x2"+
		"\x15E\x848\x3\x2\x2\x2\x160\x857\x3\x2\x2\x2\x162\x86D\x3\x2\x2\x2\x164"+
		"\x87A\x3\x2\x2\x2\x166\x884\x3\x2\x2\x2\x168\x89B\x3\x2\x2\x2\x16A\x8D1"+
		"\x3\x2\x2\x2\x16C\x8D4\x3\x2\x2\x2\x16E\x8E0\x3\x2\x2\x2\x170\x8F1\x3"+
		"\x2\x2\x2\x172\x906\x3\x2\x2\x2\x174\x917\x3\x2\x2\x2\x176\x91D\x3\x2"+
		"\x2\x2\x178\x923\x3\x2\x2\x2\x17A\x929\x3\x2\x2\x2\x17C\x17E\a\x3\x2\x2"+
		"\x17D\x17C\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E\x180\x3\x2\x2\x2\x17F"+
		"\x181\x5\xAEX\x2\x180\x17F\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x185"+
		"\x3\x2\x2\x2\x182\x184\x5\x12E\x98\x2\x183\x182\x3\x2\x2\x2\x184\x187"+
		"\x3\x2\x2\x2\x185\x183\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186\x189\x3"+
		"\x2\x2\x2\x187\x185\x3\x2\x2\x2\x188\x18A\x5\xB2Z\x2\x189\x188\x3\x2\x2"+
		"\x2\x189\x18A\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x18C\a\x2\x2\x3\x18C"+
		"\x3\x3\x2\x2\x2\x18D\x190\x5\x6\x4\x2\x18E\x190\x5\xBA^\x2\x18F\x18D\x3"+
		"\x2\x2\x2\x18F\x18E\x3\x2\x2\x2\x190\x195\x3\x2\x2\x2\x191\x192\a\x88"+
		"\x2\x2\x192\x194\x5\b\x5\x2\x193\x191\x3\x2\x2\x2\x194\x197\x3\x2\x2\x2"+
		"\x195\x193\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x5\x3\x2\x2\x2\x197"+
		"\x195\x3\x2\x2\x2\x198\x19A\x5\x17A\xBE\x2\x199\x19B\x5\x1A\xE\x2\x19A"+
		"\x199\x3\x2\x2\x2\x19A\x19B\x3\x2\x2\x2\x19B\a\x3\x2\x2\x2\x19C\x19E\x5"+
		"\x17A\xBE\x2\x19D\x19F\x5\x1A\xE\x2\x19E\x19D\x3\x2\x2\x2\x19E\x19F\x3"+
		"\x2\x2\x2\x19F\t\x3\x2\x2\x2\x1A0\x1A4\x5\xE\b\x2\x1A1\x1A3\x5\f\a\x2"+
		"\x1A2\x1A1\x3\x2\x2\x2\x1A3\x1A6\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4"+
		"\x1A5\x3\x2\x2\x2\x1A5\v\x3\x2\x2\x2\x1A6\x1A4\x3\x2\x2\x2\x1A7\x1AB\a"+
		"\x99\x2\x2\x1A8\x1AB\x5\x11C\x8F\x2\x1A9\x1AB\a\x8E\x2\x2\x1AA\x1A7\x3"+
		"\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AA\x1A9\x3\x2\x2\x2\x1AB\r\x3\x2\x2"+
		"\x2\x1AC\x1B1\x5\x10\t\x2\x1AD\x1B1\x5\x18\r\x2\x1AE\x1AF\a\x63\x2\x2"+
		"\x1AF\x1B1\a\x8E\x2\x2\x1B0\x1AC\x3\x2\x2\x2\x1B0\x1AD\x3\x2\x2\x2\x1B0"+
		"\x1AE\x3\x2\x2\x2\x1B1\xF\x3\x2\x2\x2\x1B2\x1B5\x5\x12\n\x2\x1B3\x1B5"+
		"\a\xF\x2\x2\x1B4\x1B2\x3\x2\x2\x2\x1B4\x1B3\x3\x2\x2\x2\x1B5\x11\x3\x2"+
		"\x2\x2\x1B6\x1B9\x5\x14\v\x2\x1B7\x1B9\x5\x16\f\x2\x1B8\x1B6\x3\x2\x2"+
		"\x2\x1B8\x1B7\x3\x2\x2\x2\x1B9\x13\x3\x2\x2\x2\x1BA\x1BB\t\x2\x2\x2\x1BB"+
		"\x15\x3\x2\x2\x2\x1BC\x1BD\t\x3\x2\x2\x1BD\x17\x3\x2\x2\x2\x1BE\x1C2\x5"+
		"\x4\x3\x2\x1BF\x1C2\a<\x2\x2\x1C0\x1C2\aR\x2\x2\x1C1\x1BE\x3\x2\x2\x2"+
		"\x1C1\x1BF\x3\x2\x2\x2\x1C1\x1C0\x3\x2\x2\x2\x1C2\x19\x3\x2\x2\x2\x1C3"+
		"\x1C4\a\x97\x2\x2\x1C4\x1C9\x5\n\x6\x2\x1C5\x1C6\a\x89\x2\x2\x1C6\x1C8"+
		"\x5\n\x6\x2\x1C7\x1C5\x3\x2\x2\x2\x1C8\x1CB\x3\x2\x2\x2\x1C9\x1C7\x3\x2"+
		"\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CC\x3\x2\x2\x2\x1CB\x1C9\x3\x2\x2"+
		"\x2\x1CC\x1CD\a\x98\x2\x2\x1CD\x1B\x3\x2\x2\x2\x1CE\x1D3\x5\x1E\x10\x2"+
		"\x1CF\x1D0\a\x89\x2\x2\x1D0\x1D2\x5\x1E\x10\x2\x1D1\x1CF\x3\x2\x2\x2\x1D2"+
		"\x1D5\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x1D"+
		"\x3\x2\x2\x2\x1D5\x1D3\x3\x2\x2\x2\x1D6\x1D7\x5\x17A\xBE\x2\x1D7\x1D8"+
		"\a\x8A\x2\x2\x1D8\x1DA\x3\x2\x2\x2\x1D9\x1D6\x3\x2\x2\x2\x1D9\x1DA\x3"+
		"\x2\x2\x2\x1DA\x1DC\x3\x2\x2\x2\x1DB\x1DD\t\x4\x2\x2\x1DC\x1DB\x3\x2\x2"+
		"\x2\x1DC\x1DD\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1DF\x5 \x11\x2\x1DF"+
		"\x1F\x3\x2\x2\x2\x1E0\x1E3\x5$\x13\x2\x1E1\x1E3\x5\"\x12\x2\x1E2\x1E0"+
		"\x3\x2\x2\x2\x1E2\x1E1\x3\x2\x2\x2\x1E3!\x3\x2\x2\x2\x1E4\x1E8\x5\\/\x2"+
		"\x1E5\x1E8\x5h\x35\x2\x1E6\x1E8\x5(\x15\x2\x1E7\x1E4\x3\x2\x2\x2\x1E7"+
		"\x1E5\x3\x2\x2\x2\x1E7\x1E6\x3\x2\x2\x2\x1E8#\x3\x2\x2\x2\x1E9\x1EA\x5"+
		"\x42\"\x2\x1EA\x1EB\x5&\x14\x2\x1EB\x1EC\x5 \x11\x2\x1EC%\x3\x2\x2\x2"+
		"\x1ED\x1EE\t\x5\x2\x2\x1EE\'\x3\x2\x2\x2\x1EF\x1F7\x5*\x16\x2\x1F0\x1F1"+
		"\x5*\x16\x2\x1F1\x1F2\a\x99\x2\x2\x1F2\x1F3\x5 \x11\x2\x1F3\x1F4\a\x8A"+
		"\x2\x2\x1F4\x1F5\x5(\x15\x2\x1F5\x1F7\x3\x2\x2\x2\x1F6\x1EF\x3\x2\x2\x2"+
		"\x1F6\x1F0\x3\x2\x2\x2\x1F7)\x3\x2\x2\x2\x1F8\x1F9\b\x16\x1\x2\x1F9\x1FA"+
		"\x5,\x17\x2\x1FA\x200\x3\x2\x2\x2\x1FB\x1FC\f\x4\x2\x2\x1FC\x1FD\a\x9B"+
		"\x2\x2\x1FD\x1FF\x5,\x17\x2\x1FE\x1FB\x3\x2\x2\x2\x1FF\x202\x3\x2\x2\x2"+
		"\x200\x1FE\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2\x201+\x3\x2\x2\x2\x202\x200"+
		"\x3\x2\x2\x2\x203\x204\b\x17\x1\x2\x204\x205\x5.\x18\x2\x205\x20B\x3\x2"+
		"\x2\x2\x206\x207\f\x4\x2\x2\x207\x208\a{\x2\x2\x208\x20A\x5.\x18\x2\x209"+
		"\x206\x3\x2\x2\x2\x20A\x20D\x3\x2\x2\x2\x20B\x209\x3\x2\x2\x2\x20B\x20C"+
		"\x3\x2\x2\x2\x20C-\x3\x2\x2\x2\x20D\x20B\x3\x2\x2\x2\x20E\x20F\b\x18\x1"+
		"\x2\x20F\x210\x5\x30\x19\x2\x210\x216\x3\x2\x2\x2\x211\x212\f\x4\x2\x2"+
		"\x212\x213\a\x9F\x2\x2\x213\x215\x5\x30\x19\x2\x214\x211\x3\x2\x2\x2\x215"+
		"\x218\x3\x2\x2\x2\x216\x214\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2\x217/\x3"+
		"\x2\x2\x2\x218\x216\x3\x2\x2\x2\x219\x21A\b\x19\x1\x2\x21A\x21B\x5\x32"+
		"\x1A\x2\x21B\x221\x3\x2\x2\x2\x21C\x21D\f\x4\x2\x2\x21D\x21E\a\x9E\x2"+
		"\x2\x21E\x220\x5\x32\x1A\x2\x21F\x21C\x3\x2\x2\x2\x220\x223\x3\x2\x2\x2"+
		"\x221\x21F\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2\x222\x31\x3\x2\x2\x2\x223"+
		"\x221\x3\x2\x2\x2\x224\x225\b\x1A\x1\x2\x225\x226\x5\x34\x1B\x2\x226\x22C"+
		"\x3\x2\x2\x2\x227\x228\f\x4\x2\x2\x228\x229\a\x92\x2\x2\x229\x22B\x5\x34"+
		"\x1B\x2\x22A\x227\x3\x2\x2\x2\x22B\x22E\x3\x2\x2\x2\x22C\x22A\x3\x2\x2"+
		"\x2\x22C\x22D\x3\x2\x2\x2\x22D\x33\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22F"+
		"\x230\b\x1B\x1\x2\x230\x231\x5\x36\x1C\x2\x231\x237\x3\x2\x2\x2\x232\x233"+
		"\f\x4\x2\x2\x233\x234\a\xD1\x2\x2\x234\x236\x5\x36\x1C\x2\x235\x232\x3"+
		"\x2\x2\x2\x236\x239\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2\x237\x238\x3\x2"+
		"\x2\x2\x238\x35\x3\x2\x2\x2\x239\x237\x3\x2\x2\x2\x23A\x23B\b\x1C\x1\x2"+
		"\x23B\x23C\x5\x38\x1D\x2\x23C\x242\x3\x2\x2\x2\x23D\x23E\f\x4\x2\x2\x23E"+
		"\x23F\a\x91\x2\x2\x23F\x241\x5\x38\x1D\x2\x240\x23D\x3\x2\x2\x2\x241\x244"+
		"\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243\x37\x3\x2"+
		"\x2\x2\x244\x242\x3\x2\x2\x2\x245\x246\b\x1D\x1\x2\x246\x247\x5:\x1E\x2"+
		"\x247\x250\x3\x2\x2\x2\x248\x249\f\x5\x2\x2\x249\x24A\a\xA2\x2\x2\x24A"+
		"\x24F\x5:\x1E\x2\x24B\x24C\f\x4\x2\x2\x24C\x24D\a\xA1\x2\x2\x24D\x24F"+
		"\x5:\x1E\x2\x24E\x248\x3\x2\x2\x2\x24E\x24B\x3\x2\x2\x2\x24F\x252\x3\x2"+
		"\x2\x2\x250\x24E\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2\x251\x39\x3\x2\x2\x2"+
		"\x252\x250\x3\x2\x2\x2\x253\x254\b\x1E\x1\x2\x254\x255\x5<\x1F\x2\x255"+
		"\x261\x3\x2\x2\x2\x256\x257\f\x6\x2\x2\x257\x258\t\x6\x2\x2\x258\x260"+
		"\x5<\x1F\x2\x259\x25A\f\x5\x2\x2\x25A\x25B\a\x33\x2\x2\x25B\x260\x5\n"+
		"\x6\x2\x25C\x25D\f\x4\x2\x2\x25D\x25E\a\r\x2\x2\x25E\x260\x5\n\x6\x2\x25F"+
		"\x256\x3\x2\x2\x2\x25F\x259\x3\x2\x2\x2\x25F\x25C\x3\x2\x2\x2\x260\x263"+
		"\x3\x2\x2\x2\x261\x25F\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262;\x3\x2\x2"+
		"\x2\x263\x261\x3\x2\x2\x2\x264\x265\b\x1F\x1\x2\x265\x266\x5> \x2\x266"+
		"\x26C\x3\x2\x2\x2\x267\x268\f\x4\x2\x2\x268\x269\t\a\x2\x2\x269\x26B\x5"+
		"> \x2\x26A\x267\x3\x2\x2\x2\x26B\x26E\x3\x2\x2\x2\x26C\x26A\x3\x2\x2\x2"+
		"\x26C\x26D\x3\x2\x2\x2\x26D=\x3\x2\x2\x2\x26E\x26C\x3\x2\x2\x2\x26F\x270"+
		"\b \x1\x2\x270\x271\x5@!\x2\x271\x277\x3\x2\x2\x2\x272\x273\f\x4\x2\x2"+
		"\x273\x274\t\b\x2\x2\x274\x276\x5@!\x2\x275\x272\x3\x2\x2\x2\x276\x279"+
		"\x3\x2\x2\x2\x277\x275\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278?\x3\x2\x2"+
		"\x2\x279\x277\x3\x2\x2\x2\x27A\x27B\b!\x1\x2\x27B\x27C\x5\x42\"\x2\x27C"+
		"\x282\x3\x2\x2\x2\x27D\x27E\f\x4\x2\x2\x27E\x27F\t\t\x2\x2\x27F\x281\x5"+
		"\x42\"\x2\x280\x27D\x3\x2\x2\x2\x281\x284\x3\x2\x2\x2\x282\x280\x3\x2"+
		"\x2\x2\x282\x283\x3\x2\x2\x2\x283\x41\x3\x2\x2\x2\x284\x282\x3\x2\x2\x2"+
		"\x285\x2A2\x5\x44#\x2\x286\x287\a\x8C\x2\x2\x287\x2A2\x5\x42\"\x2\x288"+
		"\x289\a\x8D\x2\x2\x289\x2A2\x5\x42\"\x2\x28A\x28B\a\x94\x2\x2\x28B\x2A2"+
		"\x5\x42\"\x2\x28C\x28D\a\x95\x2\x2\x28D\x2A2\x5\x42\"\x2\x28E\x28F\a\x9C"+
		"\x2\x2\x28F\x2A2\x5\x42\"\x2\x290\x291\a\x9D\x2\x2\x291\x2A2\x5\x42\""+
		"\x2\x292\x293\a\xB6\x2\x2\x293\x2A2\x5\x42\"\x2\x294\x295\a\xB5\x2\x2"+
		"\x295\x2A2\x5\x42\"\x2\x296\x297\a\x86\x2\x2\x297\x298\x5\n\x6\x2\x298"+
		"\x299\a\x87\x2\x2\x299\x29A\x5\x42\"\x2\x29A\x2A2\x3\x2\x2\x2\x29B\x29C"+
		"\a\x91\x2\x2\x29C\x2A2\x5\x42\"\x2\x29D\x29E\a\x8E\x2\x2\x29E\x2A2\x5"+
		"\x42\"\x2\x29F\x2A0\a|\x2\x2\x2A0\x2A2\x5\x42\"\x2\x2A1\x285\x3\x2\x2"+
		"\x2\x2A1\x286\x3\x2\x2\x2\x2A1\x288\x3\x2\x2\x2\x2A1\x28A\x3\x2\x2\x2"+
		"\x2A1\x28C\x3\x2\x2\x2\x2A1\x28E\x3\x2\x2\x2\x2A1\x290\x3\x2\x2\x2\x2A1"+
		"\x292\x3\x2\x2\x2\x2A1\x294\x3\x2\x2\x2\x2A1\x296\x3\x2\x2\x2\x2A1\x29B"+
		"\x3\x2\x2\x2\x2A1\x29D\x3\x2\x2\x2\x2A1\x29F\x3\x2\x2\x2\x2A2\x43\x3\x2"+
		"\x2\x2\x2A3\x2A7\x5\x46$\x2\x2A4\x2A6\x5H%\x2\x2A5\x2A4\x3\x2\x2\x2\x2A6"+
		"\x2A9\x3\x2\x2\x2\x2A7\x2A5\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2B2"+
		"\x3\x2\x2\x2\x2A9\x2A7\x3\x2\x2\x2\x2AA\x2AE\x5J&\x2\x2AB\x2AD\x5H%\x2"+
		"\x2AC\x2AB\x3\x2\x2\x2\x2AD\x2B0\x3\x2\x2\x2\x2AE\x2AC\x3\x2\x2\x2\x2AE"+
		"\x2AF\x3\x2\x2\x2\x2AF\x2B2\x3\x2\x2\x2\x2B0\x2AE\x3\x2\x2\x2\x2B1\x2A3"+
		"\x3\x2\x2\x2\x2B1\x2AA\x3\x2\x2\x2\x2B2\x45\x3\x2\x2\x2\x2B3\x2B5\x5J"+
		"&\x2\x2B4\x2B6\x5N(\x2\x2B5\x2B4\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7"+
		"\x2B5\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8G\x3\x2\x2\x2\x2B9\x2BD\x5"+
		"L\'\x2\x2BA\x2BC\x5N(\x2\x2BB\x2BA\x3\x2\x2\x2\x2BC\x2BF\x3\x2\x2\x2\x2BD"+
		"\x2BB\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2E1\x3\x2\x2\x2\x2BF\x2BD"+
		"\x3\x2\x2\x2\x2C0\x2C4\x5\x176\xBC\x2\x2C1\x2C3\x5N(\x2\x2C2\x2C1\x3\x2"+
		"\x2\x2\x2C3\x2C6\x3\x2\x2\x2\x2C4\x2C2\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2"+
		"\x2\x2C5\x2E1\x3\x2\x2\x2\x2C6\x2C4\x3\x2\x2\x2\x2C7\x2CB\a\x9C\x2\x2"+
		"\x2C8\x2CA\x5N(\x2\x2C9\x2C8\x3\x2\x2\x2\x2CA\x2CD\x3\x2\x2\x2\x2CB\x2C9"+
		"\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2E1\x3\x2\x2\x2\x2CD\x2CB\x3"+
		"\x2\x2\x2\x2CE\x2D2\a\x9D\x2\x2\x2CF\x2D1\x5N(\x2\x2D0\x2CF\x3\x2\x2\x2"+
		"\x2D1\x2D4\x3\x2\x2\x2\x2D2\x2D0\x3\x2\x2\x2\x2D2\x2D3\x3\x2\x2\x2\x2D3"+
		"\x2E1\x3\x2\x2\x2\x2D4\x2D2\x3\x2\x2\x2\x2D5\x2D6\a\xA0\x2\x2\x2D6\x2D8"+
		"\x5\x17A\xBE\x2\x2D7\x2D9\x5\x1A\xE\x2\x2D8\x2D7\x3\x2\x2\x2\x2D8\x2D9"+
		"\x3\x2\x2\x2\x2D9\x2DD\x3\x2\x2\x2\x2DA\x2DC\x5N(\x2\x2DB\x2DA\x3\x2\x2"+
		"\x2\x2DC\x2DF\x3\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2"+
		"\x2DE\x2E1\x3\x2\x2\x2\x2DF\x2DD\x3\x2\x2\x2\x2E0\x2B9\x3\x2\x2\x2\x2E0"+
		"\x2C0\x3\x2\x2\x2\x2E0\x2C7\x3\x2\x2\x2\x2E0\x2CE\x3\x2\x2\x2\x2E0\x2D5"+
		"\x3\x2\x2\x2\x2E1I\x3\x2\x2\x2\x2E2\x360\x5\x140\xA1\x2\x2E3\x360\x5\x6"+
		"\x4\x2\x2E4\x2E5\a\x86\x2\x2\x2E5\x2E6\x5 \x11\x2\x2E6\x2E7\a\x87\x2\x2"+
		"\x2E7\x360\x3\x2\x2\x2\x2E8\x360\x5R*\x2\x2E9\x360\x5\xBA^\x2\x2EA\x360"+
		"\au\x2\x2\x2EB\x360\aU\x2\x2\x2EC\x2F6\a\xE\x2\x2\x2ED\x2EE\a\x88\x2\x2"+
		"\x2EE\x2F0\x5\x17A\xBE\x2\x2EF\x2F1\x5\x1A\xE\x2\x2F0\x2EF\x3\x2\x2\x2"+
		"\x2F0\x2F1\x3\x2\x2\x2\x2F1\x2F7\x3\x2\x2\x2\x2F2\x2F3\a\x84\x2\x2\x2F3"+
		"\x2F4\x5T+\x2\x2F4\x2F5\a\x85\x2\x2\x2F5\x2F7\x3\x2\x2\x2\x2F6\x2ED\x3"+
		"\x2\x2\x2\x2F6\x2F2\x3\x2\x2\x2\x2F7\x360\x3\x2\x2\x2\x2F8\x2F9\a\x39"+
		"\x2\x2\x2F9\x2FA\x5\n\x6\x2\x2FA\x2FB\x5\x178\xBD\x2\x2FB\x360\x3\x2\x2"+
		"\x2\x2FC\x2FD\a\x39\x2\x2\x2FD\x309\a\x82\x2\x2\x2FE\x303\x5V,\x2\x2FF"+
		"\x300\a\x89\x2\x2\x300\x302\x5V,\x2\x301\x2FF\x3\x2\x2\x2\x302\x305\x3"+
		"\x2\x2\x2\x303\x301\x3\x2\x2\x2\x303\x304\x3\x2\x2\x2\x304\x307\x3\x2"+
		"\x2\x2\x305\x303\x3\x2\x2\x2\x306\x308\a\x89\x2\x2\x307\x306\x3\x2\x2"+
		"\x2\x307\x308\x3\x2\x2\x2\x308\x30A\x3\x2\x2\x2\x309\x2FE\x3\x2\x2\x2"+
		"\x309\x30A\x3\x2\x2\x2\x30A\x30B\x3\x2\x2\x2\x30B\x360\a\x83\x2\x2\x30C"+
		"\x326\a\x39\x2\x2\x30D\x321\x5\n\x6\x2\x30E\x30F\a\x84\x2\x2\x30F\x310"+
		"\x5T+\x2\x310\x314\a\x85\x2\x2\x311\x313\x5\x11C\x8F\x2\x312\x311\x3\x2"+
		"\x2\x2\x313\x316\x3\x2\x2\x2\x314\x312\x3\x2\x2\x2\x314\x315\x3\x2\x2"+
		"\x2\x315\x318\x3\x2\x2\x2\x316\x314\x3\x2\x2\x2\x317\x319\x5\x11E\x90"+
		"\x2\x318\x317\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2\x319\x322\x3\x2\x2\x2"+
		"\x31A\x31C\x5\x11C\x8F\x2\x31B\x31A\x3\x2\x2\x2\x31C\x31D\x3\x2\x2\x2"+
		"\x31D\x31B\x3\x2\x2\x2\x31D\x31E\x3\x2\x2\x2\x31E\x31F\x3\x2\x2\x2\x31F"+
		"\x320\x5\x11E\x90\x2\x320\x322\x3\x2\x2\x2\x321\x30E\x3\x2\x2\x2\x321"+
		"\x31B\x3\x2\x2\x2\x322\x327\x3\x2\x2\x2\x323\x324\x5\x11C\x8F\x2\x324"+
		"\x325\x5\x11E\x90\x2\x325\x327\x3\x2\x2\x2\x326\x30D\x3\x2\x2\x2\x326"+
		"\x323\x3\x2\x2\x2\x327\x360\x3\x2\x2\x2\x328\x329\aZ\x2\x2\x329\x32D\a"+
		"\x86\x2\x2\x32A\x32E\x5X-\x2\x32B\x32E\x5\n\x6\x2\x32C\x32E\a\x63\x2\x2"+
		"\x32D\x32A\x3\x2\x2\x2\x32D\x32B\x3\x2\x2\x2\x32D\x32C\x3\x2\x2\x2\x32E"+
		"\x32F\x3\x2\x2\x2\x32F\x360\a\x87\x2\x2\x330\x331\a\x15\x2\x2\x331\x332"+
		"\a\x86\x2\x2\x332\x333\x5 \x11\x2\x333\x334\a\x87\x2\x2\x334\x360\x3\x2"+
		"\x2\x2\x335\x336\a^\x2\x2\x336\x337\a\x86\x2\x2\x337\x338\x5 \x11\x2\x338"+
		"\x339\a\x87\x2\x2\x339\x360\x3\x2\x2\x2\x33A\x33B\a\x1B\x2\x2\x33B\x33C"+
		"\a\x86\x2\x2\x33C\x33D\x5\n\x6\x2\x33D\x33E\a\x87\x2\x2\x33E\x360\x3\x2"+
		"\x2\x2\x33F\x345\a\x1C\x2\x2\x340\x342\a\x86\x2\x2\x341\x343\x5`\x31\x2"+
		"\x342\x341\x3\x2\x2\x2\x342\x343\x3\x2\x2\x2\x343\x344\x3\x2\x2\x2\x344"+
		"\x346\a\x87\x2\x2\x345\x340\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346\x347"+
		"\x3\x2\x2\x2\x347\x360\x5\x88\x45\x2\x348\x349\aO\x2\x2\x349\x34A\a\x86"+
		"\x2\x2\x34A\x34B\x5\n\x6\x2\x34B\x34C\a\x87\x2\x2\x34C\x360\x3\x2\x2\x2"+
		"\x34D\x34E\aP\x2\x2\x34E\x34F\a\x86\x2\x2\x34F\x350\x5 \x11\x2\x350\x351"+
		"\a\x87\x2\x2\x351\x360\x3\x2\x2\x2\x352\x353\a\x37\x2\x2\x353\x359\a\x86"+
		"\x2\x2\x354\x355\x5\x17A\xBE\x2\x355\x356\a\x88\x2\x2\x356\x358\x3\x2"+
		"\x2\x2\x357\x354\x3\x2\x2\x2\x358\x35B\x3\x2\x2\x2\x359\x357\x3\x2\x2"+
		"\x2\x359\x35A\x3\x2\x2\x2\x35A\x35C\x3\x2\x2\x2\x35B\x359\x3\x2\x2\x2"+
		"\x35C\x35D\x5\x17A\xBE\x2\x35D\x35E\a\x87\x2\x2\x35E\x360\x3\x2\x2\x2"+
		"\x35F\x2E2\x3\x2\x2\x2\x35F\x2E3\x3\x2\x2\x2\x35F\x2E4\x3\x2\x2\x2\x35F"+
		"\x2E8\x3\x2\x2\x2\x35F\x2E9\x3\x2\x2\x2\x35F\x2EA\x3\x2\x2\x2\x35F\x2EB"+
		"\x3\x2\x2\x2\x35F\x2EC\x3\x2\x2\x2\x35F\x2F8\x3\x2\x2\x2\x35F\x2FC\x3"+
		"\x2\x2\x2\x35F\x30C\x3\x2\x2\x2\x35F\x328\x3\x2\x2\x2\x35F\x330\x3\x2"+
		"\x2\x2\x35F\x335\x3\x2\x2\x2\x35F\x33A\x3\x2\x2\x2\x35F\x33F\x3\x2\x2"+
		"\x2\x35F\x348\x3\x2\x2\x2\x35F\x34D\x3\x2\x2\x2\x35F\x352\x3\x2\x2\x2"+
		"\x360K\x3\x2\x2\x2\x361\x363\a\x99\x2\x2\x362\x361\x3\x2\x2\x2\x362\x363"+
		"\x3\x2\x2\x2\x363\x364\x3\x2\x2\x2\x364\x365\a\x88\x2\x2\x365\x367\x5"+
		"\x17A\xBE\x2\x366\x368\x5\x1A\xE\x2\x367\x366\x3\x2\x2\x2\x367\x368\x3"+
		"\x2\x2\x2\x368M\x3\x2\x2\x2\x369\x36B\a\x99\x2\x2\x36A\x369\x3\x2\x2\x2"+
		"\x36A\x36B\x3\x2\x2\x2\x36B\x36C\x3\x2\x2\x2\x36C\x36D\a\x84\x2\x2\x36D"+
		"\x372\x5P)\x2\x36E\x36F\a\x89\x2\x2\x36F\x371\x5P)\x2\x370\x36E\x3\x2"+
		"\x2\x2\x371\x374\x3\x2\x2\x2\x372\x370\x3\x2\x2\x2\x372\x373\x3\x2\x2"+
		"\x2\x373\x375\x3\x2\x2\x2\x374\x372\x3\x2\x2\x2\x375\x376\a\x85\x2\x2"+
		"\x376O\x3\x2\x2\x2\x377\x378\x5\x17A\xBE\x2\x378\x379\a\x8A\x2\x2\x379"+
		"\x37B\x3\x2\x2\x2\x37A\x377\x3\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37C"+
		"\x3\x2\x2\x2\x37C\x37D\x5 \x11\x2\x37DQ\x3\x2\x2\x2\x37E\x37F\t\n\x2\x2"+
		"\x37FS\x3\x2\x2\x2\x380\x385\x5 \x11\x2\x381\x382\a\x89\x2\x2\x382\x384"+
		"\x5 \x11\x2\x383\x381\x3\x2\x2\x2\x384\x387\x3\x2\x2\x2\x385\x383\x3\x2"+
		"\x2\x2\x385\x386\x3\x2\x2\x2\x386U\x3\x2\x2\x2\x387\x385\x3\x2\x2\x2\x388"+
		"\x38E\x5\x44#\x2\x389\x38A\x5\x17A\xBE\x2\x38A\x38B\a\x96\x2\x2\x38B\x38C"+
		"\x5 \x11\x2\x38C\x38E\x3\x2\x2\x2\x38D\x388\x3\x2\x2\x2\x38D\x389\x3\x2"+
		"\x2\x2\x38EW\x3\x2\x2\x2\x38F\x398\x5\x17A\xBE\x2\x390\x392\x5Z.\x2\x391"+
		"\x390\x3\x2\x2\x2\x391\x392\x3\x2\x2\x2\x392\x399\x3\x2\x2\x2\x393\x394"+
		"\a\x9A\x2\x2\x394\x396\x5\x17A\xBE\x2\x395\x397\x5Z.\x2\x396\x395\x3\x2"+
		"\x2\x2\x396\x397\x3\x2\x2\x2\x397\x399\x3\x2\x2\x2\x398\x391\x3\x2\x2"+
		"\x2\x398\x393\x3\x2\x2\x2\x399\x3A1\x3\x2\x2\x2\x39A\x39B\a\x88\x2\x2"+
		"\x39B\x39D\x5\x17A\xBE\x2\x39C\x39E\x5Z.\x2\x39D\x39C\x3\x2\x2\x2\x39D"+
		"\x39E\x3\x2\x2\x2\x39E\x3A0\x3\x2\x2\x2\x39F\x39A\x3\x2\x2\x2\x3A0\x3A3"+
		"\x3\x2\x2\x2\x3A1\x39F\x3\x2\x2\x2\x3A1\x3A2\x3\x2\x2\x2\x3A2Y\x3\x2\x2"+
		"\x2\x3A3\x3A1\x3\x2\x2\x2\x3A4\x3A8\a\x97\x2\x2\x3A5\x3A7\a\x89\x2\x2"+
		"\x3A6\x3A5\x3\x2\x2\x2\x3A7\x3AA\x3\x2\x2\x2\x3A8\x3A6\x3\x2\x2\x2\x3A8"+
		"\x3A9\x3\x2\x2\x2\x3A9\x3AB\x3\x2\x2\x2\x3AA\x3A8\x3\x2\x2\x2\x3AB\x3AC"+
		"\a\x98\x2\x2\x3AC[\x3\x2\x2\x2\x3AD\x3AE\x5^\x30\x2\x3AE\x3AF\a\xD2\x2"+
		"\x2\x3AF\x3B0\x5\x66\x34\x2\x3B0]\x3\x2\x2\x2\x3B1\x3B2\a\x86\x2\x2\x3B2"+
		"\x3BD\a\x87\x2\x2\x3B3\x3B4\a\x86\x2\x2\x3B4\x3B5\x5`\x31\x2\x3B5\x3B6"+
		"\a\x87\x2\x2\x3B6\x3BD\x3\x2\x2\x2\x3B7\x3B8\a\x86\x2\x2\x3B8\x3B9\x5"+
		"\x64\x33\x2\x3B9\x3BA\a\x87\x2\x2\x3BA\x3BD\x3\x2\x2\x2\x3BB\x3BD\x5\x17A"+
		"\xBE\x2\x3BC\x3B1\x3\x2\x2\x2\x3BC\x3B3\x3\x2\x2\x2\x3BC\x3B7\x3\x2\x2"+
		"\x2\x3BC\x3BB\x3\x2\x2\x2\x3BD_\x3\x2\x2\x2\x3BE\x3C3\x5\x62\x32\x2\x3BF"+
		"\x3C0\a\x89\x2\x2\x3C0\x3C2\x5\x62\x32\x2\x3C1\x3BF\x3\x2\x2\x2\x3C2\x3C5"+
		"\x3\x2\x2\x2\x3C3\x3C1\x3\x2\x2\x2\x3C3\x3C4\x3\x2\x2\x2\x3C4\x61\x3\x2"+
		"\x2\x2\x3C5\x3C3\x3\x2\x2\x2\x3C6\x3C8\t\x4\x2\x2\x3C7\x3C6\x3\x2\x2\x2"+
		"\x3C7\x3C8\x3\x2\x2\x2\x3C8\x3C9\x3\x2\x2\x2\x3C9\x3CA\x5\n\x6\x2\x3CA"+
		"\x3CB\x5\x17A\xBE\x2\x3CB\x63\x3\x2\x2\x2\x3CC\x3D1\x5\x17A\xBE\x2\x3CD"+
		"\x3CE\a\x89\x2\x2\x3CE\x3D0\x5\x17A\xBE\x2\x3CF\x3CD\x3\x2\x2\x2\x3D0"+
		"\x3D3\x3\x2\x2\x2\x3D1\x3CF\x3\x2\x2\x2\x3D1\x3D2\x3\x2\x2\x2\x3D2\x65"+
		"\x3\x2\x2\x2\x3D3\x3D1\x3\x2\x2\x2\x3D4\x3D7\x5 \x11\x2\x3D5\x3D7\x5\x88"+
		"\x45\x2\x3D6\x3D4\x3\x2\x2\x2\x3D6\x3D5\x3\x2\x2\x2\x3D7g\x3\x2\x2\x2"+
		"\x3D8\x3D9\x5j\x36\x2\x3D9\x3DA\x5l\x37\x2\x3DAi\x3\x2\x2\x2\x3DB\x3DD"+
		"\an\x2\x2\x3DC\x3DE\x5\n\x6\x2\x3DD\x3DC\x3\x2\x2\x2\x3DD\x3DE\x3\x2\x2"+
		"\x2\x3DE\x3DF\x3\x2\x2\x2\x3DF\x3E0\x5\x17A\xBE\x2\x3E0\x3E1\a.\x2\x2"+
		"\x3E1\x3E2\x5 \x11\x2\x3E2k\x3\x2\x2\x2\x3E3\x3E5\x5n\x38\x2\x3E4\x3E3"+
		"\x3\x2\x2\x2\x3E5\x3E8\x3\x2\x2\x2\x3E6\x3E4\x3\x2\x2\x2\x3E6\x3E7\x3"+
		"\x2\x2\x2\x3E7\x3E9\x3\x2\x2\x2\x3E8\x3E6\x3\x2\x2\x2\x3E9\x3EB\x5z>\x2"+
		"\x3EA\x3EC\x5\x80\x41\x2\x3EB\x3EA\x3\x2\x2\x2\x3EB\x3EC\x3\x2\x2\x2\x3EC"+
		"m\x3\x2\x2\x2\x3ED\x3F3\x5j\x36\x2\x3EE\x3F3\x5p\x39\x2\x3EF\x3F3\x5r"+
		":\x2\x3F0\x3F3\x5t;\x2\x3F1\x3F3\x5v<\x2\x3F2\x3ED\x3\x2\x2\x2\x3F2\x3EE"+
		"\x3\x2\x2\x2\x3F2\x3EF\x3\x2\x2\x2\x3F2\x3F0\x3\x2\x2\x2\x3F2\x3F1\x3"+
		"\x2\x2\x2\x3F3o\x3\x2\x2\x2\x3F4\x3F5\ar\x2\x2\x3F5\x3F6\x5\x17A\xBE\x2"+
		"\x3F6\x3F7\a\x96\x2\x2\x3F7\x3F8\x5 \x11\x2\x3F8q\x3\x2\x2\x2\x3F9\x3FA"+
		"\a\x66\x2\x2\x3FA\x3FB\x5 \x11\x2\x3FBs\x3\x2\x2\x2\x3FC\x3FE\aq\x2\x2"+
		"\x3FD\x3FF\x5\n\x6\x2\x3FE\x3FD\x3\x2\x2\x2\x3FE\x3FF\x3\x2\x2\x2\x3FF"+
		"\x400\x3\x2\x2\x2\x400\x401\x5\x17A\xBE\x2\x401\x402\a.\x2\x2\x402\x403"+
		"\x5 \x11\x2\x403\x404\a=\x2\x2\x404\x405\x5 \x11\x2\x405\x406\am\x2\x2"+
		"\x406\x409\x5 \x11\x2\x407\x408\ap\x2\x2\x408\x40A\x5\x17A\xBE\x2\x409"+
		"\x407\x3\x2\x2\x2\x409\x40A\x3\x2\x2\x2\x40Au\x3\x2\x2\x2\x40B\x40C\a"+
		"s\x2\x2\x40C\x411\x5x=\x2\x40D\x40E\a\x89\x2\x2\x40E\x410\x5x=\x2\x40F"+
		"\x40D\x3\x2\x2\x2\x410\x413\x3\x2\x2\x2\x411\x40F\x3\x2\x2\x2\x411\x412"+
		"\x3\x2\x2\x2\x412w\x3\x2\x2\x2\x413\x411\x3\x2\x2\x2\x414\x416\x5 \x11"+
		"\x2\x415\x417\t\v\x2\x2\x416\x415\x3\x2\x2\x2\x416\x417\x3\x2\x2\x2\x417"+
		"y\x3\x2\x2\x2\x418\x41B\x5~@\x2\x419\x41B\x5|?\x2\x41A\x418\x3\x2\x2\x2"+
		"\x41A\x419\x3\x2\x2\x2\x41B{\x3\x2\x2\x2\x41C\x41D\ao\x2\x2\x41D\x41E"+
		"\x5 \x11\x2\x41E\x41F\ak\x2\x2\x41F\x420\x5 \x11\x2\x420}\x3\x2\x2\x2"+
		"\x421\x422\ai\x2\x2\x422\x423\x5 \x11\x2\x423\x7F\x3\x2\x2\x2\x424\x425"+
		"\ap\x2\x2\x425\x426\x5\x17A\xBE\x2\x426\x427\x5l\x37\x2\x427\x81\x3\x2"+
		"\x2\x2\x428\x429\x5\x17A\xBE\x2\x429\x42A\a\x8A\x2\x2\x42A\x42B\x5\x82"+
		"\x42\x2\x42B\x434\x3\x2\x2\x2\x42C\x42F\x5\x8A\x46\x2\x42D\x42F\x5\x8E"+
		"H\x2\x42E\x42C\x3\x2\x2\x2\x42E\x42D\x3\x2\x2\x2\x42F\x430\x3\x2\x2\x2"+
		"\x430\x431\a\x8B\x2\x2\x431\x434\x3\x2\x2\x2\x432\x434\x5\x84\x43\x2\x433"+
		"\x428\x3\x2\x2\x2\x433\x42E\x3\x2\x2\x2\x433\x432\x3\x2\x2\x2\x434\x83"+
		"\x3\x2\x2\x2\x435\x438\x5\x88\x45\x2\x436\x438\x5\x86\x44\x2\x437\x435"+
		"\x3\x2\x2\x2\x437\x436\x3\x2\x2\x2\x438\x85\x3\x2\x2\x2\x439\x4CA\a\x8B"+
		"\x2\x2\x43A\x43B\x5 \x11\x2\x43B\x43C\a\x8B\x2\x2\x43C\x4CA\x3\x2\x2\x2"+
		"\x43D\x43E\a+\x2\x2\x43E\x43F\a\x86\x2\x2\x43F\x440\x5 \x11\x2\x440\x441"+
		"\a\x87\x2\x2\x441\x444\x5\x90I\x2\x442\x443\a\x1F\x2\x2\x443\x445\x5\x90"+
		"I\x2\x444\x442\x3\x2\x2\x2\x444\x445\x3\x2\x2\x2\x445\x4CA\x3\x2\x2\x2"+
		"\x446\x447\aT\x2\x2\x447\x448\a\x86\x2\x2\x448\x449\x5 \x11\x2\x449\x44A"+
		"\a\x87\x2\x2\x44A\x44E\a\x82\x2\x2\x44B\x44D\x5\x92J\x2\x44C\x44B\x3\x2"+
		"\x2\x2\x44D\x450\x3\x2\x2\x2\x44E\x44C\x3\x2\x2\x2\x44E\x44F\x3\x2\x2"+
		"\x2\x44F\x451\x3\x2\x2\x2\x450\x44E\x3\x2\x2\x2\x451\x452\a\x83\x2\x2"+
		"\x452\x4CA\x3\x2\x2\x2\x453\x454\ag\x2\x2\x454\x455\a\x86\x2\x2\x455\x456"+
		"\x5 \x11\x2\x456\x457\a\x87\x2\x2\x457\x458\x5\x84\x43\x2\x458\x4CA\x3"+
		"\x2\x2\x2\x459\x45A\ag\x2\x2\x45A\x45B\a\x86\x2\x2\x45B\x45C\x5 \x11\x2"+
		"\x45C\x45D\a\x87\x2\x2\x45D\x45E\x5\x84\x43\x2\x45E\x45F\a\x1F\x2\x2\x45F"+
		"\x460\x5\x84\x43\x2\x460\x4CA\x3\x2\x2\x2\x461\x462\a\x1D\x2\x2\x462\x463"+
		"\x5\x84\x43\x2\x463\x464\ag\x2\x2\x464\x465\a\x86\x2\x2\x465\x466\x5 "+
		"\x11\x2\x466\x467\a\x87\x2\x2\x467\x468\a\x8B\x2\x2\x468\x4CA\x3\x2\x2"+
		"\x2\x469\x46A\a\'\x2\x2\x46A\x46C\a\x86\x2\x2\x46B\x46D\x5\x98M\x2\x46C"+
		"\x46B\x3\x2\x2\x2\x46C\x46D\x3\x2\x2\x2\x46D\x46E\x3\x2\x2\x2\x46E\x470"+
		"\a\x8B\x2\x2\x46F\x471\x5 \x11\x2\x470\x46F\x3\x2\x2\x2\x470\x471\x3\x2"+
		"\x2\x2\x471\x472\x3\x2\x2\x2\x472\x474\a\x8B\x2\x2\x473\x475\x5\x9AN\x2"+
		"\x474\x473\x3\x2\x2\x2\x474\x475\x3\x2\x2\x2\x475\x476\x3\x2\x2\x2\x476"+
		"\x477\a\x87\x2\x2\x477\x4CA\x5\x84\x43\x2\x478\x479\a(\x2\x2\x479\x47A"+
		"\a\x86\x2\x2\x47A\x47B\x5\n\x6\x2\x47B\x47C\x5\x17A\xBE\x2\x47C\x47D\a"+
		".\x2\x2\x47D\x47E\x5 \x11\x2\x47E\x47F\a\x87\x2\x2\x47F\x480\x5\x84\x43"+
		"\x2\x480\x4CA\x3\x2\x2\x2\x481\x482\a\x10\x2\x2\x482\x4CA\a\x8B\x2\x2"+
		"\x483\x484\a\x18\x2\x2\x484\x4CA\a\x8B\x2\x2\x485\x486\a*\x2\x2\x486\x487"+
		"\x5\x17A\xBE\x2\x487\x488\a\x8B\x2\x2\x488\x4CA\x3\x2\x2\x2\x489\x48A"+
		"\a*\x2\x2\x48A\x48B\a\x12\x2\x2\x48B\x48C\x5 \x11\x2\x48C\x48D\a\x8B\x2"+
		"\x2\x48D\x4CA\x3\x2\x2\x2\x48E\x48F\a*\x2\x2\x48F\x490\a\x1B\x2\x2\x490"+
		"\x4CA\a\x8B\x2\x2\x491\x493\aJ\x2\x2\x492\x494\x5 \x11\x2\x493\x492\x3"+
		"\x2\x2\x2\x493\x494\x3\x2\x2\x2\x494\x495\x3\x2\x2\x2\x495\x4CA\a\x8B"+
		"\x2\x2\x496\x498\aW\x2\x2\x497\x499\x5 \x11\x2\x498\x497\x3\x2\x2\x2\x498"+
		"\x499\x3\x2\x2\x2\x499\x49A\x3\x2\x2\x2\x49A\x4CA\a\x8B\x2\x2\x49B\x49C"+
		"\aY\x2\x2\x49C\x49D\x5\x88\x45\x2\x49D\x49E\x5\xA4S\x2\x49E\x4CA\x3\x2"+
		"\x2\x2\x49F\x4A0\aY\x2\x2\x4A0\x4A1\x5\x88\x45\x2\x4A1\x4A3\x5\x9CO\x2"+
		"\x4A2\x4A4\x5\xA4S\x2\x4A3\x4A2\x3\x2\x2\x2\x4A3\x4A4\x3\x2\x2\x2\x4A4"+
		"\x4CA\x3\x2\x2\x2\x4A5\x4A6\a\x15\x2\x2\x4A6\x4CA\x5\x88\x45\x2\x4A7\x4A8"+
		"\a^\x2\x2\x4A8\x4CA\x5\x88\x45\x2\x4A9\x4AA\a\x35\x2\x2\x4AA\x4AB\a\x86"+
		"\x2\x2\x4AB\x4AC\x5 \x11\x2\x4AC\x4AD\a\x87\x2\x2\x4AD\x4AE\x5\x84\x43"+
		"\x2\x4AE\x4CA\x3\x2\x2\x2\x4AF\x4B0\a\x61\x2\x2\x4B0\x4B1\a\x86\x2\x2"+
		"\x4B1\x4B2\x5\xA6T\x2\x4B2\x4B3\a\x87\x2\x2\x4B3\x4B4\x5\x84\x43\x2\x4B4"+
		"\x4CA\x3\x2\x2\x2\x4B5\x4B6\ah\x2\x2\x4B6\x4B7\aJ\x2\x2\x4B7\x4B8\x5 "+
		"\x11\x2\x4B8\x4B9\a\x8B\x2\x2\x4B9\x4CA\x3\x2\x2\x2\x4BA\x4BB\ah\x2\x2"+
		"\x4BB\x4BC\a\x10\x2\x2\x4BC\x4CA\a\x8B\x2\x2\x4BD\x4BE\a;\x2\x2\x4BE\x4BF"+
		"\x5\x17A\xBE\x2\x4BF\x4C0\a\x8B\x2\x2\x4C0\x4CA\x3\x2\x2\x2\x4C1\x4C2"+
		"\a\xD3\x2\x2\x4C2\x4C3\a\x86\x2\x2\x4C3\x4C4\x5 \x11\x2\x4C4\x4C5\a\x87"+
		"\x2\x2\x4C5\x4C6\x5\x84\x43\x2\x4C6\x4CA\x3\x2\x2\x2\x4C7\x4C8\a_\x2\x2"+
		"\x4C8\x4CA\x5\x88\x45\x2\x4C9\x439\x3\x2\x2\x2\x4C9\x43A\x3\x2\x2\x2\x4C9"+
		"\x43D\x3\x2\x2\x2\x4C9\x446\x3\x2\x2\x2\x4C9\x453\x3\x2\x2\x2\x4C9\x459"+
		"\x3\x2\x2\x2\x4C9\x461\x3\x2\x2\x2\x4C9\x469\x3\x2\x2\x2\x4C9\x478\x3"+
		"\x2\x2\x2\x4C9\x481\x3\x2\x2\x2\x4C9\x483\x3\x2\x2\x2\x4C9\x485\x3\x2"+
		"\x2\x2\x4C9\x489\x3\x2\x2\x2\x4C9\x48E\x3\x2\x2\x2\x4C9\x491\x3\x2\x2"+
		"\x2\x4C9\x496\x3\x2\x2\x2\x4C9\x49B\x3\x2\x2\x2\x4C9\x49F\x3\x2\x2\x2"+
		"\x4C9\x4A5\x3\x2\x2\x2\x4C9\x4A7\x3\x2\x2\x2\x4C9\x4A9\x3\x2\x2\x2\x4C9"+
		"\x4AF\x3\x2\x2\x2\x4C9\x4B5\x3\x2\x2\x2\x4C9\x4BA\x3\x2\x2\x2\x4C9\x4BD"+
		"\x3\x2\x2\x2\x4C9\x4C1\x3\x2\x2\x2\x4C9\x4C7\x3\x2\x2\x2\x4CA\x87\x3\x2"+
		"\x2\x2\x4CB\x4CD\a\x82\x2\x2\x4CC\x4CE\x5\x96L\x2\x4CD\x4CC\x3\x2\x2\x2"+
		"\x4CD\x4CE\x3\x2\x2\x2\x4CE\x4CF\x3\x2\x2\x2\x4CF\x4D0\a\x83\x2\x2\x4D0"+
		"\x89\x3\x2\x2\x2\x4D1\x4D2\x5\n\x6\x2\x4D2\x4D7\x5\x8CG\x2\x4D3\x4D4\a"+
		"\x89\x2\x2\x4D4\x4D6\x5\x8CG\x2\x4D5\x4D3\x3\x2\x2\x2\x4D6\x4D9\x3\x2"+
		"\x2\x2\x4D7\x4D5\x3\x2\x2\x2\x4D7\x4D8\x3\x2\x2\x2\x4D8\x8B\x3\x2\x2\x2"+
		"\x4D9\x4D7\x3\x2\x2\x2\x4DA\x4DD\x5\x17A\xBE\x2\x4DB\x4DC\a\x96\x2\x2"+
		"\x4DC\x4DE\x5\xEAv\x2\x4DD\x4DB\x3\x2\x2\x2\x4DD\x4DE\x3\x2\x2\x2\x4DE"+
		"\x8D\x3\x2\x2\x2\x4DF\x4E0\a\x17\x2\x2\x4E0\x4E1\x5\n\x6\x2\x4E1\x4E2"+
		"\x5\xE2r\x2\x4E2\x8F\x3\x2\x2\x2\x4E3\x4E6\x5\x88\x45\x2\x4E4\x4E6\x5"+
		"\x86\x44\x2\x4E5\x4E3\x3\x2\x2\x2\x4E5\x4E4\x3\x2\x2\x2\x4E6\x91\x3\x2"+
		"\x2\x2\x4E7\x4E9\x5\x94K\x2\x4E8\x4E7\x3\x2\x2\x2\x4E9\x4EA\x3\x2\x2\x2"+
		"\x4EA\x4E8\x3\x2\x2\x2\x4EA\x4EB\x3\x2\x2\x2\x4EB\x4EC\x3\x2\x2\x2\x4EC"+
		"\x4ED\x5\x96L\x2\x4ED\x93\x3\x2\x2\x2\x4EE\x4EF\a\x12\x2\x2\x4EF\x4F0"+
		"\x5 \x11\x2\x4F0\x4F1\a\x8A\x2\x2\x4F1\x4F5\x3\x2\x2\x2\x4F2\x4F3\a\x1B"+
		"\x2\x2\x4F3\x4F5\a\x8A\x2\x2\x4F4\x4EE\x3\x2\x2\x2\x4F4\x4F2\x3\x2\x2"+
		"\x2\x4F5\x95\x3\x2\x2\x2\x4F6\x4F8\x5\x82\x42\x2\x4F7\x4F6\x3\x2\x2\x2"+
		"\x4F8\x4F9\x3\x2\x2\x2\x4F9\x4F7\x3\x2\x2\x2\x4F9\x4FA\x3\x2\x2\x2\x4FA"+
		"\x97\x3\x2\x2\x2\x4FB\x505\x5\x8A\x46\x2\x4FC\x501\x5 \x11\x2\x4FD\x4FE"+
		"\a\x89\x2\x2\x4FE\x500\x5 \x11\x2\x4FF\x4FD\x3\x2\x2\x2\x500\x503\x3\x2"+
		"\x2\x2\x501\x4FF\x3\x2\x2\x2\x501\x502\x3\x2\x2\x2\x502\x505\x3\x2\x2"+
		"\x2\x503\x501\x3\x2\x2\x2\x504\x4FB\x3\x2\x2\x2\x504\x4FC\x3\x2\x2\x2"+
		"\x505\x99\x3\x2\x2\x2\x506\x50B\x5 \x11\x2\x507\x508\a\x89\x2\x2\x508"+
		"\x50A\x5 \x11\x2\x509\x507\x3\x2\x2\x2\x50A\x50D\x3\x2\x2\x2\x50B\x509"+
		"\x3\x2\x2\x2\x50B\x50C\x3\x2\x2\x2\x50C\x9B\x3\x2\x2\x2\x50D\x50B\x3\x2"+
		"\x2\x2\x50E\x512\x5\x9EP\x2\x50F\x511\x5\x9EP\x2\x510\x50F\x3\x2\x2\x2"+
		"\x511\x514\x3\x2\x2\x2\x512\x510\x3\x2\x2\x2\x512\x513\x3\x2\x2\x2\x513"+
		"\x516\x3\x2\x2\x2\x514\x512\x3\x2\x2\x2\x515\x517\x5\xA0Q\x2\x516\x515"+
		"\x3\x2\x2\x2\x516\x517\x3\x2\x2\x2\x517\x51A\x3\x2\x2\x2\x518\x51A\x5"+
		"\xA0Q\x2\x519\x50E\x3\x2\x2\x2\x519\x518\x3\x2\x2\x2\x51A\x9D\x3\x2\x2"+
		"\x2\x51B\x51C\a\x13\x2\x2\x51C\x51D\a\x86\x2\x2\x51D\x51F\x5\x4\x3\x2"+
		"\x51E\x520\x5\x17A\xBE\x2\x51F\x51E\x3\x2\x2\x2\x51F\x520\x3\x2\x2\x2"+
		"\x520\x521\x3\x2\x2\x2\x521\x523\a\x87\x2\x2\x522\x524\x5\xA2R\x2\x523"+
		"\x522\x3\x2\x2\x2\x523\x524\x3\x2\x2\x2\x524\x525\x3\x2\x2\x2\x525\x526"+
		"\x5\x88\x45\x2\x526\x9F\x3\x2\x2\x2\x527\x529\a\x13\x2\x2\x528\x52A\x5"+
		"\xA2R\x2\x529\x528\x3\x2\x2\x2\x529\x52A\x3\x2\x2\x2\x52A\x52B\x3\x2\x2"+
		"\x2\x52B\x52C\x5\x88\x45\x2\x52C\xA1\x3\x2\x2\x2\x52D\x52E\a\x65\x2\x2"+
		"\x52E\x52F\a\x86\x2\x2\x52F\x530\x5 \x11\x2\x530\x531\a\x87\x2\x2\x531"+
		"\xA3\x3\x2\x2\x2\x532\x533\a%\x2\x2\x533\x534\x5\x88\x45\x2\x534\xA5\x3"+
		"\x2\x2\x2\x535\x538\x5\x8A\x46\x2\x536\x538\x5 \x11\x2\x537\x535\x3\x2"+
		"\x2\x2\x537\x536\x3\x2\x2\x2\x538\xA7\x3\x2\x2\x2\x539\x53A\a\x38\x2\x2"+
		"\x53A\x53B\x5\xAAV\x2\x53B\x53D\x5\xACW\x2\x53C\x53E\a\x8B\x2\x2\x53D"+
		"\x53C\x3\x2\x2\x2\x53D\x53E\x3\x2\x2\x2\x53E\xA9\x3\x2\x2\x2\x53F\x544"+
		"\x5\x17A\xBE\x2\x540\x541\a\x88\x2\x2\x541\x543\x5\x17A\xBE\x2\x542\x540"+
		"\x3\x2\x2\x2\x543\x546\x3\x2\x2\x2\x544\x542\x3\x2\x2\x2\x544\x545\x3"+
		"\x2\x2\x2\x545\xAB\x3\x2\x2\x2\x546\x544\x3\x2\x2\x2\x547\x549\a\x82\x2"+
		"\x2\x548\x54A\x5\xAEX\x2\x549\x548\x3\x2\x2\x2\x549\x54A\x3\x2\x2\x2\x54A"+
		"\x54C\x3\x2\x2\x2\x54B\x54D\x5\xB2Z\x2\x54C\x54B\x3\x2\x2\x2\x54C\x54D"+
		"\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x54F\a\x83\x2\x2\x54F\xAD\x3\x2"+
		"\x2\x2\x550\x552\x5\xB0Y\x2\x551\x550\x3\x2\x2\x2\x552\x553\x3\x2\x2\x2"+
		"\x553\x551\x3\x2\x2\x2\x553\x554\x3\x2\x2\x2\x554\xAF\x3\x2\x2\x2\x555"+
		"\x556\a-\x2\x2\x556\x557\x5\x17A\xBE\x2\x557\x558\a\x96\x2\x2\x558\x559"+
		"\x5\x4\x3\x2\x559\x55A\a\x8B\x2\x2\x55A\x560\x3\x2\x2\x2\x55B\x55C\a-"+
		"\x2\x2\x55C\x55D\x5\x4\x3\x2\x55D\x55E\a\x8B\x2\x2\x55E\x560\x3\x2\x2"+
		"\x2\x55F\x555\x3\x2\x2\x2\x55F\x55B\x3\x2\x2\x2\x560\xB1\x3\x2\x2\x2\x561"+
		"\x563\x5\xB4[\x2\x562\x561\x3\x2\x2\x2\x563\x564\x3\x2\x2\x2\x564\x562"+
		"\x3\x2\x2\x2\x564\x565\x3\x2\x2\x2\x565\xB3\x3\x2\x2\x2\x566\x569\x5\xA8"+
		"U\x2\x567\x569\x5\xB8]\x2\x568\x566\x3\x2\x2\x2\x568\x567\x3\x2\x2\x2"+
		"\x569\xB5\x3\x2\x2\x2\x56A\x575\x5\x168\xB5\x2\x56B\x575\x5\x170\xB9\x2"+
		"\x56C\x575\x5\x166\xB4\x2\x56D\x575\x5\x16A\xB6\x2\x56E\x575\x5\x172\xBA"+
		"\x2\x56F\x575\x5\x164\xB3\x2\x570\x575\x5\x162\xB2\x2\x571\x575\x5\x110"+
		"\x89\x2\x572\x575\x5\x154\xAB\x2\x573\x575\x5\x156\xAC\x2\x574\x56A\x3"+
		"\x2\x2\x2\x574\x56B\x3\x2\x2\x2\x574\x56C\x3\x2\x2\x2\x574\x56D\x3\x2"+
		"\x2\x2\x574\x56E\x3\x2\x2\x2\x574\x56F\x3\x2\x2\x2\x574\x570\x3\x2\x2"+
		"\x2\x574\x571\x3\x2\x2\x2\x574\x572\x3\x2\x2\x2\x574\x573\x3\x2\x2\x2"+
		"\x575\xB7\x3\x2\x2\x2\x576\x57D\x5\x152\xAA\x2\x577\x57D\x5\x158\xAD\x2"+
		"\x578\x57D\x5\x15A\xAE\x2\x579\x57D\x5\x15C\xAF\x2\x57A\x57D\x5\x15E\xB0"+
		"\x2\x57B\x57D\x5\x160\xB1\x2\x57C\x576\x3\x2\x2\x2\x57C\x577\x3\x2\x2"+
		"\x2\x57C\x578\x3\x2\x2\x2\x57C\x579\x3\x2\x2\x2\x57C\x57A\x3\x2\x2\x2"+
		"\x57C\x57B\x3\x2\x2\x2\x57D\xB9\x3\x2\x2\x2\x57E\x57F\x5\x17A\xBE\x2\x57F"+
		"\x580\a\x9A\x2\x2\x580\x582\x5\x17A\xBE\x2\x581\x583\x5\x1A\xE\x2\x582"+
		"\x581\x3\x2\x2\x2\x582\x583\x3\x2\x2\x2\x583\xBB\x3\x2\x2\x2\x584\x585"+
		"\a\x97\x2\x2\x585\x58A\x5\xBE`\x2\x586\x587\a\x89\x2\x2\x587\x589\x5\xBE"+
		"`\x2\x588\x586\x3\x2\x2\x2\x589\x58C\x3\x2\x2\x2\x58A\x588\x3\x2\x2\x2"+
		"\x58A\x58B\x3\x2\x2\x2\x58B\x58D\x3\x2\x2\x2\x58C\x58A\x3\x2\x2\x2\x58D"+
		"\x58E\a\x98\x2\x2\x58E\xBD\x3\x2\x2\x2\x58F\x590\x5\x17A\xBE\x2\x590\xBF"+
		"\x3\x2\x2\x2\x591\x592\a\x8A\x2\x2\x592\x597\x5\x18\r\x2\x593\x594\a\x89"+
		"\x2\x2\x594\x596\x5\x18\r\x2\x595\x593\x3\x2\x2\x2\x596\x599\x3\x2\x2"+
		"\x2\x597\x595\x3\x2\x2\x2\x597\x598\x3\x2\x2\x2\x598\xC1\x3\x2\x2\x2\x599"+
		"\x597\x3\x2\x2\x2\x59A\x59F\x5\x4\x3\x2\x59B\x59C\a\x89\x2\x2\x59C\x59E"+
		"\x5\x4\x3\x2\x59D\x59B\x3\x2\x2\x2\x59E\x5A1\x3\x2\x2\x2\x59F\x59D\x3"+
		"\x2\x2\x2\x59F\x5A0\x3\x2\x2\x2\x5A0\xC3\x3\x2\x2\x2\x5A1\x59F\x3\x2\x2"+
		"\x2\x5A2\x5A4\x5\xC6\x64\x2\x5A3\x5A2\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2\x2"+
		"\x5A5\x5A3\x3\x2\x2\x2\x5A5\x5A6\x3\x2\x2\x2\x5A6\xC5\x3\x2\x2\x2\x5A7"+
		"\x5A8\a\x66\x2\x2\x5A8\x5A9\x5\x17A\xBE\x2\x5A9\x5AA\a\x8A\x2\x2\x5AA"+
		"\x5AB\x5\xC8\x65\x2\x5AB\xC7\x3\x2\x2\x2\x5AC\x5AF\x5\xCA\x66\x2\x5AD"+
		"\x5AE\a\x89\x2\x2\x5AE\x5B0\x5\xCCg\x2\x5AF\x5AD\x3\x2\x2\x2\x5AF\x5B0"+
		"\x3\x2\x2\x2\x5B0\xC9\x3\x2\x2\x2\x5B1\x5B4\x5\x18\r\x2\x5B2\x5B4\a\x16"+
		"\x2\x2\x5B3\x5B1\x3\x2\x2\x2\x5B3\x5B2\x3\x2\x2\x2\x5B4\xCB\x3\x2\x2\x2"+
		"\x5B5\x5BA\x5\x4\x3\x2\x5B6\x5B7\a\x89\x2\x2\x5B7\x5B9\x5\x4\x3\x2\x5B8"+
		"\x5B6\x3\x2\x2\x2\x5B9\x5BC\x3\x2\x2\x2\x5BA\x5B8\x3\x2\x2\x2\x5BA\x5BB"+
		"\x3\x2\x2\x2\x5BB\xCD\x3\x2\x2\x2\x5BC\x5BA\x3\x2\x2\x2\x5BD\x5BF\a\x82"+
		"\x2\x2\x5BE\x5C0\x5\xD0i\x2\x5BF\x5BE\x3\x2\x2\x2\x5BF\x5C0\x3\x2\x2\x2"+
		"\x5C0\x5C1\x3\x2\x2\x2\x5C1\x5C2\a\x83\x2\x2\x5C2\xCF\x3\x2\x2\x2\x5C3"+
		"\x5C5\x5\xD2j\x2\x5C4\x5C3\x3\x2\x2\x2\x5C5\x5C6\x3\x2\x2\x2\x5C6\x5C4"+
		"\x3\x2\x2\x2\x5C6\x5C7\x3\x2\x2\x2\x5C7\xD1\x3\x2\x2\x2\x5C8\x5CB\x5\xE0"+
		"q\x2\x5C9\x5CB\x5\x16C\xB7\x2\x5CA\x5C8\x3\x2\x2\x2\x5CA\x5C9\x3\x2\x2"+
		"\x2\x5CB\xD3\x3\x2\x2\x2\x5CC\x5CE\x5\xDEp\x2\x5CD\x5CC\x3\x2\x2\x2\x5CE"+
		"\x5CF\x3\x2\x2\x2\x5CF\x5CD\x3\x2\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0\xD5"+
		"\x3\x2\x2\x2\x5D1\x5D3\x5\xDCo\x2\x5D2\x5D1\x3\x2\x2\x2\x5D3\x5D4\x3\x2"+
		"\x2\x2\x5D4\x5D2\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2\x2\x5D5\xD7\x3\x2\x2\x2"+
		"\x5D6\x5D8\x5\xDAn\x2\x5D7\x5D6\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9"+
		"\x5D7\x3\x2\x2\x2\x5D9\x5DA\x3\x2\x2\x2\x5DA\xD9\x3\x2\x2\x2\x5DB\x5DC"+
		"\t\f\x2\x2\x5DC\xDB\x3\x2\x2\x2\x5DD\x5DE\t\r\x2\x2\x5DE\xDD\x3\x2\x2"+
		"\x2\x5DF\x5E0\t\xE\x2\x2\x5E0\xDF\x3\x2\x2\x2\x5E1\x5EC\x5\x168\xB5\x2"+
		"\x5E2\x5EC\x5\x170\xB9\x2\x5E3\x5EC\x5\x166\xB4\x2\x5E4\x5EC\x5\x16A\xB6"+
		"\x2\x5E5\x5EC\x5\x172\xBA\x2\x5E6\x5EC\x5\x164\xB3\x2\x5E7\x5EC\x5\x162"+
		"\xB2\x2\x5E8\x5EC\x5\x110\x89\x2\x5E9\x5EC\x5\x16E\xB8\x2\x5EA\x5EC\x5"+
		"\x154\xAB\x2\x5EB\x5E1\x3\x2\x2\x2\x5EB\x5E2\x3\x2\x2\x2\x5EB\x5E3\x3"+
		"\x2\x2\x2\x5EB\x5E4\x3\x2\x2\x2\x5EB\x5E5\x3\x2\x2\x2\x5EB\x5E6\x3\x2"+
		"\x2\x2\x5EB\x5E7\x3\x2\x2\x2\x5EB\x5E8\x3\x2\x2\x2\x5EB\x5E9\x3\x2\x2"+
		"\x2\x5EB\x5EA\x3\x2\x2\x2\x5EC\xE1\x3\x2\x2\x2\x5ED\x5F2\x5\xE4s\x2\x5EE"+
		"\x5EF\a\x89\x2\x2\x5EF\x5F1\x5\xE4s\x2\x5F0\x5EE\x3\x2\x2\x2\x5F1\x5F4"+
		"\x3\x2\x2\x2\x5F2\x5F0\x3\x2\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\xE3\x3\x2"+
		"\x2\x2\x5F4\x5F2\x3\x2\x2\x2\x5F5\x5F6\x5\x17A\xBE\x2\x5F6\x5F7\a\x96"+
		"\x2\x2\x5F7\x5F8\x5 \x11\x2\x5F8\xE5\x3\x2\x2\x2\x5F9\x5FE\x5\xE8u\x2"+
		"\x5FA\x5FB\a\x89\x2\x2\x5FB\x5FD\x5\xE8u\x2\x5FC\x5FA\x3\x2\x2\x2\x5FD"+
		"\x600\x3\x2\x2\x2\x5FE\x5FC\x3\x2\x2\x2\x5FE\x5FF\x3\x2\x2\x2\x5FF\xE7"+
		"\x3\x2\x2\x2\x600\x5FE\x3\x2\x2\x2\x601\x604\x5\x17A\xBE\x2\x602\x603"+
		"\a\x96\x2\x2\x603\x605\x5\xEAv\x2\x604\x602\x3\x2\x2\x2\x604\x605\x3\x2"+
		"\x2\x2\x605\xE9\x3\x2\x2\x2\x606\x609\x5 \x11\x2\x607\x609\x5\x11E\x90"+
		"\x2\x608\x606\x3\x2\x2\x2\x608\x607\x3\x2\x2\x2\x609\xEB\x3\x2\x2\x2\x60A"+
		"\x60D\x5\n\x6\x2\x60B\x60D\a\x63\x2\x2\x60C\x60A\x3\x2\x2\x2\x60C\x60B"+
		"\x3\x2\x2\x2\x60D\xED\x3\x2\x2\x2\x60E\x60F\x5\x4\x3\x2\x60F\x610\a\x88"+
		"\x2\x2\x610\x611\x5\x17A\xBE\x2\x611\x614\x3\x2\x2\x2\x612\x614\x5\x17A"+
		"\xBE\x2\x613\x60E\x3\x2\x2\x2\x613\x612\x3\x2\x2\x2\x614\xEF\x3\x2\x2"+
		"\x2\x615\x61C\x5\x88\x45\x2\x616\x61C\a\x8B\x2\x2\x617\x618\a\xD2\x2\x2"+
		"\x618\x619\x5 \x11\x2\x619\x61A\a\x8B\x2\x2\x61A\x61C\x3\x2\x2\x2\x61B"+
		"\x615\x3\x2\x2\x2\x61B\x616\x3\x2\x2\x2\x61B\x617\x3\x2\x2\x2\x61C\xF1"+
		"\x3\x2\x2\x2\x61D\x624\x5\xFA~\x2\x61E\x621\x5\xF4{\x2\x61F\x620\a\x89"+
		"\x2\x2\x620\x622\x5\xFA~\x2\x621\x61F\x3\x2\x2\x2\x621\x622\x3\x2\x2\x2"+
		"\x622\x624\x3\x2\x2\x2\x623\x61D\x3\x2\x2\x2\x623\x61E\x3\x2\x2\x2\x624"+
		"\xF3\x3\x2\x2\x2\x625\x62A\x5\xF6|\x2\x626\x627\a\x89\x2\x2\x627\x629"+
		"\x5\xF6|\x2\x628\x626\x3\x2\x2\x2\x629\x62C\x3\x2\x2\x2\x62A\x628\x3\x2"+
		"\x2\x2\x62A\x62B\x3\x2\x2\x2\x62B\xF5\x3\x2\x2\x2\x62C\x62A\x3\x2\x2\x2"+
		"\x62D\x62F\x5\x132\x9A\x2\x62E\x62D\x3\x2\x2\x2\x62E\x62F\x3\x2\x2\x2"+
		"\x62F\x631\x3\x2\x2\x2\x630\x632\x5\xF8}\x2\x631\x630\x3\x2\x2\x2\x631"+
		"\x632\x3\x2\x2\x2\x632\x633\x3\x2\x2\x2\x633\x634\x5\x174\xBB\x2\x634"+
		"\xF7\x3\x2\x2\x2\x635\x636\t\xF\x2\x2\x636\xF9\x3\x2\x2\x2\x637\x639\x5"+
		"\x132\x9A\x2\x638\x637\x3\x2\x2\x2\x638\x639\x3\x2\x2\x2\x639\x63A\x3"+
		"\x2\x2\x2\x63A\x63B\a\x41\x2\x2\x63B\x63C\x5\x11A\x8E\x2\x63C\x63D\x5"+
		"\x17A\xBE\x2\x63D\xFB\x3\x2\x2\x2\x63E\x63F\x5\xFE\x80\x2\x63F\x640\x5"+
		"\x100\x81\x2\x640\x646\x3\x2\x2\x2\x641\x642\x5\x100\x81\x2\x642\x643"+
		"\x5\xFE\x80\x2\x643\x646\x3\x2\x2\x2\x644\x646\x5\xFE\x80\x2\x645\x63E"+
		"\x3\x2\x2\x2\x645\x641\x3\x2\x2\x2\x645\x644\x3\x2\x2\x2\x646\xFD\x3\x2"+
		"\x2\x2\x647\x649\x5\x132\x9A\x2\x648\x647\x3\x2\x2\x2\x648\x649\x3\x2"+
		"\x2\x2\x649\x64A\x3\x2\x2\x2\x64A\x64B\a)\x2\x2\x64B\x64C\x5\x104\x83"+
		"\x2\x64C\xFF\x3\x2\x2\x2\x64D\x64F\x5\x132\x9A\x2\x64E\x64D\x3\x2\x2\x2"+
		"\x64E\x64F\x3\x2\x2\x2\x64F\x651\x3\x2\x2\x2\x650\x652\x5\x102\x82\x2"+
		"\x651\x650\x3\x2\x2\x2\x651\x652\x3\x2\x2\x2\x652\x653\x3\x2\x2\x2\x653"+
		"\x654\aM\x2\x2\x654\x655\x5\x104\x83\x2\x655\x101\x3\x2\x2\x2\x656\x65E"+
		"\a\x44\x2\x2\x657\x65E\a\x32\x2\x2\x658\x65E\a\x43\x2\x2\x659\x65A\a\x44"+
		"\x2\x2\x65A\x65E\a\x32\x2\x2\x65B\x65C\a\x32\x2\x2\x65C\x65E\a\x44\x2"+
		"\x2\x65D\x656\x3\x2\x2\x2\x65D\x657\x3\x2\x2\x2\x65D\x658\x3\x2\x2\x2"+
		"\x65D\x659\x3\x2\x2\x2\x65D\x65B\x3\x2\x2\x2\x65E\x103\x3\x2\x2\x2\x65F"+
		"\x662\x5\x88\x45\x2\x660\x662\a\x8B\x2\x2\x661\x65F\x3\x2\x2\x2\x661\x660"+
		"\x3\x2\x2\x2\x662\x105\x3\x2\x2\x2\x663\x664\x5\x108\x85\x2\x664\x666"+
		"\x5\x10A\x86\x2\x665\x667\x5\x10C\x87\x2\x666\x665\x3\x2\x2\x2\x666\x667"+
		"\x3\x2\x2\x2\x667\x673\x3\x2\x2\x2\x668\x669\x5\x10A\x86\x2\x669\x66B"+
		"\x5\x108\x85\x2\x66A\x66C\x5\x10C\x87\x2\x66B\x66A\x3\x2\x2\x2\x66B\x66C"+
		"\x3\x2\x2\x2\x66C\x673\x3\x2\x2\x2\x66D\x66E\x5\x108\x85\x2\x66E\x670"+
		"\x5\x10A\x86\x2\x66F\x671\x5\x10C\x87\x2\x670\x66F\x3\x2\x2\x2\x670\x671"+
		"\x3\x2\x2\x2\x671\x673\x3\x2\x2\x2\x672\x663\x3\x2\x2\x2\x672\x668\x3"+
		"\x2\x2\x2\x672\x66D\x3\x2\x2\x2\x673\x107\x3\x2\x2\x2\x674\x676\x5\x132"+
		"\x9A\x2\x675\x674\x3\x2\x2\x2\x675\x676\x3\x2\x2\x2\x676\x678\x3\x2\x2"+
		"\x2\x677\x679\x5\x102\x82\x2\x678\x677\x3\x2\x2\x2\x678\x679\x3\x2\x2"+
		"\x2\x679\x67A\x3\x2\x2\x2\x67A\x67B\a\v\x2\x2\x67B\x67C\x5\x88\x45\x2"+
		"\x67C\x109\x3\x2\x2\x2\x67D\x67F\x5\x132\x9A\x2\x67E\x67D\x3\x2\x2\x2"+
		"\x67E\x67F\x3\x2\x2\x2\x67F\x681\x3\x2\x2\x2\x680\x682\x5\x102\x82\x2"+
		"\x681\x680\x3\x2\x2\x2\x681\x682\x3\x2\x2\x2\x682\x683\x3\x2\x2\x2\x683"+
		"\x684\aI\x2\x2\x684\x685\x5\x88\x45\x2\x685\x10B\x3\x2\x2\x2\x686\x688"+
		"\x5\x132\x9A\x2\x687\x686\x3\x2\x2\x2\x687\x688\x3\x2\x2\x2\x688\x689"+
		"\x3\x2\x2\x2\x689\x68A\a\x46\x2\x2\x68A\x68B\x5\x88\x45\x2\x68B\x10D\x3"+
		"\x2\x2\x2\x68C\x68D\t\x10\x2\x2\x68D\x10F\x3\x2\x2\x2\x68E\x690\x5\x132"+
		"\x9A\x2\x68F\x68E\x3\x2\x2\x2\x68F\x690\x3\x2\x2\x2\x690\x692\x3\x2\x2"+
		"\x2\x691\x693\x5\xD4k\x2\x692\x691\x3\x2\x2\x2\x692\x693\x3\x2\x2\x2\x693"+
		"\x694\x3\x2\x2\x2\x694\x695\t\x11\x2\x2\x695\x696\a>\x2\x2\x696\x697\x5"+
		"\n\x6\x2\x697\x698\a\x86\x2\x2\x698\x699\x5\x174\xBB\x2\x699\x69A\a\x87"+
		"\x2\x2\x69A\x69B\x5\xF0y\x2\x69B\x111\x3\x2\x2\x2\x69C\x69D\a\x8A\x2\x2"+
		"\x69D\x69E\t\x12\x2\x2\x69E\x6A0\a\x86\x2\x2\x69F\x6A1\x5\x1C\xF\x2\x6A0"+
		"\x69F\x3\x2\x2\x2\x6A0\x6A1\x3\x2\x2\x2\x6A1\x6A2\x3\x2\x2\x2\x6A2\x6A3"+
		"\a\x87\x2\x2\x6A3\x113\x3\x2\x2\x2\x6A4\x6A7\x5\x88\x45\x2\x6A5\x6A7\a"+
		"\x8B\x2\x2\x6A6\x6A4\x3\x2\x2\x2\x6A6\x6A5\x3\x2\x2\x2\x6A7\x115\x3\x2"+
		"\x2\x2\x6A8\x6A9\a\x8A\x2\x2\x6A9\x6AA\x5\xC2\x62\x2\x6AA\x117\x3\x2\x2"+
		"\x2\x6AB\x6AF\a\x82\x2\x2\x6AC\x6AE\x5\xE0q\x2\x6AD\x6AC\x3\x2\x2\x2\x6AE"+
		"\x6B1\x3\x2\x2\x2\x6AF\x6AD\x3\x2\x2\x2\x6AF\x6B0\x3\x2\x2\x2\x6B0\x6B2"+
		"\x3\x2\x2\x2\x6B1\x6AF\x3\x2\x2\x2\x6B2\x6B3\a\x83\x2\x2\x6B3\x119\x3"+
		"\x2\x2\x2\x6B4\x6BC\x5\xE\b\x2\x6B5\x6B7\t\x13\x2\x2\x6B6\x6B5\x3\x2\x2"+
		"\x2\x6B7\x6BA\x3\x2\x2\x2\x6B8\x6B6\x3\x2\x2\x2\x6B8\x6B9\x3\x2\x2\x2"+
		"\x6B9\x6BB\x3\x2\x2\x2\x6BA\x6B8\x3\x2\x2\x2\x6BB\x6BD\x5\x11C\x8F\x2"+
		"\x6BC\x6B8\x3\x2\x2\x2\x6BD\x6BE\x3\x2\x2\x2\x6BE\x6BC\x3\x2\x2\x2\x6BE"+
		"\x6BF\x3\x2\x2\x2\x6BF\x11B\x3\x2\x2\x2\x6C0\x6C4\a\x84\x2\x2\x6C1\x6C3"+
		"\a\x89\x2\x2\x6C2\x6C1\x3\x2\x2\x2\x6C3\x6C6\x3\x2\x2\x2\x6C4\x6C2\x3"+
		"\x2\x2\x2\x6C4\x6C5\x3\x2\x2\x2\x6C5\x6C7\x3\x2\x2\x2\x6C6\x6C4\x3\x2"+
		"\x2\x2\x6C7\x6C8\a\x85\x2\x2\x6C8\x11D\x3\x2\x2\x2\x6C9\x6D5\a\x82\x2"+
		"\x2\x6CA\x6CF\x5\xEAv\x2\x6CB\x6CC\a\x89\x2\x2\x6CC\x6CE\x5\xEAv\x2\x6CD"+
		"\x6CB\x3\x2\x2\x2\x6CE\x6D1\x3\x2\x2\x2\x6CF\x6CD\x3\x2\x2\x2\x6CF\x6D0"+
		"\x3\x2\x2\x2\x6D0\x6D3\x3\x2\x2\x2\x6D1\x6CF\x3\x2\x2\x2\x6D2\x6D4\a\x89"+
		"\x2\x2\x6D3\x6D2\x3\x2\x2\x2\x6D3\x6D4\x3\x2\x2\x2\x6D4\x6D6\x3\x2\x2"+
		"\x2\x6D5\x6CA\x3\x2\x2\x2\x6D5\x6D6\x3\x2\x2\x2\x6D6\x6D7\x3\x2\x2\x2"+
		"\x6D7\x6D8\a\x83\x2\x2\x6D8\x11F\x3\x2\x2\x2\x6D9\x6DA\a\x8A\x2\x2\x6DA"+
		"\x6DB\x5\xC2\x62\x2\x6DB\x121\x3\x2\x2\x2\x6DC\x6E0\a\x82\x2\x2\x6DD\x6DF"+
		"\x5\x124\x93\x2\x6DE\x6DD\x3\x2\x2\x2\x6DF\x6E2\x3\x2\x2\x2\x6E0\x6DE"+
		"\x3\x2\x2\x2\x6E0\x6E1\x3\x2\x2\x2\x6E1\x6E3\x3\x2\x2\x2\x6E2\x6E0\x3"+
		"\x2\x2\x2\x6E3\x6E4\a\x83\x2\x2\x6E4\x123\x3\x2\x2\x2\x6E5\x6E7\x5\x132"+
		"\x9A\x2\x6E6\x6E5\x3\x2\x2\x2\x6E6\x6E7\x3\x2\x2\x2\x6E7\x6E9\x3\x2\x2"+
		"\x2\x6E8\x6EA\a\x39\x2\x2\x6E9\x6E8\x3\x2\x2\x2\x6E9\x6EA\x3\x2\x2\x2"+
		"\x6EA\x720\x3\x2\x2\x2\x6EB\x6ED\a_\x2\x2\x6EC\x6EB\x3\x2\x2\x2\x6EC\x6ED"+
		"\x3\x2\x2\x2\x6ED\x6EE\x3\x2\x2\x2\x6EE\x70A\x5\n\x6\x2\x6EF\x6F1\x5\x17A"+
		"\xBE\x2\x6F0\x6F2\x5\xBC_\x2\x6F1\x6F0\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2"+
		"\x2\x6F2\x6F3\x3\x2\x2\x2\x6F3\x6F5\a\x86\x2\x2\x6F4\x6F6\x5\xF2z\x2\x6F5"+
		"\x6F4\x3\x2\x2\x2\x6F5\x6F6\x3\x2\x2\x2\x6F6\x6F7\x3\x2\x2\x2\x6F7\x6F9"+
		"\a\x87\x2\x2\x6F8\x6FA\x5\xC4\x63\x2\x6F9\x6F8\x3\x2\x2\x2\x6F9\x6FA\x3"+
		"\x2\x2\x2\x6FA\x6FB\x3\x2\x2\x2\x6FB\x6FC\a\x8B\x2\x2\x6FC\x70B\x3\x2"+
		"\x2\x2\x6FD\x6FE\x5\x17A\xBE\x2\x6FE\x6FF\a\x82\x2\x2\x6FF\x700\x5\x126"+
		"\x94\x2\x700\x701\a\x83\x2\x2\x701\x70B\x3\x2\x2\x2\x702\x703\aU\x2\x2"+
		"\x703\x704\a\x84\x2\x2\x704\x705\x5\xF2z\x2\x705\x706\a\x85\x2\x2\x706"+
		"\x707\a\x82\x2\x2\x707\x708\x5\x126\x94\x2\x708\x709\a\x83\x2\x2\x709"+
		"\x70B\x3\x2\x2\x2\x70A\x6EF\x3\x2\x2\x2\x70A\x6FD\x3\x2\x2\x2\x70A\x702"+
		"\x3\x2\x2\x2\x70B\x721\x3\x2\x2\x2\x70C\x70D\a\x63\x2\x2\x70D\x70F\x5"+
		"\x17A\xBE\x2\x70E\x710\x5\xBC_\x2\x70F\x70E\x3\x2\x2\x2\x70F\x710\x3\x2"+
		"\x2\x2\x710\x711\x3\x2\x2\x2\x711\x713\a\x86\x2\x2\x712\x714\x5\xF2z\x2"+
		"\x713\x712\x3\x2\x2\x2\x713\x714\x3\x2\x2\x2\x714\x715\x3\x2\x2\x2\x715"+
		"\x717\a\x87\x2\x2\x716\x718\x5\xC4\x63\x2\x717\x716\x3\x2\x2\x2\x717\x718"+
		"\x3\x2\x2\x2\x718\x719\x3\x2\x2\x2\x719\x71A\a\x8B\x2\x2\x71A\x721\x3"+
		"\x2\x2\x2\x71B\x71C\a!\x2\x2\x71C\x71D\x5\n\x6\x2\x71D\x71E\x5\x17A\xBE"+
		"\x2\x71E\x71F\a\x8B\x2\x2\x71F\x721\x3\x2\x2\x2\x720\x6EC\x3\x2\x2\x2"+
		"\x720\x70C\x3\x2\x2\x2\x720\x71B\x3\x2\x2\x2\x721\x125\x3\x2\x2\x2\x722"+
		"\x724\x5\x132\x9A\x2\x723\x722\x3\x2\x2\x2\x723\x724\x3\x2\x2\x2\x724"+
		"\x737\x3\x2\x2\x2\x725\x726\a)\x2\x2\x726\x72C\a\x8B\x2\x2\x727\x729\x5"+
		"\x132\x9A\x2\x728\x727\x3\x2\x2\x2\x728\x729\x3\x2\x2\x2\x729\x72A\x3"+
		"\x2\x2\x2\x72A\x72B\aM\x2\x2\x72B\x72D\a\x8B\x2\x2\x72C\x728\x3\x2\x2"+
		"\x2\x72C\x72D\x3\x2\x2\x2\x72D\x738\x3\x2\x2\x2\x72E\x72F\aM\x2\x2\x72F"+
		"\x735\a\x8B\x2\x2\x730\x732\x5\x132\x9A\x2\x731\x730\x3\x2\x2\x2\x731"+
		"\x732\x3\x2\x2\x2\x732\x733\x3\x2\x2\x2\x733\x734\a)\x2\x2\x734\x736\a"+
		"\x8B\x2\x2\x735\x731\x3\x2\x2\x2\x735\x736\x3\x2\x2\x2\x736\x738\x3\x2"+
		"\x2\x2\x737\x725\x3\x2\x2\x2\x737\x72E\x3\x2\x2\x2\x738\x127\x3\x2\x2"+
		"\x2\x739\x73A\a\x8A\x2\x2\x73A\x73B\x5\x14\v\x2\x73B\x129\x3\x2\x2\x2"+
		"\x73C\x748\a\x82\x2\x2\x73D\x742\x5\x12C\x97\x2\x73E\x73F\a\x89\x2\x2"+
		"\x73F\x741\x5\x12C\x97\x2\x740\x73E\x3\x2\x2\x2\x741\x744\x3\x2\x2\x2"+
		"\x742\x740\x3\x2\x2\x2\x742\x743\x3\x2\x2\x2\x743\x746\x3\x2\x2\x2\x744"+
		"\x742\x3\x2\x2\x2\x745\x747\a\x89\x2\x2\x746\x745\x3\x2\x2\x2\x746\x747"+
		"\x3\x2\x2\x2\x747\x749\x3\x2\x2\x2\x748\x73D\x3\x2\x2\x2\x748\x749\x3"+
		"\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A\x74B\a\x83\x2\x2\x74B\x12B\x3\x2"+
		"\x2\x2\x74C\x74E\x5\x132\x9A\x2\x74D\x74C\x3\x2\x2\x2\x74D\x74E\x3\x2"+
		"\x2\x2\x74E\x74F\x3\x2\x2\x2\x74F\x752\x5\x17A\xBE\x2\x750\x751\a\x96"+
		"\x2\x2\x751\x753\x5 \x11\x2\x752\x750\x3\x2\x2\x2\x752\x753\x3\x2\x2\x2"+
		"\x753\x12D\x3\x2\x2\x2\x754\x755\a\x84\x2\x2\x755\x756\x5\x130\x99\x2"+
		"\x756\x757\a\x8A\x2\x2\x757\x759\x5\x138\x9D\x2\x758\x75A\a\x89\x2\x2"+
		"\x759\x758\x3\x2\x2\x2\x759\x75A\x3\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B"+
		"\x75C\a\x85\x2\x2\x75C\x12F\x3\x2\x2\x2\x75D\x760\x5\x150\xA9\x2\x75E"+
		"\x760\x5\x17A\xBE\x2\x75F\x75D\x3\x2\x2\x2\x75F\x75E\x3\x2\x2\x2\x760"+
		"\x131\x3\x2\x2\x2\x761\x763\x5\x134\x9B\x2\x762\x761\x3\x2\x2\x2\x763"+
		"\x764\x3\x2\x2\x2\x764\x762\x3\x2\x2\x2\x764\x765\x3\x2\x2\x2\x765\x133"+
		"\x3\x2\x2\x2\x766\x76A\a\x84\x2\x2\x767\x768\x5\x136\x9C\x2\x768\x769"+
		"\a\x8A\x2\x2\x769\x76B\x3\x2\x2\x2\x76A\x767\x3\x2\x2\x2\x76A\x76B\x3"+
		"\x2\x2\x2\x76B\x76C\x3\x2\x2\x2\x76C\x76E\x5\x138\x9D\x2\x76D\x76F\a\x89"+
		"\x2\x2\x76E\x76D\x3\x2\x2\x2\x76E\x76F\x3\x2\x2\x2\x76F\x770\x3\x2\x2"+
		"\x2\x770\x771\a\x85\x2\x2\x771\x135\x3\x2\x2\x2\x772\x775\x5\x150\xA9"+
		"\x2\x773\x775\x5\x17A\xBE\x2\x774\x772\x3\x2\x2\x2\x774\x773\x3\x2\x2"+
		"\x2\x775\x137\x3\x2\x2\x2\x776\x77B\x5\x13A\x9E\x2\x777\x778\a\x89\x2"+
		"\x2\x778\x77A\x5\x13A\x9E\x2\x779\x777\x3\x2\x2\x2\x77A\x77D\x3\x2\x2"+
		"\x2\x77B\x779\x3\x2\x2\x2\x77B\x77C\x3\x2\x2\x2\x77C\x139\x3\x2\x2\x2"+
		"\x77D\x77B\x3\x2\x2\x2\x77E\x78B\x5\x4\x3\x2\x77F\x788\a\x86\x2\x2\x780"+
		"\x785\x5\x13C\x9F\x2\x781\x782\a\x89\x2\x2\x782\x784\x5\x13C\x9F\x2\x783"+
		"\x781\x3\x2\x2\x2\x784\x787\x3\x2\x2\x2\x785\x783\x3\x2\x2\x2\x785\x786"+
		"\x3\x2\x2\x2\x786\x789\x3\x2\x2\x2\x787\x785\x3\x2\x2\x2\x788\x780\x3"+
		"\x2\x2\x2\x788\x789\x3\x2\x2\x2\x789\x78A\x3\x2\x2\x2\x78A\x78C\a\x87"+
		"\x2\x2\x78B\x77F\x3\x2\x2\x2\x78B\x78C\x3\x2\x2\x2\x78C\x13B\x3\x2\x2"+
		"\x2\x78D\x78E\x5\x17A\xBE\x2\x78E\x78F\a\x8A\x2\x2\x78F\x791\x3\x2\x2"+
		"\x2\x790\x78D\x3\x2\x2\x2\x790\x791\x3\x2\x2\x2\x791\x792\x3\x2\x2\x2"+
		"\x792\x793\x5 \x11\x2\x793\x13D\x3\x2\x2\x2\x794\x797\x5\x10\t\x2\x795"+
		"\x797\x5\x18\r\x2\x796\x794\x3\x2\x2\x2\x796\x795\x3\x2\x2\x2\x797\x79C"+
		"\x3\x2\x2\x2\x798\x79B\x5\x11C\x8F\x2\x799\x79B\a\x99\x2\x2\x79A\x798"+
		"\x3\x2\x2\x2\x79A\x799\x3\x2\x2\x2\x79B\x79E\x3\x2\x2\x2\x79C\x79A\x3"+
		"\x2\x2\x2\x79C\x79D\x3\x2\x2\x2\x79D\x79F\x3\x2\x2\x2\x79E\x79C\x3\x2"+
		"\x2\x2\x79F\x7A0\a\x8E\x2\x2\x7A0\x7A4\x3\x2\x2\x2\x7A1\x7A2\a\x63\x2"+
		"\x2\x7A2\x7A4\a\x8E\x2\x2\x7A3\x796\x3\x2\x2\x2\x7A3\x7A1\x3\x2\x2\x2"+
		"\x7A4\x13F\x3\x2\x2\x2\x7A5\x7AF\x5\x142\xA2\x2\x7A6\x7AF\x5\x144\xA3"+
		"\x2\x7A7\x7AF\av\x2\x2\x7A8\x7AF\aw\x2\x2\x7A9\x7AF\ay\x2\x2\x7AA\x7AF"+
		"\az\x2\x2\x7AB\x7AF\ax\x2\x2\x7AC\x7AF\a}\x2\x2\x7AD\x7AF\a:\x2\x2\x7AE"+
		"\x7A5\x3\x2\x2\x2\x7AE\x7A6\x3\x2\x2\x2\x7AE\x7A7\x3\x2\x2\x2\x7AE\x7A8"+
		"\x3\x2\x2\x2\x7AE\x7A9\x3\x2\x2\x2\x7AE\x7AA\x3\x2\x2\x2\x7AE\x7AB\x3"+
		"\x2\x2\x2\x7AE\x7AC\x3\x2\x2\x2\x7AE\x7AD\x3\x2\x2\x2\x7AF\x141\x3\x2"+
		"\x2\x2\x7B0\x7B1\t\x14\x2\x2\x7B1\x143\x3\x2\x2\x2\x7B2\x7B7\x5\x146\xA4"+
		"\x2\x7B3\x7B7\x5\x148\xA5\x2\x7B4\x7B7\a~\x2\x2\x7B5\x7B7\a\x7F\x2\x2"+
		"\x7B6\x7B2\x3\x2\x2\x2\x7B6\x7B3\x3\x2\x2\x2\x7B6\x7B4\x3\x2\x2\x2\x7B6"+
		"\x7B5\x3\x2\x2\x2\x7B7\x145\x3\x2\x2\x2\x7B8\x7BC\a\x80\x2\x2\x7B9\x7BB"+
		"\x5\x14A\xA6\x2\x7BA\x7B9\x3\x2\x2\x2\x7BB\x7BE\x3\x2\x2\x2\x7BC\x7BA"+
		"\x3\x2\x2\x2\x7BC\x7BD\x3\x2\x2\x2\x7BD\x7BF\x3\x2\x2\x2\x7BE\x7BC\x3"+
		"\x2\x2\x2\x7BF\x7C0\a\xBB\x2\x2\x7C0\x147\x3\x2\x2\x2\x7C1\x7C5\a\x81"+
		"\x2\x2\x7C2\x7C4\x5\x14C\xA7\x2\x7C3\x7C2\x3\x2\x2\x2\x7C4\x7C7\x3\x2"+
		"\x2\x2\x7C5\x7C3\x3\x2\x2\x2\x7C5\x7C6\x3\x2\x2\x2\x7C6\x7C8\x3\x2\x2"+
		"\x2\x7C7\x7C5\x3\x2\x2\x2\x7C8\x7C9\a\xBB\x2\x2\x7C9\x149\x3\x2\x2\x2"+
		"\x7CA\x7CF\x5\x14E\xA8\x2\x7CB\x7CF\a\xB7\x2\x2\x7CC\x7CF\a\xB9\x2\x2"+
		"\x7CD\x7CF\a\xBC\x2\x2\x7CE\x7CA\x3\x2\x2\x2\x7CE\x7CB\x3\x2\x2\x2\x7CE"+
		"\x7CC\x3\x2\x2\x2\x7CE\x7CD\x3\x2\x2\x2\x7CF\x14B\x3\x2\x2\x2\x7D0\x7D5"+
		"\x5\x14E\xA8\x2\x7D1\x7D5\a\xB7\x2\x2\x7D2\x7D5\a\xBA\x2\x2\x7D3\x7D5"+
		"\a\xBD\x2\x2\x7D4\x7D0\x3\x2\x2\x2\x7D4\x7D1\x3\x2\x2\x2\x7D4\x7D2\x3"+
		"\x2\x2\x2\x7D4\x7D3\x3\x2\x2\x2\x7D5\x14D\x3\x2\x2\x2\x7D6\x7DB\x5 \x11"+
		"\x2\x7D7\x7D8\a\x89\x2\x2\x7D8\x7DA\x5 \x11\x2\x7D9\x7D7\x3\x2\x2\x2\x7DA"+
		"\x7DD\x3\x2\x2\x2\x7DB\x7D9\x3\x2\x2\x2\x7DB\x7DC\x3\x2\x2\x2\x7DC\x7E4"+
		"\x3\x2\x2\x2\x7DD\x7DB\x3\x2\x2\x2\x7DE\x7E0\a\x8A\x2\x2\x7DF\x7E1\a\xBF"+
		"\x2\x2\x7E0\x7DF\x3\x2\x2\x2\x7E1\x7E2\x3\x2\x2\x2\x7E2\x7E0\x3\x2\x2"+
		"\x2\x7E2\x7E3\x3\x2\x2\x2\x7E3\x7E5\x3\x2\x2\x2\x7E4\x7DE\x3\x2\x2\x2"+
		"\x7E4\x7E5\x3\x2\x2\x2\x7E5\x14F\x3\x2\x2\x2\x7E6\x7E7\t\x15\x2\x2\x7E7"+
		"\x151\x3\x2\x2\x2\x7E8\x7EA\x5\x132\x9A\x2\x7E9\x7E8\x3\x2\x2\x2\x7E9"+
		"\x7EA\x3\x2\x2\x2\x7EA\x7EC\x3\x2\x2\x2\x7EB\x7ED\x5\xD8m\x2\x7EC\x7EB"+
		"\x3\x2\x2\x2\x7EC\x7ED\x3\x2\x2\x2\x7ED\x7EE\x3\x2\x2\x2\x7EE\x7EF\a\x16"+
		"\x2\x2\x7EF\x7F1\x5\x17A\xBE\x2\x7F0\x7F2\x5\xBC_\x2\x7F1\x7F0\x3\x2\x2"+
		"\x2\x7F1\x7F2\x3\x2\x2\x2\x7F2\x7F4\x3\x2\x2\x2\x7F3\x7F5\x5\xC0\x61\x2"+
		"\x7F4\x7F3\x3\x2\x2\x2\x7F4\x7F5\x3\x2\x2\x2\x7F5\x7F7\x3\x2\x2\x2\x7F6"+
		"\x7F8\x5\xC4\x63\x2\x7F7\x7F6\x3\x2\x2\x2\x7F7\x7F8\x3\x2\x2\x2\x7F8\x7F9"+
		"\x3\x2\x2\x2\x7F9\x7FB\x5\xCEh\x2\x7FA\x7FC\a\x8B\x2\x2\x7FB\x7FA\x3\x2"+
		"\x2\x2\x7FB\x7FC\x3\x2\x2\x2\x7FC\x153\x3\x2\x2\x2\x7FD\x7FE\a;\x2\x2"+
		"\x7FE\x7FF\x5\x17A\xBE\x2\x7FF\x800\x5\x88\x45\x2\x800\x155\x3\x2\x2\x2"+
		"\x801\x803\x5\x132\x9A\x2\x802\x801\x3\x2\x2\x2\x802\x803\x3\x2\x2\x2"+
		"\x803\x804\x3\x2\x2\x2\x804\x805\a\x34\x2\x2\x805\x806\t\x16\x2\x2\x806"+
		"\x807\x5\x88\x45\x2\x807\x157\x3\x2\x2\x2\x808\x80A\x5\x132\x9A\x2\x809"+
		"\x808\x3\x2\x2\x2\x809\x80A\x3\x2\x2\x2\x80A\x80C\x3\x2\x2\x2\x80B\x80D"+
		"\x5\xD8m\x2\x80C\x80B\x3\x2\x2\x2\x80C\x80D\x3\x2\x2\x2\x80D\x80E\x3\x2"+
		"\x2\x2\x80E\x80F\aS\x2\x2\x80F\x811\x5\x17A\xBE\x2\x810\x812\x5\xBC_\x2"+
		"\x811\x810\x3\x2\x2\x2\x811\x812\x3\x2\x2\x2\x812\x814\x3\x2\x2\x2\x813"+
		"\x815\x5\x116\x8C\x2\x814\x813\x3\x2\x2\x2\x814\x815\x3\x2\x2\x2\x815"+
		"\x817\x3\x2\x2\x2\x816\x818\x5\xC4\x63\x2\x817\x816\x3\x2\x2\x2\x817\x818"+
		"\x3\x2\x2\x2\x818\x819\x3\x2\x2\x2\x819\x81B\x5\x118\x8D\x2\x81A\x81C"+
		"\a\x8B\x2\x2\x81B\x81A\x3\x2\x2\x2\x81B\x81C\x3\x2\x2\x2\x81C\x159\x3"+
		"\x2\x2\x2\x81D\x81F\x5\x132\x9A\x2\x81E\x81D\x3\x2\x2\x2\x81E\x81F\x3"+
		"\x2\x2\x2\x81F\x821\x3\x2\x2\x2\x820\x822\x5\xD8m\x2\x821\x820\x3\x2\x2"+
		"\x2\x821\x822\x3\x2\x2\x2\x822\x823\x3\x2\x2\x2\x823\x824\a]\x2\x2\x824"+
		"\x826\x5\x17A\xBE\x2\x825\x827\x5\xBC_\x2\x826\x825\x3\x2\x2\x2\x826\x827"+
		"\x3\x2\x2\x2\x827\x829\x3\x2\x2\x2\x828\x82A\x5\x116\x8C\x2\x829\x828"+
		"\x3\x2\x2\x2\x829\x82A\x3\x2\x2\x2\x82A\x82C\x3\x2\x2\x2\x82B\x82D\x5"+
		"\xC4\x63\x2\x82C\x82B\x3\x2\x2\x2\x82C\x82D\x3\x2\x2\x2\x82D\x82E\x3\x2"+
		"\x2\x2\x82E\x830\x5\x118\x8D\x2\x82F\x831\a\x8B\x2\x2\x830\x82F\x3\x2"+
		"\x2\x2\x830\x831\x3\x2\x2\x2\x831\x15B\x3\x2\x2\x2\x832\x834\x5\x132\x9A"+
		"\x2\x833\x832\x3\x2\x2\x2\x833\x834\x3\x2\x2\x2\x834\x836\x3\x2\x2\x2"+
		"\x835\x837\x5\xD8m\x2\x836\x835\x3\x2\x2\x2\x836\x837\x3\x2\x2\x2\x837"+
		"\x838\x3\x2\x2\x2\x838\x839\a\x31\x2\x2\x839\x83B\x5\x17A\xBE\x2\x83A"+
		"\x83C\x5\xBC_\x2\x83B\x83A\x3\x2\x2\x2\x83B\x83C\x3\x2\x2\x2\x83C\x83E"+
		"\x3\x2\x2\x2\x83D\x83F\x5\x120\x91\x2\x83E\x83D\x3\x2\x2\x2\x83E\x83F"+
		"\x3\x2\x2\x2\x83F\x841\x3\x2\x2\x2\x840\x842\x5\xC4\x63\x2\x841\x840\x3"+
		"\x2\x2\x2\x841\x842\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843\x845\x5\x122"+
		"\x92\x2\x844\x846\a\x8B\x2\x2\x845\x844\x3\x2\x2\x2\x845\x846\x3\x2\x2"+
		"\x2\x846\x15D\x3\x2\x2\x2\x847\x849\x5\x132\x9A\x2\x848\x847\x3\x2\x2"+
		"\x2\x848\x849\x3\x2\x2\x2\x849\x84B\x3\x2\x2\x2\x84A\x84C\x5\xD8m\x2\x84B"+
		"\x84A\x3\x2\x2\x2\x84B\x84C\x3\x2\x2\x2\x84C\x84D\x3\x2\x2\x2\x84D\x84E"+
		"\a \x2\x2\x84E\x850\x5\x17A\xBE\x2\x84F\x851\x5\x128\x95\x2\x850\x84F"+
		"\x3\x2\x2\x2\x850\x851\x3\x2\x2\x2\x851\x852\x3\x2\x2\x2\x852\x854\x5"+
		"\x12A\x96\x2\x853\x855\a\x8B\x2\x2\x854\x853\x3\x2\x2\x2\x854\x855\x3"+
		"\x2\x2\x2\x855\x15F\x3\x2\x2\x2\x856\x858\x5\x132\x9A\x2\x857\x856\x3"+
		"\x2\x2\x2\x857\x858\x3\x2\x2\x2\x858\x85A\x3\x2\x2\x2\x859\x85B\x5\xD8"+
		"m\x2\x85A\x859\x3\x2\x2\x2\x85A\x85B\x3\x2\x2\x2\x85B\x85C\x3\x2\x2\x2"+
		"\x85C\x85D\a\x1C\x2\x2\x85D\x85E\x5\xECw\x2\x85E\x860\x5\x17A\xBE\x2\x85F"+
		"\x861\x5\xBC_\x2\x860\x85F\x3\x2\x2\x2\x860\x861\x3\x2\x2\x2\x861\x862"+
		"\x3\x2\x2\x2\x862\x864\a\x86\x2\x2\x863\x865\x5\xF2z\x2\x864\x863\x3\x2"+
		"\x2\x2\x864\x865\x3\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x868\a\x87\x2"+
		"\x2\x867\x869\x5\xC4\x63\x2\x868\x867\x3\x2\x2\x2\x868\x869\x3\x2\x2\x2"+
		"\x869\x86A\x3\x2\x2\x2\x86A\x86B\a\x8B\x2\x2\x86B\x161\x3\x2\x2\x2\x86C"+
		"\x86E\x5\x132\x9A\x2\x86D\x86C\x3\x2\x2\x2\x86D\x86E\x3\x2\x2\x2\x86E"+
		"\x870\x3\x2\x2\x2\x86F\x871\x5\xD4k\x2\x870\x86F\x3\x2\x2\x2\x870\x871"+
		"\x3\x2\x2\x2\x871\x872\x3\x2\x2\x2\x872\x873\a!\x2\x2\x873\x874\x5\n\x6"+
		"\x2\x874\x875\x5\xEEx\x2\x875\x876\a\x82\x2\x2\x876\x877\x5\x106\x84\x2"+
		"\x877\x878\a\x83\x2\x2\x878\x163\x3\x2\x2\x2\x879\x87B\x5\x132\x9A\x2"+
		"\x87A\x879\x3\x2\x2\x2\x87A\x87B\x3\x2\x2\x2\x87B\x87D\x3\x2\x2\x2\x87C"+
		"\x87E\x5\xD6l\x2\x87D\x87C\x3\x2\x2\x2\x87D\x87E\x3\x2\x2\x2\x87E\x87F"+
		"\x3\x2\x2\x2\x87F\x880\x5\n\x6\x2\x880\x881\x5\xE6t\x2\x881\x882\a\x8B"+
		"\x2\x2\x882\x165\x3\x2\x2\x2\x883\x885\x5\x132\x9A\x2\x884\x883\x3\x2"+
		"\x2\x2\x884\x885\x3\x2\x2\x2\x885\x887\x3\x2\x2\x2\x886\x888\x5\xD4k\x2"+
		"\x887\x886\x3\x2\x2\x2\x887\x888\x3\x2\x2\x2\x888\x889\x3\x2\x2\x2\x889"+
		"\x88A\x5\n\x6\x2\x88A\x898\x5\xEEx\x2\x88B\x88C\a\x82\x2\x2\x88C\x88D"+
		"\x5\xFC\x7F\x2\x88D\x892\a\x83\x2\x2\x88E\x88F\a\x96\x2\x2\x88F\x890\x5"+
		"\xEAv\x2\x890\x891\a\x8B\x2\x2\x891\x893\x3\x2\x2\x2\x892\x88E\x3\x2\x2"+
		"\x2\x892\x893\x3\x2\x2\x2\x893\x899\x3\x2\x2\x2\x894\x895\a\xD2\x2\x2"+
		"\x895\x896\x5 \x11\x2\x896\x897\a\x8B\x2\x2\x897\x899\x3\x2\x2\x2\x898"+
		"\x88B\x3\x2\x2\x2\x898\x894\x3\x2\x2\x2\x899\x167\x3\x2\x2\x2\x89A\x89C"+
		"\x5\x132\x9A\x2\x89B\x89A\x3\x2\x2\x2\x89B\x89C\x3\x2\x2\x2\x89C\x89E"+
		"\x3\x2\x2\x2\x89D\x89F\x5\xD6l\x2\x89E\x89D\x3\x2\x2\x2\x89E\x89F\x3\x2"+
		"\x2\x2\x89F\x8A0\x3\x2\x2\x2\x8A0\x8A1\a\x17\x2\x2\x8A1\x8A2\x5\n\x6\x2"+
		"\x8A2\x8A3\x5\xE2r\x2\x8A3\x8A4\a\x8B\x2\x2\x8A4\x169\x3\x2\x2\x2\x8A5"+
		"\x8A7\x5\x132\x9A\x2\x8A6\x8A5\x3\x2\x2\x2\x8A6\x8A7\x3\x2\x2\x2\x8A7"+
		"\x8A9\x3\x2\x2\x2\x8A8\x8AA\x5\xD4k\x2\x8A9\x8A8\x3\x2\x2\x2\x8A9\x8AA"+
		"\x3\x2\x2\x2\x8AA\x8AB\x3\x2\x2\x2\x8AB\x8AC\x5\n\x6\x2\x8AC\x8AD\aU\x2"+
		"\x2\x8AD\x8AE\a\x84\x2\x2\x8AE\x8AF\x5\xF2z\x2\x8AF\x8B8\a\x85\x2\x2\x8B0"+
		"\x8B1\a\x82\x2\x2\x8B1\x8B2\x5\xFC\x7F\x2\x8B2\x8B3\a\x83\x2\x2\x8B3\x8B9"+
		"\x3\x2\x2\x2\x8B4\x8B5\a\xD2\x2\x2\x8B5\x8B6\x5 \x11\x2\x8B6\x8B7\a\x8B"+
		"\x2\x2\x8B7\x8B9\x3\x2\x2\x2\x8B8\x8B0\x3\x2\x2\x2\x8B8\x8B4\x3\x2\x2"+
		"\x2\x8B9\x8D2\x3\x2\x2\x2\x8BA\x8BC\x5\x132\x9A\x2\x8BB\x8BA\x3\x2\x2"+
		"\x2\x8BB\x8BC\x3\x2\x2\x2\x8BC\x8BE\x3\x2\x2\x2\x8BD\x8BF\x5\xD4k\x2\x8BE"+
		"\x8BD\x3\x2\x2\x2\x8BE\x8BF\x3\x2\x2\x2\x8BF\x8C0\x3\x2\x2\x2\x8C0\x8C1"+
		"\x5\n\x6\x2\x8C1\x8C2\x5\x4\x3\x2\x8C2\x8C3\a\x88\x2\x2\x8C3\x8C4\aU\x2"+
		"\x2\x8C4\x8C5\a\x84\x2\x2\x8C5\x8C6\x5\xF2z\x2\x8C6\x8CF\a\x85\x2\x2\x8C7"+
		"\x8C8\a\x82\x2\x2\x8C8\x8C9\x5\xFC\x7F\x2\x8C9\x8CA\a\x83\x2\x2\x8CA\x8D0"+
		"\x3\x2\x2\x2\x8CB\x8CC\a\xD2\x2\x2\x8CC\x8CD\x5 \x11\x2\x8CD\x8CE\a\x8B"+
		"\x2\x2\x8CE\x8D0\x3\x2\x2\x2\x8CF\x8C7\x3\x2\x2\x2\x8CF\x8CB\x3\x2\x2"+
		"\x2\x8D0\x8D2\x3\x2\x2\x2\x8D1\x8A6\x3\x2\x2\x2\x8D1\x8BB\x3\x2\x2\x2"+
		"\x8D2\x16B\x3\x2\x2\x2\x8D3\x8D5\x5\x132\x9A\x2\x8D4\x8D3\x3\x2\x2\x2"+
		"\x8D4\x8D5\x3\x2\x2\x2\x8D5\x8D7\x3\x2\x2\x2\x8D6\x8D8\x5\xD4k\x2\x8D7"+
		"\x8D6\x3\x2\x2\x2\x8D7\x8D8\x3\x2\x2\x2\x8D8\x8D9\x3\x2\x2\x2\x8D9\x8DA"+
		"\a\x95\x2\x2\x8DA\x8DB\aU\x2\x2\x8DB\x8DC\a\x86\x2\x2\x8DC\x8DD\a\x87"+
		"\x2\x2\x8DD\x8DE\x5\x114\x8B\x2\x8DE\x16D\x3\x2\x2\x2\x8DF\x8E1\x5\x132"+
		"\x9A\x2\x8E0\x8DF\x3\x2\x2\x2\x8E0\x8E1\x3\x2\x2\x2\x8E1\x8E3\x3\x2\x2"+
		"\x2\x8E2\x8E4\x5\xD4k\x2\x8E3\x8E2\x3\x2\x2\x2\x8E3\x8E4\x3\x2\x2\x2\x8E4"+
		"\x8E5\x3\x2\x2\x2\x8E5\x8E6\aU\x2\x2\x8E6\x8E8\a\x86\x2\x2\x8E7\x8E9\x5"+
		"\xF2z\x2\x8E8\x8E7\x3\x2\x2\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\x8EA\x3\x2\x2"+
		"\x2\x8EA\x8EC\a\x87\x2\x2\x8EB\x8ED\x5\x112\x8A\x2\x8EC\x8EB\x3\x2\x2"+
		"\x2\x8EC\x8ED\x3\x2\x2\x2\x8ED\x8EE\x3\x2\x2\x2\x8EE\x8EF\x5\x114\x8B"+
		"\x2\x8EF\x16F\x3\x2\x2\x2\x8F0\x8F2\x5\x132\x9A\x2\x8F1\x8F0\x3\x2\x2"+
		"\x2\x8F1\x8F2\x3\x2\x2\x2\x8F2\x8F4\x3\x2\x2\x2\x8F3\x8F5\x5\xD4k\x2\x8F4"+
		"\x8F3\x3\x2\x2\x2\x8F4\x8F5\x3\x2\x2\x2\x8F5\x8F6\x3\x2\x2\x2\x8F6\x8F7"+
		"\x5\xECw\x2\x8F7\x8F9\x5\xEEx\x2\x8F8\x8FA\x5\xBC_\x2\x8F9\x8F8\x3\x2"+
		"\x2\x2\x8F9\x8FA\x3\x2\x2\x2\x8FA\x8FB\x3\x2\x2\x2\x8FB\x8FD\a\x86\x2"+
		"\x2\x8FC\x8FE\x5\xF2z\x2\x8FD\x8FC\x3\x2\x2\x2\x8FD\x8FE\x3\x2\x2\x2\x8FE"+
		"\x8FF\x3\x2\x2\x2\x8FF\x901\a\x87\x2\x2\x900\x902\x5\xC4\x63\x2\x901\x900"+
		"\x3\x2\x2\x2\x901\x902\x3\x2\x2\x2\x902\x903\x3\x2\x2\x2\x903\x904\x5"+
		"\xF0y\x2\x904\x171\x3\x2\x2\x2\x905\x907\x5\x132\x9A\x2\x906\x905\x3\x2"+
		"\x2\x2\x906\x907\x3\x2\x2\x2\x907\x909\x3\x2\x2\x2\x908\x90A\x5\xD4k\x2"+
		"\x909\x908\x3\x2\x2\x2\x909\x90A\x3\x2\x2\x2\x90A\x90B\x3\x2\x2\x2\x90B"+
		"\x90C\x5\n\x6\x2\x90C\x90D\a>\x2\x2\x90D\x90E\x5\x10E\x88\x2\x90E\x90F"+
		"\a\x86\x2\x2\x90F\x912\x5\x174\xBB\x2\x910\x911\a\x89\x2\x2\x911\x913"+
		"\x5\x174\xBB\x2\x912\x910\x3\x2\x2\x2\x912\x913\x3\x2\x2\x2\x913\x914"+
		"\x3\x2\x2\x2\x914\x915\a\x87\x2\x2\x915\x916\x5\xF0y\x2\x916\x173\x3\x2"+
		"\x2\x2\x917\x918\x5\n\x6\x2\x918\x91B\x5\x17A\xBE\x2\x919\x91A\a\x96\x2"+
		"\x2\x91A\x91C\x5 \x11\x2\x91B\x919\x3\x2\x2\x2\x91B\x91C\x3\x2\x2\x2\x91C"+
		"\x175\x3\x2\x2\x2\x91D\x91F\a\x86\x2\x2\x91E\x920\x5\x1C\xF\x2\x91F\x91E"+
		"\x3\x2\x2\x2\x91F\x920\x3\x2\x2\x2\x920\x921\x3\x2\x2\x2\x921\x922\a\x87"+
		"\x2\x2\x922\x177\x3\x2\x2\x2\x923\x925\a\x86\x2\x2\x924\x926\x5\x1C\xF"+
		"\x2\x925\x924\x3\x2\x2\x2\x925\x926\x3\x2\x2\x2\x926\x927\x3\x2\x2\x2"+
		"\x927\x928\a\x87\x2\x2\x928\x179\x3\x2\x2\x2\x929\x92A\t\x17\x2\x2\x92A"+
		"\x17B\x3\x2\x2\x2\x12B\x17D\x180\x185\x189\x18F\x195\x19A\x19E\x1A4\x1AA"+
		"\x1B0\x1B4\x1B8\x1C1\x1C9\x1D3\x1D9\x1DC\x1E2\x1E7\x1F6\x200\x20B\x216"+
		"\x221\x22C\x237\x242\x24E\x250\x25F\x261\x26C\x277\x282\x2A1\x2A7\x2AE"+
		"\x2B1\x2B7\x2BD\x2C4\x2CB\x2D2\x2D8\x2DD\x2E0\x2F0\x2F6\x303\x307\x309"+
		"\x314\x318\x31D\x321\x326\x32D\x342\x345\x359\x35F\x362\x367\x36A\x372"+
		"\x37A\x385\x38D\x391\x396\x398\x39D\x3A1\x3A8\x3BC\x3C3\x3C7\x3D1\x3D6"+
		"\x3DD\x3E6\x3EB\x3F2\x3FE\x409\x411\x416\x41A\x42E\x433\x437\x444\x44E"+
		"\x46C\x470\x474\x493\x498\x4A3\x4C9\x4CD\x4D7\x4DD\x4E5\x4EA\x4F4\x4F9"+
		"\x501\x504\x50B\x512\x516\x519\x51F\x523\x529\x537\x53D\x544\x549\x54C"+
		"\x553\x55F\x564\x568\x574\x57C\x582\x58A\x597\x59F\x5A5\x5AF\x5B3\x5BA"+
		"\x5BF\x5C6\x5CA\x5CF\x5D4\x5D9\x5EB\x5F2\x5FE\x604\x608\x60C\x613\x61B"+
		"\x621\x623\x62A\x62E\x631\x638\x645\x648\x64E\x651\x65D\x661\x666\x66B"+
		"\x670\x672\x675\x678\x67E\x681\x687\x68F\x692\x6A0\x6A6\x6AF\x6B8\x6BE"+
		"\x6C4\x6CF\x6D3\x6D5\x6E0\x6E6\x6E9\x6EC\x6F1\x6F5\x6F9\x70A\x70F\x713"+
		"\x717\x720\x723\x728\x72C\x731\x735\x737\x742\x746\x748\x74D\x752\x759"+
		"\x75F\x764\x76A\x76E\x774\x77B\x785\x788\x78B\x790\x796\x79A\x79C\x7A3"+
		"\x7AE\x7B6\x7BC\x7C5\x7CE\x7D4\x7DB\x7E2\x7E4\x7E9\x7EC\x7F1\x7F4\x7F7"+
		"\x7FB\x802\x809\x80C\x811\x814\x817\x81B\x81E\x821\x826\x829\x82C\x830"+
		"\x833\x836\x83B\x83E\x841\x845\x848\x84B\x850\x854\x857\x85A\x860\x864"+
		"\x868\x86D\x870\x87A\x87D\x884\x887\x892\x898\x89B\x89E\x8A6\x8A9\x8B8"+
		"\x8BB\x8BE\x8CF\x8D1\x8D4\x8D7\x8E0\x8E3\x8E8\x8EC\x8F1\x8F4\x8F9\x8FD"+
		"\x901\x906\x909\x912\x91B\x91F\x925";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ICSharpCode.NRefactory.Rava.Parser
