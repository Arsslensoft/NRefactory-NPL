//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Research\NRefactory\NRefactory\ICSharpCode.NRefactory.Rava\Parser\RSharpPreprocessorParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace ICSharpCode.NRefactory.Rava.Parser {
 using System.Linq; 
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RSharpPreprocessorParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public interface IRSharpPreprocessorParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorDiagnostic</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorDiagnostic([NotNull] RSharpPreprocessorParser.PreprocessorDiagnosticContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorDiagnostic</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorDiagnostic([NotNull] RSharpPreprocessorParser.PreprocessorDiagnosticContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="RSharpPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessor_expression([NotNull] RSharpPreprocessorParser.Preprocessor_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RSharpPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessor_expression([NotNull] RSharpPreprocessorParser.Preprocessor_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorRegion</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorRegion([NotNull] RSharpPreprocessorParser.PreprocessorRegionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorRegion</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorRegion([NotNull] RSharpPreprocessorParser.PreprocessorRegionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="RSharpPreprocessorParser.directive_new_line_or_sharp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirective_new_line_or_sharp([NotNull] RSharpPreprocessorParser.Directive_new_line_or_sharpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RSharpPreprocessorParser.directive_new_line_or_sharp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirective_new_line_or_sharp([NotNull] RSharpPreprocessorParser.Directive_new_line_or_sharpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorDeclaration</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorDeclaration([NotNull] RSharpPreprocessorParser.PreprocessorDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorDeclaration</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorDeclaration([NotNull] RSharpPreprocessorParser.PreprocessorDeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorConditional</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorConditional([NotNull] RSharpPreprocessorParser.PreprocessorConditionalContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorConditional</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorConditional([NotNull] RSharpPreprocessorParser.PreprocessorConditionalContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorPragma</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorPragma([NotNull] RSharpPreprocessorParser.PreprocessorPragmaContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorPragma</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorPragma([NotNull] RSharpPreprocessorParser.PreprocessorPragmaContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorLine</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorLine([NotNull] RSharpPreprocessorParser.PreprocessorLineContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorLine</c>
	/// labeled alternative in <see cref="RSharpPreprocessorParser.preprocessor_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorLine([NotNull] RSharpPreprocessorParser.PreprocessorLineContext context);
}
} // namespace ICSharpCode.NRefactory.Rava.Parser
